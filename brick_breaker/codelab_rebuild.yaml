name: Brick Breaker with Flame
steps:
  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Create project
        flutter: create brick_breaker --empty
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: brick_breaker/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: brick_breaker/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
      - name: Configure dependencies
        path: brick_breaker/pubspec.yaml
        replace-contents: |
          name: brick_breaker
          description: "Re-implementing Woz's Breakout"
          publish_to: 'none'
          version: 0.1.0
          
          environment:
            sdk: ^3.7.0-0
          
          dependencies:
            flame: ^1.18.0
            flutter:
              sdk: flutter
            flutter_animate: ^4.5.0
            google_fonts: ^6.2.1
          
          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^4.0.0
          
          flutter:
            uses-material-design: true
      - name: flutter pub upgrade
        path: brick_breaker
        flutter: pub upgrade --major-versions
      - name: Remove README
        rm: brick_breaker/README.md
      - name: Add .vscode directory
        mkdir: brick_breaker/.vscode
      - name: Add .vscode/launch.json
        path: brick_breaker/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "brick_breaker",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Replace lib/main.dart
        path: brick_breaker/lib/main.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/game.dart';
          import 'package:flutter/material.dart';

          void main() {
            final game = FlameGame();
            runApp(GameWidget(game: game));
          }
      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: brick_breaker
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: brick_breaker
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: brick_breaker
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: brick_breaker
        flutter: build windows
      - name: Copy step_03
        copydir:
          from: brick_breaker
          to: step_03
      - name: Flutter clean
        path: step_03
        flutter: clean
  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Patch lib/main.dart
        path: brick_breaker/lib/main.dart
        patch-u: |
          --- b/brick_breaker/step_04/lib/main.dart
          +++ a/brick_breaker/step_04/lib/main.dart
          @@ -5,7 +5,9 @@
           import 'package:flame/game.dart';
           import 'package:flutter/material.dart';
           
          +import 'src/brick_breaker.dart';
          +
           void main() {
          -  final game = FlameGame();
          +  final game = BrickBreaker();
             runApp(GameWidget(game: game));
           }
      - name: Mkdir lib/src
        mkdir: brick_breaker/lib/src
      - name: Add lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:async';

          import 'package:flame/components.dart';
          import 'package:flame/game.dart';

          import 'components/components.dart';
          import 'config.dart';

          class BrickBreaker extends FlameGame {
            BrickBreaker()
              : super(
                  camera: CameraComponent.withFixedResolution(
                    width: gameWidth,
                    height: gameHeight,
                  ),
                );

            double get width => size.x;
            double get height => size.y;

            @override
            FutureOr<void> onLoad() async {
              super.onLoad();

              camera.viewfinder.anchor = Anchor.topLeft;

              world.add(PlayArea());
            }
          }
      - name: Add lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          const gameWidth = 820.0;
          const gameHeight = 1600.0;
      - name: Mkdir lib/src/components
        mkdir: brick_breaker/lib/src/components
      - name: Add lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          export 'play_area.dart';
      - name: Add lib/src/components/play_area.dart
        path: brick_breaker/lib/src/components/play_area.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:async';

          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';

          import '../brick_breaker.dart';

          class PlayArea extends RectangleComponent with HasGameReference<BrickBreaker> {
            PlayArea() : super(paint: Paint()..color = const Color(0xfff2e8cf));

            @override
            FutureOr<void> onLoad() async {
              super.onLoad();
              size = Vector2(game.width, game.height);
            }
          }
      - name: Copy step_04
        copydir:
          from: brick_breaker
          to: step_04
      - name: Flutter clean
        path: step_04
        flutter: clean
  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_05/lib/src/brick_breaker.dart
          @@ -3,6 +3,7 @@
           // found in the LICENSE file.
           
           import 'dart:async';
          +import 'dart:math' as math;
           
           import 'package:flame/components.dart';
           import 'package:flame/game.dart';
          @@ -19,6 +20,7 @@ class BrickBreaker extends FlameGame {
                   ),
                 );
           
          +  final rand = math.Random();
             double get width => size.x;
             double get height => size.y;
           
          @@ -29,5 +31,20 @@ class BrickBreaker extends FlameGame {
               camera.viewfinder.anchor = Anchor.topLeft;
           
               world.add(PlayArea());
          +
          +    world.add(
          +      Ball(
          +        radius: ballRadius,
          +        position: size / 2,
          +        velocity:
          +            Vector2(
          +                (rand.nextDouble() - 0.5) * width,
          +                height * 0.2,
          +              ).normalized()
          +              ..scale(height / 4),
          +      ),
          +    );
          +
          +    debugMode = true;
             }
           }
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/config.dart
          +++ a/brick_breaker/step_05/lib/src/config.dart
          @@ -4,3 +4,4 @@
           
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
          +const ballRadius = gameWidth * 0.02;
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/components/components.dart
          +++ a/brick_breaker/step_05/lib/src/components/components.dart
          @@ -2,4 +2,5 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +export 'ball.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';
          
          class Ball extends CircleComponent {
            Ball({
              required this.velocity,
              required super.position,
              required double radius,
            }) : super(
                   radius: radius,
                   anchor: Anchor.center,
                   paint:
                       Paint()
                         ..color = const Color(0xff1e6091)
                         ..style = PaintingStyle.fill,
                 );
          
            final Vector2 velocity;
          
            @override
            void update(double dt) {
              super.update(dt);
              position += velocity * dt;
            }
          }
      - name: Copy step_05
        copydir:
          from: brick_breaker
          to: step_05
      - name: Flutter clean
        path: step_05
        flutter: clean
  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_06/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_06/lib/src/brick_breaker.dart
          @@ -11,7 +11,7 @@ import 'package:flame/game.dart';
           import 'components/components.dart';
           import 'config.dart';
           
          -class BrickBreaker extends FlameGame {
          +class BrickBreaker extends FlameGame with HasCollisionDetection {
             BrickBreaker()
               : super(
                   camera: CameraComponent.withFixedResolution(
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_06/lib/src/components/ball.dart
          +++ a/brick_breaker/step_06/lib/src/components/ball.dart
          @@ -2,10 +2,15 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:flame/collisions.dart';
           import 'package:flame/components.dart';
           import 'package:flutter/material.dart';
           
          -class Ball extends CircleComponent {
          +import '../brick_breaker.dart';
          +import 'play_area.dart';
          +
          +class Ball extends CircleComponent
          +    with CollisionCallbacks, HasGameReference<BrickBreaker> {
             Ball({
               required this.velocity,
               required super.position,
          @@ -17,6 +22,7 @@ class Ball extends CircleComponent {
                        Paint()
                          ..color = const Color(0xff1e6091)
                          ..style = PaintingStyle.fill,
          +         children: [CircleHitbox()],
                  );
           
             final Vector2 velocity;
          @@ -26,4 +32,25 @@ class Ball extends CircleComponent {
               super.update(dt);
               position += velocity * dt;
             }
          +
          +  @override
          +  void onCollisionStart(
          +    Set<Vector2> intersectionPoints,
          +    PositionComponent other,
          +  ) {
          +    super.onCollisionStart(intersectionPoints, other);
          +    if (other is PlayArea) {
          +      if (intersectionPoints.first.y <= 0) {
          +        velocity.y = -velocity.y;
          +      } else if (intersectionPoints.first.x <= 0) {
          +        velocity.x = -velocity.x;
          +      } else if (intersectionPoints.first.x >= game.width) {
          +        velocity.x = -velocity.x;
          +      } else if (intersectionPoints.first.y >= game.height) {
          +        removeFromParent();
          +      }
          +    } else {
          +      debugPrint('collision with $other');
          +    }
          +  }
           }
      - name: Patch lib/src/components/play_area.dart
        path: brick_breaker/lib/src/components/play_area.dart
        patch-u: |
          --- b/brick_breaker/step_06/lib/src/components/play_area.dart
          +++ a/brick_breaker/step_06/lib/src/components/play_area.dart
          @@ -4,13 +4,18 @@
           
           import 'dart:async';
           
          +import 'package:flame/collisions.dart';
           import 'package:flame/components.dart';
           import 'package:flutter/material.dart';
           
           import '../brick_breaker.dart';
           
           class PlayArea extends RectangleComponent with HasGameReference<BrickBreaker> {
          -  PlayArea() : super(paint: Paint()..color = const Color(0xfff2e8cf));
          +  PlayArea()
          +    : super(
          +        paint: Paint()..color = const Color(0xfff2e8cf),
          +        children: [RectangleHitbox()],
          +      );
           
             @override
             FutureOr<void> onLoad() async {
      - name: Copy step_06
        copydir:
          from: brick_breaker
          to: step_06
      - name: Flutter clean
        path: step_06
        flutter: clean
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_07/lib/src/brick_breaker.dart
          @@ -6,12 +6,16 @@ import 'dart:async';
           import 'dart:math' as math;
           
           import 'package:flame/components.dart';
          +import 'package:flame/events.dart';
           import 'package:flame/game.dart';
          +import 'package:flutter/material.dart';
          +import 'package:flutter/services.dart';
           
           import 'components/components.dart';
           import 'config.dart';
           
          -class BrickBreaker extends FlameGame with HasCollisionDetection {
          +class BrickBreaker extends FlameGame
          +    with HasCollisionDetection, KeyboardEvents {
             BrickBreaker()
               : super(
                   camera: CameraComponent.withFixedResolution(
          @@ -45,6 +49,29 @@ class BrickBreaker extends FlameGame with HasCollisionDetection {
                 ),
               );
           
          +    world.add(
          +      Bat(
          +        size: Vector2(batWidth, batHeight),
          +        cornerRadius: const Radius.circular(ballRadius / 2),
          +        position: Vector2(width / 2, height * 0.95),
          +      ),
          +    );
          +
               debugMode = true;
             }
          +
          +  @override
          +  KeyEventResult onKeyEvent(
          +    KeyEvent event,
          +    Set<LogicalKeyboardKey> keysPressed,
          +  ) {
          +    super.onKeyEvent(event, keysPressed);
          +    switch (event.logicalKey) {
          +      case LogicalKeyboardKey.arrowLeft:
          +        world.children.query<Bat>().first.moveBy(-batStep);
          +      case LogicalKeyboardKey.arrowRight:
          +        world.children.query<Bat>().first.moveBy(batStep);
          +    }
          +    return KeyEventResult.handled;
          +  }
           }
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/config.dart
          +++ a/brick_breaker/step_07/lib/src/config.dart
          @@ -5,3 +5,6 @@
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
           const ballRadius = gameWidth * 0.02;
          +const batWidth = gameWidth * 0.2;
          +const batHeight = ballRadius * 2;
          +const batStep = gameWidth * 0.05;
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/components/ball.dart
          +++ a/brick_breaker/step_07/lib/src/components/ball.dart
          @@ -4,9 +4,11 @@
           
           import 'package:flame/collisions.dart';
           import 'package:flame/components.dart';
          +import 'package:flame/effects.dart';
           import 'package:flutter/material.dart';
           
           import '../brick_breaker.dart';
          +import 'bat.dart';
           import 'play_area.dart';
           
           class Ball extends CircleComponent
          @@ -47,8 +49,13 @@ class Ball extends CircleComponent
                 } else if (intersectionPoints.first.x >= game.width) {
                   velocity.x = -velocity.x;
                 } else if (intersectionPoints.first.y >= game.height) {
          -        removeFromParent();
          +        add(RemoveEffect(delay: 0.35));
                 }
          +    } else if (other is Bat) {
          +      velocity.y = -velocity.y;
          +      velocity.x =
          +          velocity.x +
          +          (position.x - other.position.x) / other.size.x * game.width * 0.3;
               } else {
                 debugPrint('collision with $other');
               }
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/components/components.dart
          +++ a/brick_breaker/step_07/lib/src/components/components.dart
          @@ -3,4 +3,5 @@
           // found in the LICENSE file.
           
           export 'ball.dart';
          +export 'bat.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/bat.dart
        path: brick_breaker/lib/src/components/bat.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flame/effects.dart';
          import 'package:flame/events.dart';
          import 'package:flutter/material.dart';

          import '../brick_breaker.dart';

          class Bat extends PositionComponent
              with DragCallbacks, HasGameReference<BrickBreaker> {
            Bat({
              required this.cornerRadius,
              required super.position,
              required super.size,
            }) : super(anchor: Anchor.center, children: [RectangleHitbox()]);

            final Radius cornerRadius;

            final _paint =
                Paint()
                  ..color = const Color(0xff1e6091)
                  ..style = PaintingStyle.fill;

            @override
            void render(Canvas canvas) {
              super.render(canvas);
              canvas.drawRRect(
                RRect.fromRectAndRadius(Offset.zero & size.toSize(), cornerRadius),
                _paint,
              );
            }

            @override
            void onDragUpdate(DragUpdateEvent event) {
              super.onDragUpdate(event);
              position.x = (position.x + event.localDelta.x).clamp(0, game.width);
            }

            void moveBy(double dx) {
              add(
                MoveToEffect(
                  Vector2((position.x + dx).clamp(0, game.width), position.y),
                  EffectController(duration: 0.1),
                ),
              );
            }
          }
      - name: Copy step_07
        copydir:
          from: brick_breaker
          to: step_07
      - name: Flutter clean
        path: step_07
        flutter: clean
  - name: step_08
    steps:
      - name: Remove generated code
        rmdir: step_08
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_08/lib/src/brick_breaker.dart
          @@ -38,6 +38,7 @@ class BrickBreaker extends FlameGame
           
               world.add(
                 Ball(
          +        difficultyModifier: difficultyModifier,
                   radius: ballRadius,
                   position: size / 2,
                   velocity:
          @@ -57,6 +58,18 @@ class BrickBreaker extends FlameGame
                 ),
               );
           
          +    await world.addAll([
          +      for (var i = 0; i < brickColors.length; i++)
          +        for (var j = 1; j <= 5; j++)
          +          Brick(
          +            position: Vector2(
          +              (i + 0.5) * brickWidth + (i + 1) * brickGutter,
          +              (j + 2.0) * brickHeight + j * brickGutter,
          +            ),
          +            color: brickColors[i],
          +          ),
          +    ]);
          +
               debugMode = true;
             }
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/config.dart
          +++ a/brick_breaker/step_08/lib/src/config.dart
          @@ -2,9 +2,29 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:flutter/material.dart';
          +
          +const brickColors = [
          +  Color(0xfff94144),
          +  Color(0xfff3722c),
          +  Color(0xfff8961e),
          +  Color(0xfff9844a),
          +  Color(0xfff9c74f),
          +  Color(0xff90be6d),
          +  Color(0xff43aa8b),
          +  Color(0xff4d908e),
          +  Color(0xff277da1),
          +  Color(0xff577590),
          +];
          +
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
           const ballRadius = gameWidth * 0.02;
           const batWidth = gameWidth * 0.2;
           const batHeight = ballRadius * 2;
           const batStep = gameWidth * 0.05;
          +const brickGutter = gameWidth * 0.015;
          +final brickWidth =
          +    (gameWidth - (brickGutter * (brickColors.length + 1))) / brickColors.length;
          +const brickHeight = gameHeight * 0.03;
          +const difficultyModifier = 1.03;
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/components/ball.dart
          +++ a/brick_breaker/step_08/lib/src/components/ball.dart
          @@ -9,6 +9,7 @@ import 'package:flutter/material.dart';
           
           import '../brick_breaker.dart';
           import 'bat.dart';
          +import 'brick.dart';
           import 'play_area.dart';
           
           class Ball extends CircleComponent
          @@ -17,6 +18,7 @@ class Ball extends CircleComponent
               required this.velocity,
               required super.position,
               required double radius,
          +    required this.difficultyModifier,
             }) : super(
                    radius: radius,
                    anchor: Anchor.center,
          @@ -28,6 +30,7 @@ class Ball extends CircleComponent
                  );
           
             final Vector2 velocity;
          +  final double difficultyModifier;
           
             @override
             void update(double dt) {
          @@ -56,8 +59,17 @@ class Ball extends CircleComponent
                 velocity.x =
                     velocity.x +
                     (position.x - other.position.x) / other.size.x * game.width * 0.3;
          -    } else {
          -      debugPrint('collision with $other');
          +    } else if (other is Brick) {
          +      if (position.y < other.position.y - other.size.y / 2) {
          +        velocity.y = -velocity.y;
          +      } else if (position.y > other.position.y + other.size.y / 2) {
          +        velocity.y = -velocity.y;
          +      } else if (position.x < other.position.x) {
          +        velocity.x = -velocity.x;
          +      } else if (position.x > other.position.x) {
          +        velocity.x = -velocity.x;
          +      }
          +      velocity.setFrom(velocity * difficultyModifier);
               }
             }
           }
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/components/components.dart
          +++ a/brick_breaker/step_08/lib/src/components/components.dart
          @@ -4,4 +4,5 @@
           
           export 'ball.dart';
           export 'bat.dart';
          +export 'brick.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/brick.dart
        path: brick_breaker/lib/src/components/brick.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';
          
          import '../brick_breaker.dart';
          import '../config.dart';
          import 'ball.dart';
          import 'bat.dart';
          
          class Brick extends RectangleComponent
              with CollisionCallbacks, HasGameReference<BrickBreaker> {
            Brick({required super.position, required Color color})
              : super(
                  size: Vector2(brickWidth, brickHeight),
                  anchor: Anchor.center,
                  paint:
                      Paint()
                        ..color = color
                        ..style = PaintingStyle.fill,
                  children: [RectangleHitbox()],
                );
          
            @override
            void onCollisionStart(
              Set<Vector2> intersectionPoints,
              PositionComponent other,
            ) {
              super.onCollisionStart(intersectionPoints, other);
              removeFromParent();
          
              if (game.world.children.query<Brick>().length == 1) {
                game.world.removeAll(game.world.children.query<Ball>());
                game.world.removeAll(game.world.children.query<Bat>());
              }
            }
          }
      - name: Copy step_08
        copydir:
          from: brick_breaker
          to: step_08
      - name: Flutter clean
        path: step_08
        flutter: clean
  - name: step_09
    steps:
      - name: Remove generated code
        rmdir: step_09
      - name: Patch lib/main.dart
        path: brick_breaker/lib/main.dart
        patch-u: |
          --- b/brick_breaker/step_09/lib/main.dart
          +++ a/brick_breaker/step_09/lib/main.dart
          @@ -2,12 +2,10 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          -import 'package:flame/game.dart';
           import 'package:flutter/material.dart';
           
          -import 'src/brick_breaker.dart';
          +import 'src/widgets/game_app.dart';
           
           void main() {
          -  final game = BrickBreaker();
          -  runApp(GameWidget(game: game));
          +  runApp(const GameApp());
           }
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_09/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_09/lib/src/brick_breaker.dart
          @@ -14,8 +14,10 @@ import 'package:flutter/services.dart';
           import 'components/components.dart';
           import 'config.dart';
           
          +enum PlayState { welcome, playing, gameOver, won }
          +
           class BrickBreaker extends FlameGame
          -    with HasCollisionDetection, KeyboardEvents {
          +    with HasCollisionDetection, KeyboardEvents, TapDetector {
             BrickBreaker()
               : super(
                   camera: CameraComponent.withFixedResolution(
          @@ -28,6 +30,22 @@ class BrickBreaker extends FlameGame
             double get width => size.x;
             double get height => size.y;
           
          +  late PlayState _playState;
          +  PlayState get playState => _playState;
          +  set playState(PlayState playState) {
          +    _playState = playState;
          +    switch (playState) {
          +      case PlayState.welcome:
          +      case PlayState.gameOver:
          +      case PlayState.won:
          +        overlays.add(playState.name);
          +      case PlayState.playing:
          +        overlays.remove(PlayState.welcome.name);
          +        overlays.remove(PlayState.gameOver.name);
          +        overlays.remove(PlayState.won.name);
          +    }
          +  }
          +
             @override
             FutureOr<void> onLoad() async {
               super.onLoad();
          @@ -36,6 +54,18 @@ class BrickBreaker extends FlameGame
           
               world.add(PlayArea());
           
          +    playState = PlayState.welcome;
          +  }
          +
          +  void startGame() {
          +    if (playState == PlayState.playing) return;
          +
          +    world.removeAll(world.children.query<Ball>());
          +    world.removeAll(world.children.query<Bat>());
          +    world.removeAll(world.children.query<Brick>());
          +
          +    playState = PlayState.playing;
          +
               world.add(
                 Ball(
                   difficultyModifier: difficultyModifier,
          @@ -58,7 +88,7 @@ class BrickBreaker extends FlameGame
                 ),
               );
           
          -    await world.addAll([
          +    world.addAll([
                 for (var i = 0; i < brickColors.length; i++)
                   for (var j = 1; j <= 5; j++)
                     Brick(
          @@ -69,8 +99,12 @@ class BrickBreaker extends FlameGame
                       color: brickColors[i],
                     ),
               ]);
          +  }
           
          -    debugMode = true;
          +  @override
          +  void onTap() {
          +    super.onTap();
          +    startGame();
             }
           
             @override
          @@ -84,7 +118,13 @@ class BrickBreaker extends FlameGame
                   world.children.query<Bat>().first.moveBy(-batStep);
                 case LogicalKeyboardKey.arrowRight:
                   world.children.query<Bat>().first.moveBy(batStep);
          +      case LogicalKeyboardKey.space:
          +      case LogicalKeyboardKey.enter:
          +        startGame();
               }
               return KeyEventResult.handled;
             }
          +
          +  @override
          +  Color backgroundColor() => const Color(0xfff2e8cf);
           }
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_09/lib/src/components/ball.dart
          +++ a/brick_breaker/step_09/lib/src/components/ball.dart
          @@ -52,7 +52,14 @@ class Ball extends CircleComponent
                 } else if (intersectionPoints.first.x >= game.width) {
                   velocity.x = -velocity.x;
                 } else if (intersectionPoints.first.y >= game.height) {
          -        add(RemoveEffect(delay: 0.35));
          +        add(
          +          RemoveEffect(
          +            delay: 0.35,
          +            onComplete: () {
          +              game.playState = PlayState.gameOver;
          +            },
          +          ),
          +        );
                 }
               } else if (other is Bat) {
                 velocity.y = -velocity.y;
      - name: Patch lib/src/components/brick.dart
        path: brick_breaker/lib/src/components/brick.dart
        patch-u: |
          --- b/brick_breaker/step_09/lib/src/components/brick.dart
          +++ a/brick_breaker/step_09/lib/src/components/brick.dart
          @@ -33,6 +33,7 @@ class Brick extends RectangleComponent
               removeFromParent();
           
               if (game.world.children.query<Brick>().length == 1) {
          +      game.playState = PlayState.won;
                 game.world.removeAll(game.world.children.query<Ball>());
                 game.world.removeAll(game.world.children.query<Bat>());
               }
      - name: Mkdir lib/src/widgets
        mkdir: brick_breaker/lib/src/widgets
      - name: Add lib/src/widgets/game_app.dart
        path: brick_breaker/lib/src/widgets/game_app.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/game.dart';
          import 'package:flutter/material.dart';
          import 'package:google_fonts/google_fonts.dart';

          import '../brick_breaker.dart';
          import '../config.dart';

          class GameApp extends StatelessWidget {
            const GameApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                theme: ThemeData(
                  textTheme: GoogleFonts.pressStart2pTextTheme().apply(
                    bodyColor: const Color(0xff184e77),
                    displayColor: const Color(0xff184e77),
                  ),
                ),
                home: Scaffold(
                  body: Container(
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [Color(0xffa9d6e5), Color(0xfff2e8cf)],
                      ),
                    ),
                    child: SafeArea(
                      child: Padding(
                        padding: const EdgeInsets.all(16),
                        child: Center(
                          child: FittedBox(
                            child: SizedBox(
                              width: gameWidth,
                              height: gameHeight,
                              child: GameWidget.controlled(
                                gameFactory: BrickBreaker.new,
                                overlayBuilderMap: {
                                  PlayState.welcome.name:
                                      (context, game) => Center(
                                        child: Text(
                                          'TAP TO PLAY',
                                          style:
                                              Theme.of(context).textTheme.headlineLarge,
                                        ),
                                      ),
                                  PlayState.gameOver.name:
                                      (context, game) => Center(
                                        child: Text(
                                          'G A M E   O V E R',
                                          style:
                                              Theme.of(context).textTheme.headlineLarge,
                                        ),
                                      ),
                                  PlayState.won.name:
                                      (context, game) => Center(
                                        child: Text(
                                          'Y O U   W O N ! ! !',
                                          style:
                                              Theme.of(context).textTheme.headlineLarge,
                                        ),
                                      ),
                                },
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              );
            }
          }
      - name: Patch macos/Runner/Release.entitlements
        path: brick_breaker/macos/Runner/Release.entitlements
        patch-u: |
          --- step_09/macos/Runner/Release.entitlements.orig	2023-09-01 15:04:05.839873573 +1000
          +++ step_09/macos/Runner/Release.entitlements	2023-11-07 17:01:53.611544371 +1100
          @@ -4,5 +4,7 @@
           <dict>
           	<key>com.apple.security.app-sandbox</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch macos/Runner/DebugProfile.entitlements
        path: brick_breaker/macos/Runner/DebugProfile.entitlements
        patch-u: |
          --- b/brick_breaker/step_09/macos/Runner/DebugProfile.entitlements
          +++ a/brick_breaker/step_09/macos/Runner/DebugProfile.entitlements
          @@ -8,5 +8,7 @@
           	<true/>
           	<key>com.apple.security.network.server</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch android/app/src/main/AndroidManifest.xml
        path: brick_breaker/android/app/src/main/AndroidManifest.xml
        patch-u: |
          --- a/brick_breaker/step_09/android/app/src/main/AndroidManifest.xml
          +++ b/brick_breaker/step_09/android/app/src/main/AndroidManifest.xml
          @@ -1,4 +1,5 @@
           <manifest xmlns:android="http://schemas.android.com/apk/res/android">
          +    <uses-permission android:name="android.permission.INTERNET" />
               <application
                   android:label="brick_breaker"
                   android:name="${applicationName}"
      - name: Copy step_09
        copydir:
          from: brick_breaker
          to: step_09
      - name: Flutter clean
        path: step_09
        flutter: clean
  - name: step_10
    steps:
      - name: Remove generated code
        rmdir: step_10
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_10/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_10/lib/src/brick_breaker.dart
          @@ -26,6 +26,7 @@ class BrickBreaker extends FlameGame
                   ),
                 );
           
          +  final ValueNotifier<int> score = ValueNotifier(0);
             final rand = math.Random();
             double get width => size.x;
             double get height => size.y;
          @@ -65,6 +66,7 @@ class BrickBreaker extends FlameGame
               world.removeAll(world.children.query<Brick>());
           
               playState = PlayState.playing;
          +    score.value = 0;
           
               world.add(
                 Ball(
      - name: Patch lib/src/components/brick.dart
        path: brick_breaker/lib/src/components/brick.dart
        patch-u: |
          --- b/brick_breaker/step_10/lib/src/components/brick.dart
          +++ a/brick_breaker/step_10/lib/src/components/brick.dart
          @@ -31,6 +31,7 @@ class Brick extends RectangleComponent
             ) {
               super.onCollisionStart(intersectionPoints, other);
               removeFromParent();
          +    game.score.value++;
           
               if (game.world.children.query<Brick>().length == 1) {
                 game.playState = PlayState.won;
      - name: Patch lib/src/widgets/game_app.dart
        path: brick_breaker/lib/src/widgets/game_app.dart
        patch-u: |
          --- b/brick_breaker/step_10/lib/src/widgets/game_app.dart
          +++ a/brick_breaker/step_10/lib/src/widgets/game_app.dart
          @@ -8,10 +8,25 @@ import 'package:google_fonts/google_fonts.dart';
           
           import '../brick_breaker.dart';
           import '../config.dart';
          +import 'overlay_screen.dart';
          +import 'score_card.dart';
           
          -class GameApp extends StatelessWidget {
          +class GameApp extends StatefulWidget {
             const GameApp({super.key});
           
          +  @override
          +  State<GameApp> createState() => _GameAppState();
          +}
          +
          +class _GameAppState extends State<GameApp> {
          +  late final BrickBreaker game;
          +
          +  @override
          +  void initState() {
          +    super.initState();
          +    game = BrickBreaker();
          +  }
          +
             @override
             Widget build(BuildContext context) {
               return MaterialApp(
          @@ -35,40 +50,38 @@ class GameApp extends StatelessWidget {
                       child: Padding(
                         padding: const EdgeInsets.all(16),
                         child: Center(
          -                child: FittedBox(
          -                  child: SizedBox(
          -                    width: gameWidth,
          -                    height: gameHeight,
          -                    child: GameWidget.controlled(
          -                      gameFactory: BrickBreaker.new,
          -                      overlayBuilderMap: {
          -                        PlayState.welcome.name:
          -                            (context, game) => Center(
          -                              child: Text(
          -                                'TAP TO PLAY',
          -                                style:
          -                                    Theme.of(context).textTheme.headlineLarge,
          -                              ),
          -                            ),
          -                        PlayState.gameOver.name:
          -                            (context, game) => Center(
          -                              child: Text(
          -                                'G A M E   O V E R',
          -                                style:
          -                                    Theme.of(context).textTheme.headlineLarge,
          -                              ),
          -                            ),
          -                        PlayState.won.name:
          -                            (context, game) => Center(
          -                              child: Text(
          -                                'Y O U   W O N ! ! !',
          -                                style:
          -                                    Theme.of(context).textTheme.headlineLarge,
          -                              ),
          -                            ),
          -                      },
          +                child: Column(
          +                  children: [
          +                    ScoreCard(score: game.score),
          +                    Expanded(
          +                      child: FittedBox(
          +                        child: SizedBox(
          +                          width: gameWidth,
          +                          height: gameHeight,
          +                          child: GameWidget(
          +                            game: game,
          +                            overlayBuilderMap: {
          +                              PlayState.welcome.name:
          +                                  (context, game) => const OverlayScreen(
          +                                    title: 'TAP TO PLAY',
          +                                    subtitle: 'Use arrow keys or swipe',
          +                                  ),
          +                              PlayState.gameOver.name:
          +                                  (context, game) => const OverlayScreen(
          +                                    title: 'G A M E   O V E R',
          +                                    subtitle: 'Tap to Play Again',
          +                                  ),
          +                              PlayState.won.name:
          +                                  (context, game) => const OverlayScreen(
          +                                    title: 'Y O U   W O N ! ! !',
          +                                    subtitle: 'Tap to Play Again',
          +                                  ),
          +                            },
          +                          ),
          +                        ),
          +                      ),
                               ),
          -                  ),
          +                  ],
                           ),
                         ),
                       ),
      - name: Add lib/src/widgets/overlay_screen.dart
        path: brick_breaker/lib/src/widgets/overlay_screen.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:flutter_animate/flutter_animate.dart';

          class OverlayScreen extends StatelessWidget {
            const OverlayScreen({super.key, required this.title, required this.subtitle});

            final String title;
            final String subtitle;

            @override
            Widget build(BuildContext context) {
              return Container(
                alignment: const Alignment(0, -0.15),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      title,
                      style: Theme.of(context).textTheme.headlineLarge,
                    ).animate().slideY(duration: 750.ms, begin: -3, end: 0),
                    const SizedBox(height: 16),
                    Text(subtitle, style: Theme.of(context).textTheme.headlineSmall)
                        .animate(onPlay: (controller) => controller.repeat())
                        .fadeIn(duration: 1.seconds)
                        .then()
                        .fadeOut(duration: 1.seconds),
                  ],
                ),
              );
            }
          }
      - name: Add lib/src/widgets/score_card.dart
        path: brick_breaker/lib/src/widgets/score_card.dart
        replace-contents: |
          // Copyright 2023 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';

          class ScoreCard extends StatelessWidget {
            const ScoreCard({super.key, required this.score});

            final ValueNotifier<int> score;

            @override
            Widget build(BuildContext context) {
              return ValueListenableBuilder<int>(
                valueListenable: score,
                builder: (context, score, child) {
                  return Padding(
                    padding: const EdgeInsets.fromLTRB(12, 6, 12, 18),
                    child: Text(
                      'Score: $score'.toUpperCase(),
                      style: Theme.of(context).textTheme.titleLarge!,
                    ),
                  );
                },
              );
            }
          }
      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: brick_breaker
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: brick_breaker
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: brick_breaker
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: brick_breaker
        flutter: build windows
      - name: Copy step_10
        copydir:
          from: brick_breaker
          to: step_10
      - name: Flutter clean
        path: step_10
        flutter: clean
  - name: Cleanup
    rmdir: brick_breaker