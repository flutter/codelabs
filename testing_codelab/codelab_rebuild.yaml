name: Testing Codelab script
steps:
  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Create project
        flutter: create --empty testing_app
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: testing_app/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: testing_app/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
      - name: Remove README
        rm: testing_app/README.md
      - name: Add .vscode directory
        mkdir: testing_app/.vscode
      - name: Add .vscode/launch.json
        path: testing_app/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "testing_app",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Add dependencies
        path: testing_app
        flutter: pub add provider go_router dev:test 'dev:flutter_driver:{"sdk":"flutter"}' 'dev:integration_test:{"sdk":"flutter"}'
      - name: Patch pubspec.yaml
        path: testing_app/pubspec.yaml
        patch-u: |
          --- b/testing_codelab/step_03/pubspec.yaml
          +++ a/testing_codelab/step_03/pubspec.yaml
          @@ -1,5 +1,9 @@
          +# Copyright 2020 The Flutter Authors. All rights reserved.
          +# Use of this source code is governed by a BSD-style license that can be
          +# found in the LICENSE file.
          +
           name: testing_app
          -description: "A new Flutter project."
          +description: "App behind Flutter testing codelab."
           publish_to: 'none'
           version: 0.1.0
      - name: Patch lib/main.dart
        path: testing_app/lib/main.dart
        patch-u: |
          diff --git b/testing_codelab/step_03/lib/main.dart a/testing_codelab/step_03/lib/main.dart
          index e016029..34256a5 100644
          --- b/testing_codelab/step_03/lib/main.dart
          +++ a/testing_codelab/step_03/lib/main.dart
          @@ -1,3 +1,7 @@
          +// Copyright 2020 The Flutter Authors. All rights reserved.
          +// Use of this source code is governed by a BSD-style license that can be
          +// found in the LICENSE file.
          +
           import 'package:flutter/material.dart';
           
           void main() {
      - name: Format lib/main.dart
        path: testing_app
        dart: format lib/main.dart
      - name: Copy step_03
        copydir:
          from: testing_app
          to: step_03
  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Replace lib/main.dart
        path: testing_app/lib/main.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:provider/provider.dart';
          import 'models/favorites.dart';
          import 'screens/favorites.dart';
          import 'screens/home.dart';
          
          void main() {
            runApp(const TestingApp());
          }
          
          final _router = GoRouter(
            routes: [
              GoRoute(
                path: HomePage.routeName,
                builder: (context, state) {
                  return const HomePage();
                },
                routes: [
                  GoRoute(
                    path: FavoritesPage.routeName,
                    builder: (context, state) {
                      return const FavoritesPage();
                    },
                  ),
                ],
              ),
            ],
          );
          
          class TestingApp extends StatelessWidget {
            const TestingApp({super.key});
          
            @override
            Widget build(BuildContext context) {
              return ChangeNotifierProvider<Favorites>(
                create: (context) => Favorites(),
                child: MaterialApp.router(
                  title: 'Testing Sample',
                  theme: ThemeData(
                    colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                  ),
                  routerConfig: _router,
                ),
              );
            }
          }
      - name: Make lib/models
        path: testing_app
        mkdir: lib/models
      - name: Add models/favorites.dart
        path: testing_app/lib/models/favorites.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';

          /// The [Favorites] class holds a list of favorite items saved by the user.
          class Favorites extends ChangeNotifier {
            final List<int> _favoriteItems = [];

            List<int> get items => _favoriteItems;

            void add(int itemNo) {
              _favoriteItems.add(itemNo);
              notifyListeners();
            }

            void remove(int itemNo) {
              _favoriteItems.remove(itemNo);
              notifyListeners();
            }
          }
      - name: Make lib/screens
        path: testing_app
        mkdir: lib/screens
      - name: Add lib/screens/favorites.dart
        path: testing_app/lib/screens/favorites.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';

          import '../models/favorites.dart';

          class FavoritesPage extends StatelessWidget {
            const FavoritesPage({super.key});

            static String routeName = 'favorites_page';

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(title: const Text('Favorites')),
                body: Consumer<Favorites>(
                  builder:
                      (context, value, child) => ListView.builder(
                        itemCount: value.items.length,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        itemBuilder:
                            (context, index) => FavoriteItemTile(value.items[index]),
                      ),
                ),
              );
            }
          }

          class FavoriteItemTile extends StatelessWidget {
            const FavoriteItemTile(this.itemNo, {super.key});

            final int itemNo;

            @override
            Widget build(BuildContext context) {
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundColor: Colors.primaries[itemNo % Colors.primaries.length],
                  ),
                  title: Text('Item $itemNo', key: Key('favorites_text_$itemNo')),
                  trailing: IconButton(
                    key: Key('remove_icon_$itemNo'),
                    icon: const Icon(Icons.close),
                    onPressed: () {
                      Provider.of<Favorites>(context, listen: false).remove(itemNo);
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Removed from favorites.'),
                          duration: Duration(seconds: 1),
                        ),
                      );
                    },
                  ),
                ),
              );
            }
          }
      - name: Add lib/screens/home.dart
        path: testing_app/lib/screens/home.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:provider/provider.dart';
          import '../models/favorites.dart';
          import 'favorites.dart';

          class HomePage extends StatelessWidget {
            static String routeName = '/';

            const HomePage({super.key});

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('Testing Sample'),
                  actions: <Widget>[
                    TextButton.icon(
                      onPressed: () {
                        context.go('/${FavoritesPage.routeName}');
                      },
                      icon: const Icon(Icons.favorite_border),
                      label: const Text('Favorites'),
                    ),
                  ],
                ),
                body: ListView.builder(
                  itemCount: 100,
                  cacheExtent: 20.0,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  itemBuilder: (context, index) => ItemTile(index),
                ),
              );
            }
          }

          class ItemTile extends StatelessWidget {
            final int itemNo;

            const ItemTile(this.itemNo, {super.key});

            @override
            Widget build(BuildContext context) {
              var favoritesList = Provider.of<Favorites>(context);

              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundColor: Colors.primaries[itemNo % Colors.primaries.length],
                  ),
                  title: Text('Item $itemNo', key: Key('text_$itemNo')),
                  trailing: IconButton(
                    key: Key('icon_$itemNo'),
                    icon:
                        favoritesList.items.contains(itemNo)
                            ? const Icon(Icons.favorite)
                            : const Icon(Icons.favorite_border),
                    onPressed: () {
                      !favoritesList.items.contains(itemNo)
                          ? favoritesList.add(itemNo)
                          : favoritesList.remove(itemNo);
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            favoritesList.items.contains(itemNo)
                                ? 'Added to favorites.'
                                : 'Removed from favorites.',
                          ),
                          duration: const Duration(seconds: 1),
                        ),
                      );
                    },
                  ),
                ),
              );
            }
          }
      - name: mkdir test
        path: testing_app
        mkdir: test
      - name: Create test/widget_test.dart
        path: testing_app/test/widget_test.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          // This is a basic Flutter widget test.
          //
          // To perform an interaction with a widget in your test, use the WidgetTester
          // utility in the flutter_test package. For example, you can send tap and scroll
          // gestures. You can also use WidgetTester to find child widgets in the widget
          // tree, read text, and verify that the values of widget properties are correct.
          
          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          
          import 'package:testing_app/main.dart';
          
          void main() {
            testWidgets('Smoke test', (tester) async {
              await tester.pumpWidget(const TestingApp());
              expect(find.byType(ListView), findsOneWidget);
            });
          }
      - name: Flutter test
        path: testing_app
        flutter: test
      - name: Copy step_04
        copydir:
          from: testing_app
          to: step_04
  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Make dir test/models
        path: testing_app
        mkdir: test/models
      - name: Add test/models/favorites_test.dart
        path: testing_app/test/models/favorites_test.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:test/test.dart';
          import 'package:testing_app/models/favorites.dart';

          void main() {
            group('Testing App Provider', () {
              var favorites = Favorites();

              test('A new item should be added', () {
                var number = 35;
                favorites.add(number);
                expect(favorites.items.contains(number), true);
              });

              test('An item should be removed', () {
                var number = 45;
                favorites.add(number);
                expect(favorites.items.contains(number), true);
                favorites.remove(number);
                expect(favorites.items.contains(number), false);
              });
            });
          }
      - name: Flutter test
        path: testing_app
        flutter: test
      - name: Copy step_05
        copydir:
          from: testing_app
          to: step_05
  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Add test/favorites_test.dart
        path: testing_app/test/favorites_test.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:provider/provider.dart';
          import 'package:testing_app/models/favorites.dart';
          import 'package:testing_app/screens/favorites.dart';

          late Favorites favoritesList;

          Widget createFavoritesScreen() => ChangeNotifierProvider<Favorites>(
            create: (context) {
              favoritesList = Favorites();
              return favoritesList;
            },
            child: const MaterialApp(home: FavoritesPage()),
          );

          void addItems() {
            for (var i = 0; i < 10; i += 2) {
              favoritesList.add(i);
            }
          }

          void main() {
            group('Favorites Page Widget Tests', () {
              testWidgets('Test if ListView shows up', (tester) async {
                await tester.pumpWidget(createFavoritesScreen());
                addItems();
                await tester.pumpAndSettle();
                expect(find.byType(ListView), findsOneWidget);
              });

              testWidgets('Testing Remove Button', (tester) async {
                await tester.pumpWidget(createFavoritesScreen());
                addItems();
                await tester.pumpAndSettle();
                var totalItems = tester.widgetList(find.byIcon(Icons.close)).length;
                await tester.tap(find.byIcon(Icons.close).first);
                await tester.pumpAndSettle();
                expect(
                  tester.widgetList(find.byIcon(Icons.close)).length,
                  lessThan(totalItems),
                );
                expect(find.text('Removed from favorites.'), findsOneWidget);
              });
            });
          }
      - name: Add test/home_test.dart
        path: testing_app/test/home_test.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:provider/provider.dart';
          import 'package:testing_app/models/favorites.dart';
          import 'package:testing_app/screens/home.dart';

          Widget createHomeScreen() => ChangeNotifierProvider<Favorites>(
            create: (context) => Favorites(),
            child: const MaterialApp(home: HomePage()),
          );

          void main() {
            group('Home Page Widget Tests', () {
              testWidgets('Testing if ListView shows up', (tester) async {
                await tester.pumpWidget(createHomeScreen());
                expect(find.byType(ListView), findsOneWidget);
              });

              testWidgets('Testing Scrolling', (tester) async {
                await tester.pumpWidget(createHomeScreen());
                expect(find.text('Item 0'), findsOneWidget);
                await tester.fling(find.byType(ListView), const Offset(0, -200), 3000);
                await tester.pumpAndSettle();
                expect(find.text('Item 0'), findsNothing);
              });

              testWidgets('Testing IconButtons', (tester) async {
                await tester.pumpWidget(createHomeScreen());
                expect(find.byIcon(Icons.favorite), findsNothing);
                await tester.tap(find.byIcon(Icons.favorite_border).first);
                await tester.pumpAndSettle(const Duration(seconds: 1));
                expect(find.text('Added to favorites.'), findsOneWidget);
                expect(find.byIcon(Icons.favorite), findsWidgets);
                await tester.tap(find.byIcon(Icons.favorite).first);
                await tester.pumpAndSettle(const Duration(seconds: 1));
                expect(find.text('Removed from favorites.'), findsOneWidget);
                expect(find.byIcon(Icons.favorite), findsNothing);
              });
            });
          }
      - name: Make test_driver
        path: testing_app
        mkdir: test_driver
      - name: Flutter test
        path: testing_app
        flutter: test
      - name: Copy step_06
        copydir:
          from: testing_app
          to: step_06
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Make integration_test directory
        path: testing_app
        mkdir: integration_test
      - name: Add integration_test/app_test.dart
        path: testing_app/integration_test/app_test.dart
        replace-contents: |
          // Copyright 2021 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:testing_app/main.dart';

          void main() {
            group('Testing App', () {
              testWidgets('Favorites operations test', (tester) async {
                await tester.pumpWidget(const TestingApp());

                final iconKeys = ['icon_0', 'icon_1', 'icon_2'];

                for (var icon in iconKeys) {
                  await tester.tap(find.byKey(ValueKey(icon)));
                  await tester.pumpAndSettle(const Duration(seconds: 1));

                  expect(find.text('Added to favorites.'), findsOneWidget);
                }

                await tester.tap(find.text('Favorites'));
                await tester.pumpAndSettle();

                final removeIconKeys = [
                  'remove_icon_0',
                  'remove_icon_1',
                  'remove_icon_2',
                ];

                for (final iconKey in removeIconKeys) {
                  await tester.tap(find.byKey(ValueKey(iconKey)));
                  await tester.pumpAndSettle(const Duration(seconds: 1));

                  expect(find.text('Removed from favorites.'), findsOneWidget);
                }
              });
            });
          }
      - name: Flutter test
        path: testing_app
        flutter: test
      - name: Flutter clean
        path: testing_app
        flutter: clean
      - name: Flutter pub get
        path: testing_app
        flutter: pub get
      - name: Flutter integration test (macos)
        platforms: [macos]
        path: testing_app
        flutter: test -d macos integration_test/app_test.dart
      - name: Flutter integration test (windows)
        platforms: [windows]
        path: testing_app
        flutter: test -d windows integration_test/app_test.dart
      - name: Flutter integration test (linux)
        platforms: [linux]
        path: testing_app
        flutter: test -d linux integration_test/app_test.dart
      - name: Copy step_07
        copydir:
          from: testing_app
          to: step_07
  - name: step_08
    steps:
      - name: Remove generated code
        rmdir: step_08
      - name: Create integration_test/perf_test.dart
        path: testing_app/integration_test/perf_test.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:integration_test/integration_test.dart';
          import 'package:testing_app/main.dart';
          
          void main() {
            group('Testing App Performance', () {
              final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized();
              binding.framePolicy = LiveTestWidgetsFlutterBindingFramePolicy.fullyLive;
          
              testWidgets('Scrolling test', (tester) async {
                await tester.pumpWidget(const TestingApp());
          
                final listFinder = find.byType(ListView);
          
                await binding.traceAction(() async {
                  await tester.fling(listFinder, const Offset(0, -500), 10000);
                  await tester.pumpAndSettle();
          
                  await tester.fling(listFinder, const Offset(0, 500), 10000);
                  await tester.pumpAndSettle();
                }, reportKey: 'scrolling_summary');
              });
            });
          }
      - name: Create test_driver/perf_driver.dart
        path: testing_app/test_driver/perf_driver.dart
        replace-contents: |
          // Copyright 2020 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter_driver/flutter_driver.dart' as driver;
          import 'package:integration_test/integration_test_driver.dart';

          Future<void> main() {
            return integrationDriver(
              responseDataCallback: (data) async {
                if (data != null) {
                  final timeline = driver.Timeline.fromJson(
                    data['scrolling_summary'] as Map<String, dynamic>,
                  );

                  final summary = driver.TimelineSummary.summarize(timeline);

                  await summary.writeTimelineToFile(
                    'scrolling_summary',
                    pretty: true,
                    includeSummary: true,
                  );
                }
              },
            );
          }
      - name: Copy step_08
        copydir:
          from: testing_app
          to: step_08
  - name: Cleanup
    rmdir: testing_app
