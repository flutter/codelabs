name: Get to know Firebase with Flutter
steps:
  - name: step_02
    steps:
      - name: Remove generated code
        rmdir: step_02
      - name: Create project
        flutter: create gtk_flutter --platforms=ios,android,web,macos
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: gtk_flutter/ios/Runner.xcodeproj/project.pbxproj
      - name: update dependencies
        path: gtk_flutter
        flutter: pub upgrade --major-versions
      - name: Configure analysis_options.yaml
        path: gtk_flutter/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
      - name: Add dependencies
        path: gtk_flutter
        flutter: pub add google_fonts go_router
      - name: Patch pubspec.yaml
        path: gtk_flutter/pubspec.yaml
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_02/pubspec.yaml
          +++ a/firebase-get-to-know-flutter/step_02/pubspec.yaml
          @@ -1,5 +1,6 @@
           name: gtk_flutter
          -description: "A new Flutter project."
          +description: "Get to know Firebase with Flutter"
          +
           # The following line prevents the package from being accidentally published to
           # pub.dev using `flutter pub publish`. This is preferred for private packages.
           publish_to: 'none' # Remove this line if you wish to publish to pub.dev
          @@ -59,6 +60,8 @@ flutter:
             # included with your application, so that you can use the icons in
             # the material Icons class.
             uses-material-design: true
          +  assets:
          +    - assets/codelab.png
           
             # To add assets to your application, add an assets section, like this:
             # assets:
      - name: Patch android/app/build.gradle
        path: gtk_flutter/android/app/build.gradle
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_02/android/app/build.gradle
          +++ a/firebase-get-to-know-flutter/step_02/android/app/build.gradle
          @@ -24,7 +24,7 @@ android {
                   applicationId = "com.example.gtk_flutter"
                   // You can update the following values to match your application needs.
                   // For more information, see: https://flutter.dev/to/review-gradle-config.
          -        minSdk = flutter.minSdkVersion
          +        minSdk = 21
                   targetSdk = flutter.targetSdkVersion
                   versionCode = flutter.versionCode
                   versionName = flutter.versionName
      - name: Remove the README.md
        rm: gtk_flutter/README.md
      - name: VSCode config
        path: gtk_flutter
        mkdir: .vscode
      - name: Add launch.json
        path: gtk_flutter/.vscode/launch.json
        replace-contents: |
          {
            // Use IntelliSense to learn about possible attributes.
            // Hover to view descriptions of existing attributes.
            // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
            "version": "0.2.0",
            "configurations": [
              {
                "name": "gtk_flutter",
                "request": "launch",
                "type": "dart"
              }
            ]
          }
      - name: Replace lib/main.dart
        path: gtk_flutter/lib/main.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          import 'package:google_fonts/google_fonts.dart';
          
          import 'home_page.dart';
          
          void main() {
            runApp(const App());
          }
          
          class App extends StatelessWidget {
            const App({super.key});
          
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Firebase Meetup',
                theme: ThemeData(
                  buttonTheme: Theme.of(context).buttonTheme.copyWith(
                        highlightColor: Colors.deepPurple,
                      ),
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                  textTheme: GoogleFonts.robotoTextTheme(
                    Theme.of(context).textTheme,
                  ),
                  visualDensity: VisualDensity.adaptivePlatformDensity,
                  useMaterial3: true,
                ),
                home: const HomePage(),
              );
            }
          }
      - name: Add lib/home_page.dart
        path: gtk_flutter/lib/home_page.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          
          import 'src/widgets.dart';
          
          class HomePage extends StatelessWidget {
            const HomePage({super.key});
          
            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('Firebase Meetup'),
                ),
                body: ListView(
                  children: <Widget>[
                    Image.asset('assets/codelab.png'),
                    const SizedBox(height: 8),
                    const IconAndDetail(Icons.calendar_today, 'October 30'),
                    const IconAndDetail(Icons.location_city, 'San Francisco'),
                    const Divider(
                      height: 8,
                      thickness: 1,
                      indent: 8,
                      endIndent: 8,
                      color: Colors.grey,
                    ),
                    const Header("What we'll be doing"),
                    const Paragraph(
                      'Join us for a day full of Firebase Workshops and Pizza!',
                    ),
                  ],
                ),
              );
            }
          }
      - name: Make lib/src
        path: gtk_flutter/lib
        mkdir: src
      - name: Add lib/src/authentication.dart
        path: gtk_flutter/lib/src/authentication.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          
          import 'widgets.dart';
          
          class AuthFunc extends StatelessWidget {
            const AuthFunc({
              super.key,
              required this.loggedIn,
              required this.signOut,
            });
          
            final bool loggedIn;
            final void Function() signOut;
          
            @override
            Widget build(BuildContext context) {
              return Row(
                children: [
                  Padding(
                    padding: const EdgeInsets.only(left: 24, bottom: 8),
                    child: StyledButton(
                        onPressed: () {
                          !loggedIn ? context.push('/sign-in') : signOut();
                        },
                        child: !loggedIn ? const Text('RSVP') : const Text('Logout')),
                  ),
                  Visibility(
                    visible: loggedIn,
                    child: Padding(
                      padding: const EdgeInsets.only(left: 24, bottom: 8),
                      child: StyledButton(
                          onPressed: () {
                            context.push('/profile');
                          },
                          child: const Text('Profile')),
                    ),
                  )
                ],
              );
            }
          }
      - name: Add lib/src/widgets.dart
        path: gtk_flutter/lib/src/widgets.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';

          class Header extends StatelessWidget {
            const Header(this.heading, {super.key});
            final String heading;

            @override
            Widget build(BuildContext context) => Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(
                    heading,
                    style: const TextStyle(fontSize: 24),
                  ),
                );
          }

          class Paragraph extends StatelessWidget {
            const Paragraph(this.content, {super.key});
            final String content;
            @override
            Widget build(BuildContext context) => Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  child: Text(
                    content,
                    style: const TextStyle(fontSize: 18),
                  ),
                );
          }

          class IconAndDetail extends StatelessWidget {
            const IconAndDetail(this.icon, this.detail, {super.key});
            final IconData icon;
            final String detail;

            @override
            Widget build(BuildContext context) => Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Icon(icon),
                      const SizedBox(width: 8),
                      Text(
                        detail,
                        style: const TextStyle(fontSize: 18),
                      )
                    ],
                  ),
                );
          }

          class StyledButton extends StatelessWidget {
            const StyledButton({required this.child, required this.onPressed, super.key});
            final Widget child;
            final void Function() onPressed;

            @override
            Widget build(BuildContext context) => OutlinedButton(
                  style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.deepPurple)),
                  onPressed: onPressed,
                  child: child,
                );
          }
      - name: Replace test/widget_test.dart
        path: gtk_flutter/test/widget_test.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter_test/flutter_test.dart';
          import 'package:gtk_flutter/main.dart';

          void main() {
            testWidgets('Basic rendering', (tester) async {
              // Build our app and trigger a frame.
              await tester.pumpWidget(const App());

              // Verify that our counter starts at 0.
              expect(find.text('Firebase Meetup'), findsOneWidget);
              expect(find.text('January 1st'), findsNothing);
            });
          }
      - name: Make assets directory
        path: gtk_flutter
        mkdir: assets
      - name: Add codelab.png
        path: gtk_flutter/assets/codelab.png
        base64-contents: |
          iVBORw0KGgoAAAANSUhEUgAAAwcAAAHCCAIAAAA1gCI2AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFn
          ZVJlYWR5ccllPAABPeRJREFUeNrsnQd8FOeZuHen7WzVrrqEhApIAkTvYBtT7LhgXBJ3n+NycXKx0/6x
          c0kuTr3YyTn2XXI2dhInLvG5x9gGA240F8BgBEJIIASSkEC9rLRtZqfs/5sZsayk7UXald7nNyyj2dnZ
          2anPvN/7fZ+6f8cxFQAAAAAAwKQHg00AAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAA
          AABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYE
          AAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAA
          AABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYE
          AAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAA
          AABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYE
          AAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAA
          AABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYE
          AAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAAAABWBAAAAAAAAFYEAAAAAAAAVgQAAAAA
          AACAFQEAAAAAAIAVAQAAAAAAgBUBQGrT0Nry46f/tHXvZ7ApAAAA4gUBmwAAUg4kQ7994Vk0Ync516+8
          GDYIAABAXIBYEQCkGFUnTyhKhCgrmAobBAAAAKwIACYpv33+We94e28PbBAAAACwIgCYjGzd+5mvCX1y
          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
      - name: Build for iOS
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build ios --debug --simulator
      - name: Build for Android
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build apk
      - name: Build for macOS 
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build macos --debug
      - name: Copy step_02
        copydir:
          from: gtk_flutter
          to: step_02
  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Update iOS podspec
        platforms: [ macos ]
        path: gtk_flutter/ios
        pod: update
      - name: Update macOS podspec 
        platforms: [ macos ]
        path: gtk_flutter/macos
        pod: update
      - name: Add lib/firebase_options.dart
        path: gtk_flutter/lib/firebase_options.dart
        replace-contents: |
          // TODO: Replace with file generated by FlutterFire CLI.
          // ignore_for_file: lines_longer_than_80_chars
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          /// Default [FirebaseOptions] for use with your Firebase apps.
          ///
          /// Example:
          /// ```dart
          /// import 'firebase_options.dart';
          /// // ...
          /// await Firebase.initializeApp(
          ///   options: DefaultFirebaseOptions.currentPlatform,
          /// );
          /// ```
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }

              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                case TargetPlatform.macOS:
                  return macos;
                default:
                  throw UnsupportedError(
                      'DefaultFirebaseOptions are not supported for this platform.');
              }
            }

            static const FirebaseOptions web = FirebaseOptions(
              apiKey: '',
              appId: '',
              messagingSenderId: '',
              projectId: '',
            );

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '',
              appId: '',
              messagingSenderId: '',
              projectId: '',
            );

            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: '',
              appId: '',
              messagingSenderId: '',
              projectId: '',
            );

            static const FirebaseOptions macos = FirebaseOptions(
              apiKey: '',
              appId: '',
              messagingSenderId: '',
              projectId: '',
            );
          }
      - name: Patch macos/Runner/DebugProfile.entitlements
        path: gtk_flutter/macos/Runner/DebugProfile.entitlements
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_04/macos/Runner/DebugProfile.entitlements
          +++ a/firebase-get-to-know-flutter/step_04/macos/Runner/DebugProfile.entitlements
          @@ -8,5 +8,7 @@
           	<true/>
           	<key>com.apple.security.network.server</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch macos/Runner/Release.entitlements
        path: gtk_flutter/macos/Runner/Release.entitlements
        patch-u: |
          diff --git b/firebase-get-to-know-flutter/step_04/macos/Runner/Release.entitlements a/firebase-get-to-know-flutter/step_04/macos/Runner/Release.entitlements
          index 852fa1a..ee95ab7 100644
          --- b/firebase-get-to-know-flutter/step_04/macos/Runner/Release.entitlements
          +++ a/firebase-get-to-know-flutter/step_04/macos/Runner/Release.entitlements
          @@ -4,5 +4,7 @@
           <dict>
           	<key>com.apple.security.app-sandbox</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Add cloud_firestore firebase_auth firebase_core provider firebase_ui_auth
        path: gtk_flutter
        flutter: pub add cloud_firestore firebase_auth firebase_core provider firebase_ui_auth
      - name: Copy step_04
        copydir:
          from: gtk_flutter
          to: step_04
  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Patch lib/main.dart
        path: gtk_flutter/lib/main.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_05/lib/main.dart
          +++ a/firebase-get-to-know-flutter/step_05/lib/main.dart
          @@ -2,21 +2,105 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:firebase_ui_auth/firebase_ui_auth.dart';
           import 'package:flutter/material.dart';
          +import 'package:go_router/go_router.dart';
           import 'package:google_fonts/google_fonts.dart';
          +import 'package:provider/provider.dart';
           
          +import 'app_state.dart';
           import 'home_page.dart';
           
           void main() {
          -  runApp(const App());
          +  WidgetsFlutterBinding.ensureInitialized();
          +
          +  runApp(ChangeNotifierProvider(
          +    create: (context) => ApplicationState(),
          +    builder: ((context, child) => const App()),
          +  ));
           }
           
          +final _router = GoRouter(
          +  routes: [
          +    GoRoute(
          +      path: '/',
          +      builder: (context, state) => const HomePage(),
          +      routes: [
          +        GoRoute(
          +          path: 'sign-in',
          +          builder: (context, state) {
          +            return SignInScreen(
          +              actions: [
          +                ForgotPasswordAction(((context, email) {
          +                  final uri = Uri(
          +                    path: '/sign-in/forgot-password',
          +                    queryParameters: <String, String?>{
          +                      'email': email,
          +                    },
          +                  );
          +                  context.push(uri.toString());
          +                })),
          +                AuthStateChangeAction(((context, state) {
          +                  final user = switch (state) {
          +                    SignedIn state => state.user,
          +                    UserCreated state => state.credential.user,
          +                    _ => null
          +                  };
          +                  if (user == null) {
          +                    return;
          +                  }
          +                  if (state is UserCreated) {
          +                    user.updateDisplayName(user.email!.split('@')[0]);
          +                  }
          +                  if (!user.emailVerified) {
          +                    user.sendEmailVerification();
          +                    const snackBar = SnackBar(
          +                        content: Text(
          +                            'Please check your email to verify your email address'));
          +                    ScaffoldMessenger.of(context).showSnackBar(snackBar);
          +                  }
          +                  context.pushReplacement('/');
          +                })),
          +              ],
          +            );
          +          },
          +          routes: [
          +            GoRoute(
          +              path: 'forgot-password',
          +              builder: (context, state) {
          +                final arguments = state.uri.queryParameters;
          +                return ForgotPasswordScreen(
          +                  email: arguments['email'],
          +                  headerMaxExtent: 200,
          +                );
          +              },
          +            ),
          +          ],
          +        ),
          +        GoRoute(
          +          path: 'profile',
          +          builder: (context, state) {
          +            return ProfileScreen(
          +              providers: const [],
          +              actions: [
          +                SignedOutAction((context) {
          +                  context.pushReplacement('/');
          +                }),
          +              ],
          +            );
          +          },
          +        ),
          +      ],
          +    ),
          +  ],
          +);
          +
           class App extends StatelessWidget {
             const App({super.key});
           
             @override
             Widget build(BuildContext context) {
          -    return MaterialApp(
          +    return MaterialApp.router(
                 title: 'Firebase Meetup',
                 theme: ThemeData(
                   buttonTheme: Theme.of(context).buttonTheme.copyWith(
          @@ -29,7 +113,7 @@ class App extends StatelessWidget {
                   visualDensity: VisualDensity.adaptivePlatformDensity,
                   useMaterial3: true,
                 ),
          -      home: const HomePage(),
          +      routerConfig: _router,
               );
             }
           }
      - name: Patch test/widget_test.dart
        path: gtk_flutter/test/widget_test.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_05/test/widget_test.dart
          +++ a/firebase-get-to-know-flutter/step_05/test/widget_test.dart
          @@ -3,12 +3,19 @@
           // found in the LICENSE file.
           
           import 'package:flutter_test/flutter_test.dart';
          +import 'package:gtk_flutter/app_state.dart';
           import 'package:gtk_flutter/main.dart';
          +import 'package:provider/provider.dart';
           
           void main() {
             testWidgets('Basic rendering', (tester) async {
               // Build our app and trigger a frame.
          -    await tester.pumpWidget(const App());
          +    await tester.pumpWidget(
          +      ChangeNotifierProvider(
          +        create: (context) => ApplicationState(),
          +        builder: (context, _) => const App(),
          +      ),
          +    );
           
               // Verify that our counter starts at 0.
               expect(find.text('Firebase Meetup'), findsOneWidget);
      - name: Add lib/app_state.dart
        path: gtk_flutter/lib/app_state.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:firebase_auth/firebase_auth.dart'
              hide EmailAuthProvider, PhoneAuthProvider;
          import 'package:firebase_core/firebase_core.dart';
          import 'package:firebase_ui_auth/firebase_ui_auth.dart';
          import 'package:flutter/material.dart';
          
          import 'firebase_options.dart';
          
          class ApplicationState extends ChangeNotifier {
            ApplicationState() {
              init();
            }
          
            bool _loggedIn = false;
            bool get loggedIn => _loggedIn;
          
            Future<void> init() async {
              await Firebase.initializeApp(
                  options: DefaultFirebaseOptions.currentPlatform);
          
              FirebaseUIAuth.configureProviders([
                EmailAuthProvider(),
              ]);
          
              FirebaseAuth.instance.userChanges().listen((user) {
                if (user != null) {
                  _loggedIn = true;
                } else {
                  _loggedIn = false;
                }
                notifyListeners();
              });
            }
          }
      - name: Patch lib/home_page.dart
        path: gtk_flutter/lib/home_page.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_05/lib/home_page.dart
          +++ a/firebase-get-to-know-flutter/step_05/lib/home_page.dart
          @@ -2,8 +2,13 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:firebase_auth/firebase_auth.dart'
          +    hide EmailAuthProvider, PhoneAuthProvider;
           import 'package:flutter/material.dart';
          +import 'package:provider/provider.dart';
           
          +import 'app_state.dart';
          +import 'src/authentication.dart';
           import 'src/widgets.dart';
           
           class HomePage extends StatelessWidget {
          @@ -21,6 +26,13 @@ class HomePage extends StatelessWidget {
                     const SizedBox(height: 8),
                     const IconAndDetail(Icons.calendar_today, 'October 30'),
                     const IconAndDetail(Icons.location_city, 'San Francisco'),
          +          Consumer<ApplicationState>(
          +            builder: (context, appState, _) => AuthFunc(
          +                loggedIn: appState.loggedIn,
          +                signOut: () {
          +                  FirebaseAuth.instance.signOut();
          +                }),
          +          ),
                     const Divider(
                       height: 8,
                       thickness: 1,
      - name: Patch lib/src/authentication.dart
        path: gtk_flutter/lib/src/authentication.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_05/lib/src/authentication.dart
          +++ a/firebase-get-to-know-flutter/step_05/lib/src/authentication.dart
          @@ -30,16 +30,15 @@ class AuthFunc extends StatelessWidget {
                         child: !loggedIn ? const Text('RSVP') : const Text('Logout')),
                   ),
                   Visibility(
          -          visible: loggedIn,
          -          child: Padding(
          -            padding: const EdgeInsets.only(left: 24, bottom: 8),
          -            child: StyledButton(
          -                onPressed: () {
          -                  context.push('/profile');
          -                },
          -                child: const Text('Profile')),
          -          ),
          -        )
          +            visible: loggedIn,
          +            child: Padding(
          +              padding: const EdgeInsets.only(left: 24, bottom: 8),
          +              child: StyledButton(
          +                  onPressed: () {
          +                    context.push('/profile');
          +                  },
          +                  child: const Text('Profile')),
          +            ))
                 ],
               );
             }
      - name: Copy step_05
        copydir:
          from: gtk_flutter
          to: step_05
  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Patch lib/app_state.dart
        path: gtk_flutter/lib/app_state.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_06/lib/app_state.dart
          +++ a/firebase-get-to-know-flutter/step_06/lib/app_state.dart
          @@ -2,6 +2,7 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:cloud_firestore/cloud_firestore.dart';
           import 'package:firebase_auth/firebase_auth.dart'
               hide EmailAuthProvider, PhoneAuthProvider;
           import 'package:firebase_core/firebase_core.dart';
          @@ -16,6 +17,7 @@ class ApplicationState extends ChangeNotifier {
             }
           
             bool _loggedIn = false;
          +
             bool get loggedIn => _loggedIn;
           
             Future<void> init() async {
          @@ -35,4 +37,19 @@ class ApplicationState extends ChangeNotifier {
                 notifyListeners();
               });
             }
          +
          +  Future<DocumentReference> addMessageToGuestBook(String message) {
          +    if (!_loggedIn) {
          +      throw Exception('Must be logged in');
          +    }
          +
          +    return FirebaseFirestore.instance
          +        .collection('guestbook')
          +        .add(<String, dynamic>{
          +      'text': message,
          +      'timestamp': DateTime.now().millisecondsSinceEpoch,
          +      'name': FirebaseAuth.instance.currentUser!.displayName,
          +      'userId': FirebaseAuth.instance.currentUser!.uid,
          +    });
          +  }
           }
      - name: Add lib/guest_book.dart
        path: gtk_flutter/lib/guest_book.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'dart:async';
          
          import 'package:flutter/material.dart';
          
          import 'src/widgets.dart';
          
          class GuestBook extends StatefulWidget {
            const GuestBook({required this.addMessage, super.key});
          
            final FutureOr<void> Function(String message) addMessage;
          
            @override
            State<GuestBook> createState() => _GuestBookState();
          }
          
          class _GuestBookState extends State<GuestBook> {
            final _formKey = GlobalKey<FormState>(debugLabel: '_GuestBookState');
            final _controller = TextEditingController();
          
            @override
            Widget build(BuildContext context) {
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Form(
                  key: _formKey,
                  child: Row(
                    children: [
                      Expanded(
                        child: TextFormField(
                          controller: _controller,
                          decoration: const InputDecoration(
                            hintText: 'Leave a message',
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Enter your message to continue';
                            }
                            return null;
                          },
                        ),
                      ),
                      const SizedBox(width: 8),
                      StyledButton(
                        onPressed: () async {
                          if (_formKey.currentState!.validate()) {
                            await widget.addMessage(_controller.text);
                            _controller.clear();
                          }
                        },
                        child: const Row(
                          children: [
                            Icon(Icons.send),
                            SizedBox(width: 4),
                            Text('SEND'),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }
          
            @override
            void dispose() {
              _controller.dispose();
              super.dispose();
            }
          }
      - name: Patch lib/home_page.dart
        path: gtk_flutter/lib/home_page.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_06/lib/home_page.dart
          +++ a/firebase-get-to-know-flutter/step_06/lib/home_page.dart
          @@ -8,6 +8,7 @@ import 'package:flutter/material.dart';
           import 'package:provider/provider.dart';
           
           import 'app_state.dart';
          +import 'guest_book.dart';
           import 'src/authentication.dart';
           import 'src/widgets.dart';
           
          @@ -44,6 +45,20 @@ class HomePage extends StatelessWidget {
                     const Paragraph(
                       'Join us for a day full of Firebase Workshops and Pizza!',
                     ),
          +          Consumer<ApplicationState>(
          +            builder: (context, appState, _) => Column(
          +              crossAxisAlignment: CrossAxisAlignment.start,
          +              children: [
          +                if (appState.loggedIn) ...[
          +                  const Header('Discussion'),
          +                  GuestBook(
          +                    addMessage: (message) =>
          +                        appState.addMessageToGuestBook(message),
          +                  ),
          +                ],
          +              ],
          +            ),
          +          ),
                   ],
                 ),
               );
      - name: Copy step_06
        copydir:
          from: gtk_flutter
          to: step_06
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Patch lib/app_state.dart
        path: gtk_flutter/lib/app_state.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_07/lib/app_state.dart
          +++ a/firebase-get-to-know-flutter/step_07/lib/app_state.dart
          @@ -2,6 +2,8 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'dart:async';
          +
           import 'package:cloud_firestore/cloud_firestore.dart';
           import 'package:firebase_auth/firebase_auth.dart'
               hide EmailAuthProvider, PhoneAuthProvider;
          @@ -10,6 +12,7 @@ import 'package:firebase_ui_auth/firebase_ui_auth.dart';
           import 'package:flutter/material.dart';
           
           import 'firebase_options.dart';
          +import 'guest_book_message.dart';
           
           class ApplicationState extends ChangeNotifier {
             ApplicationState() {
          @@ -17,9 +20,12 @@ class ApplicationState extends ChangeNotifier {
             }
           
             bool _loggedIn = false;
          -
             bool get loggedIn => _loggedIn;
           
          +  StreamSubscription<QuerySnapshot>? _guestBookSubscription;
          +  List<GuestBookMessage> _guestBookMessages = [];
          +  List<GuestBookMessage> get guestBookMessages => _guestBookMessages;
          +
             Future<void> init() async {
               await Firebase.initializeApp(
                   options: DefaultFirebaseOptions.currentPlatform);
          @@ -31,8 +37,26 @@ class ApplicationState extends ChangeNotifier {
               FirebaseAuth.instance.userChanges().listen((user) {
                 if (user != null) {
                   _loggedIn = true;
          +        _guestBookSubscription = FirebaseFirestore.instance
          +            .collection('guestbook')
          +            .orderBy('timestamp', descending: true)
          +            .snapshots()
          +            .listen((snapshot) {
          +          _guestBookMessages = [];
          +          for (final document in snapshot.docs) {
          +            _guestBookMessages.add(
          +              GuestBookMessage(
          +                name: document.data()['name'] as String,
          +                message: document.data()['text'] as String,
          +              ),
          +            );
          +          }
          +          notifyListeners();
          +        });
                 } else {
                   _loggedIn = false;
          +        _guestBookMessages = [];
          +        _guestBookSubscription?.cancel();
                 }
                 notifyListeners();
               });
      - name: Create lib/guest_book_message.dart
        path: gtk_flutter/lib/guest_book_message.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          class GuestBookMessage {
            GuestBookMessage({required this.name, required this.message});
          
            final String name;
            final String message;
          }
      - name: Patch lib/guest_book.dart
        path: gtk_flutter/lib/guest_book.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_07/lib/guest_book.dart
          +++ a/firebase-get-to-know-flutter/step_07/lib/guest_book.dart
          @@ -6,12 +6,18 @@ import 'dart:async';
           
           import 'package:flutter/material.dart';
           
          +import 'guest_book_message.dart';
           import 'src/widgets.dart';
           
           class GuestBook extends StatefulWidget {
          -  const GuestBook({required this.addMessage, super.key});
          +  const GuestBook({
          +    super.key,
          +    required this.addMessage,
          +    required this.messages,
          +  });
           
             final FutureOr<void> Function(String message) addMessage;
          +  final List<GuestBookMessage> messages;
           
             @override
             State<GuestBook> createState() => _GuestBookState();
          @@ -23,45 +29,54 @@ class _GuestBookState extends State<GuestBook> {
           
             @override
             Widget build(BuildContext context) {
          -    return Padding(
          -      padding: const EdgeInsets.all(8.0),
          -      child: Form(
          -        key: _formKey,
          -        child: Row(
          -          children: [
          -            Expanded(
          -              child: TextFormField(
          -                controller: _controller,
          -                decoration: const InputDecoration(
          -                  hintText: 'Leave a message',
          +    return Column(
          +      crossAxisAlignment: CrossAxisAlignment.start,
          +      children: [
          +        Padding(
          +          padding: const EdgeInsets.all(8.0),
          +          child: Form(
          +            key: _formKey,
          +            child: Row(
          +              children: [
          +                Expanded(
          +                  child: TextFormField(
          +                    controller: _controller,
          +                    decoration: const InputDecoration(
          +                      hintText: 'Leave a message',
          +                    ),
          +                    validator: (value) {
          +                      if (value == null || value.isEmpty) {
          +                        return 'Enter your message to continue';
          +                      }
          +                      return null;
          +                    },
          +                  ),
                           ),
          -                validator: (value) {
          -                  if (value == null || value.isEmpty) {
          -                    return 'Enter your message to continue';
          -                  }
          -                  return null;
          -                },
          -              ),
          -            ),
          -            const SizedBox(width: 8),
          -            StyledButton(
          -              onPressed: () async {
          -                if (_formKey.currentState!.validate()) {
          -                  await widget.addMessage(_controller.text);
          -                  _controller.clear();
          -                }
          -              },
          -              child: const Row(
          -                children: [
          -                  Icon(Icons.send),
          -                  SizedBox(width: 4),
          -                  Text('SEND'),
          -                ],
          -              ),
          +                const SizedBox(width: 8),
          +                StyledButton(
          +                  onPressed: () async {
          +                    if (_formKey.currentState!.validate()) {
          +                      await widget.addMessage(_controller.text);
          +                      _controller.clear();
          +                    }
          +                  },
          +                  child: const Row(
          +                    children: [
          +                      Icon(Icons.send),
          +                      SizedBox(width: 4),
          +                      Text('SEND'),
          +                    ],
          +                  ),
          +                ),
          +              ],
                       ),
          -          ],
          +          ),
                   ),
          -      ),
          +        const SizedBox(height: 8),
          +        for (var message in widget.messages)
          +          Paragraph('${message.name}: ${message.message}'),
          +        const SizedBox(height: 8),
          +      ],
               );
             }
           }
      - name: Patch lib/home_page.dart
        path: gtk_flutter/lib/home_page.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_07/lib/home_page.dart
          +++ a/firebase-get-to-know-flutter/step_07/lib/home_page.dart
          @@ -54,6 +54,7 @@ class HomePage extends StatelessWidget {
                             GuestBook(
                               addMessage: (message) =>
                                   appState.addMessageToGuestBook(message),
          +                    messages: appState.guestBookMessages,
                             ),
                           ],
                         ],
      - name: Copy step_07
        copydir:
          from: gtk_flutter
          to: step_07
  - name: step_09
    steps:
      - name: Remove generated code
        rmdir: step_09
      - name: Patch lib/src/authentication.dart
        path: gtk_flutter/lib/src/authentication.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_09/lib/src/authentication.dart
          +++ a/firebase-get-to-know-flutter/step_09/lib/src/authentication.dart
          @@ -12,10 +12,12 @@ class AuthFunc extends StatelessWidget {
               super.key,
               required this.loggedIn,
               required this.signOut,
          +    this.enableFreeSwag = false,
             });
           
             final bool loggedIn;
             final void Function() signOut;
          +  final bool enableFreeSwag;
           
             @override
             Widget build(BuildContext context) {
          @@ -38,7 +40,17 @@ class AuthFunc extends StatelessWidget {
                               context.push('/profile');
                             },
                             child: const Text('Profile')),
          -            ))
          +            )),
          +        Visibility(
          +            visible: enableFreeSwag,
          +            child: Padding(
          +              padding: const EdgeInsets.only(left: 24, bottom: 8),
          +              child: StyledButton(
          +                  onPressed: () {
          +                    throw Exception('free swag unimplemented');
          +                  },
          +                  child: const Text('Free swag!')),
          +            )),
                 ],
               );
             }
      - name: Patch lib/app_state.dart
        path: gtk_flutter/lib/app_state.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_09/lib/app_state.dart
          +++ a/firebase-get-to-know-flutter/step_09/lib/app_state.dart
          @@ -14,18 +14,69 @@ import 'package:flutter/material.dart';
           import 'firebase_options.dart';
           import 'guest_book_message.dart';
           
          +enum Attending { yes, no, unknown }
          +
           class ApplicationState extends ChangeNotifier {
             ApplicationState() {
               init();
             }
           
             bool _loggedIn = false;
          +
             bool get loggedIn => _loggedIn;
           
          +  bool _emailVerified = false;
          +
          +  bool get emailVerified => _emailVerified;
          +
             StreamSubscription<QuerySnapshot>? _guestBookSubscription;
             List<GuestBookMessage> _guestBookMessages = [];
          +
             List<GuestBookMessage> get guestBookMessages => _guestBookMessages;
           
          +  int _attendees = 0;
          +
          +  int get attendees => _attendees;
          +
          +  static Map<String, dynamic> defaultValues = <String, dynamic>{
          +    'event_date': 'October 18, 2022',
          +    'enable_free_swag': false,
          +    'call_to_action': 'Join us for a day full of Firebase Workshops and Pizza!',
          +  };
          +
          +  // ignoring lints on these fields since we are modifying them in a different
          +  // part of the codelab
          +  // ignore: prefer_final_fields
          +  bool _enableFreeSwag = defaultValues['enable_free_swag'] as bool;
          +
          +  bool get enableFreeSwag => _enableFreeSwag;
          +
          +  // ignore: prefer_final_fields
          +  String _eventDate = defaultValues['event_date'] as String;
          +
          +  String get eventDate => _eventDate;
          +
          +  // ignore: prefer_final_fields
          +  String _callToAction = defaultValues['call_to_action'] as String;
          +
          +  String get callToAction => _callToAction;
          +
          +  Attending _attending = Attending.unknown;
          +  StreamSubscription<DocumentSnapshot>? _attendingSubscription;
          +
          +  Attending get attending => _attending;
          +
          +  set attending(Attending attending) {
          +    final userDoc = FirebaseFirestore.instance
          +        .collection('attendees')
          +        .doc(FirebaseAuth.instance.currentUser!.uid);
          +    if (attending == Attending.yes) {
          +      userDoc.set(<String, dynamic>{'attending': true});
          +    } else {
          +      userDoc.set(<String, dynamic>{'attending': false});
          +    }
          +  }
          +
             Future<void> init() async {
               await Firebase.initializeApp(
                   options: DefaultFirebaseOptions.currentPlatform);
          @@ -34,9 +85,19 @@ class ApplicationState extends ChangeNotifier {
                 EmailAuthProvider(),
               ]);
           
          +    FirebaseFirestore.instance
          +        .collection('attendees')
          +        .where('attending', isEqualTo: true)
          +        .snapshots()
          +        .listen((snapshot) {
          +      _attendees = snapshot.docs.length;
          +      notifyListeners();
          +    });
          +
               FirebaseAuth.instance.userChanges().listen((user) {
                 if (user != null) {
                   _loggedIn = true;
          +        _emailVerified = user.emailVerified;
                   _guestBookSubscription = FirebaseFirestore.instance
                       .collection('guestbook')
                       .orderBy('timestamp', descending: true)
          @@ -53,15 +114,43 @@ class ApplicationState extends ChangeNotifier {
                     }
                     notifyListeners();
                   });
          +        _attendingSubscription = FirebaseFirestore.instance
          +            .collection('attendees')
          +            .doc(user.uid)
          +            .snapshots()
          +            .listen((snapshot) {
          +          if (snapshot.data() != null) {
          +            if (snapshot.data()!['attending'] as bool) {
          +              _attending = Attending.yes;
          +            } else {
          +              _attending = Attending.no;
          +            }
          +          } else {
          +            _attending = Attending.unknown;
          +          }
          +          notifyListeners();
          +        });
                 } else {
                   _loggedIn = false;
          +        _emailVerified = false;
                   _guestBookMessages = [];
                   _guestBookSubscription?.cancel();
          +        _attendingSubscription?.cancel();
                 }
                 notifyListeners();
               });
             }
           
          +  Future<void> refreshLoggedInUser() async {
          +    final currentUser = FirebaseAuth.instance.currentUser;
          +
          +    if (currentUser == null) {
          +      return;
          +    }
          +
          +    await currentUser.reload();
          +  }
          +
             Future<DocumentReference> addMessageToGuestBook(String message) {
               if (!_loggedIn) {
                 throw Exception('Must be logged in');
      - name: Patch lib/home_page.dart
        path: gtk_flutter/lib/home_page.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_09/lib/home_page.dart
          +++ a/firebase-get-to-know-flutter/step_09/lib/home_page.dart
          @@ -11,6 +11,7 @@ import 'app_state.dart';
           import 'guest_book.dart';
           import 'src/authentication.dart';
           import 'src/widgets.dart';
          +import 'yes_no_selection.dart';
           
           class HomePage extends StatelessWidget {
             const HomePage({super.key});
          @@ -25,14 +26,19 @@ class HomePage extends StatelessWidget {
                   children: <Widget>[
                     Image.asset('assets/codelab.png'),
                     const SizedBox(height: 8),
          -          const IconAndDetail(Icons.calendar_today, 'October 30'),
          +          Consumer<ApplicationState>(
          +            builder: (context, appState, _) =>
          +                IconAndDetail(Icons.calendar_today, appState.eventDate),
          +          ),
                     const IconAndDetail(Icons.location_city, 'San Francisco'),
                     Consumer<ApplicationState>(
                       builder: (context, appState, _) => AuthFunc(
          -                loggedIn: appState.loggedIn,
          -                signOut: () {
          -                  FirebaseAuth.instance.signOut();
          -                }),
          +              loggedIn: appState.loggedIn,
          +              signOut: () {
          +                FirebaseAuth.instance.signOut();
          +              },
          +              enableFreeSwag: appState.enableFreeSwag,
          +            ),
                     ),
                     const Divider(
                       height: 8,
          @@ -42,14 +48,25 @@ class HomePage extends StatelessWidget {
                       color: Colors.grey,
                     ),
                     const Header("What we'll be doing"),
          -          const Paragraph(
          -            'Join us for a day full of Firebase Workshops and Pizza!',
          +          Consumer<ApplicationState>(
          +            builder: (context, appState, _) => Paragraph(
          +              appState.callToAction,
          +            ),
                     ),
                     Consumer<ApplicationState>(
                       builder: (context, appState, _) => Column(
                         crossAxisAlignment: CrossAxisAlignment.start,
                         children: [
          +                switch (appState.attendees) {
          +                  1 => const Paragraph('1 person going'),
          +                  >= 2 => Paragraph('${appState.attendees} people going'),
          +                  _ => const Paragraph('No one going'),
          +                },
                           if (appState.loggedIn) ...[
          +                  YesNoSelection(
          +                    state: appState.attending,
          +                    onSelection: (attending) => appState.attending = attending,
          +                  ),
                             const Header('Discussion'),
                             GuestBook(
                               addMessage: (message) =>
      - name: Patch lib/main.dart
        path: gtk_flutter/lib/main.dart
        patch-u: |
          --- b/firebase-get-to-know-flutter/step_09/lib/main.dart
          +++ a/firebase-get-to-know-flutter/step_09/lib/main.dart
          @@ -80,13 +80,28 @@ final _router = GoRouter(
                   GoRoute(
                     path: 'profile',
                     builder: (context, state) {
          -            return ProfileScreen(
          -              providers: const [],
          -              actions: [
          -                SignedOutAction((context) {
          -                  context.pushReplacement('/');
          -                }),
          -              ],
          +            return Consumer<ApplicationState>(
          +              builder: (context, appState, _) => ProfileScreen(
          +                key: ValueKey(appState.emailVerified),
          +                providers: const [],
          +                actions: [
          +                  SignedOutAction(
          +                    ((context) {
          +                      context.pushReplacement('/');
          +                    }),
          +                  ),
          +                ],
          +                children: [
          +                  Visibility(
          +                      visible: !appState.emailVerified,
          +                      child: OutlinedButton(
          +                        child: const Text('Recheck Verification State'),
          +                        onPressed: () {
          +                          appState.refreshLoggedInUser();
          +                        },
          +                      ))
          +                ],
          +              ),
                       );
                     },
                   ),
      - name: Add lib/yes_no_selection.dart
        path: gtk_flutter/lib/yes_no_selection.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'package:flutter/material.dart';
          
          import 'app_state.dart';
          import 'src/widgets.dart';
          
          class YesNoSelection extends StatelessWidget {
            const YesNoSelection({
              super.key,
              required this.state,
              required this.onSelection,
            });
          
            final Attending state;
            final void Function(Attending selection) onSelection;
          
            @override
            Widget build(BuildContext context) {
              switch (state) {
                case Attending.yes:
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      children: [
                        FilledButton(
                          onPressed: () => onSelection(Attending.yes),
                          child: const Text('YES'),
                        ),
                        const SizedBox(width: 8),
                        TextButton(
                          onPressed: () => onSelection(Attending.no),
                          child: const Text('NO'),
                        ),
                      ],
                    ),
                  );
                case Attending.no:
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      children: [
                        TextButton(
                          onPressed: () => onSelection(Attending.yes),
                          child: const Text('YES'),
                        ),
                        const SizedBox(width: 8),
                        FilledButton(
                          onPressed: () => onSelection(Attending.no),
                          child: const Text('NO'),
                        ),
                      ],
                    ),
                  );
                default:
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      children: [
                        StyledButton(
                          onPressed: () => onSelection(Attending.yes),
                          child: const Text('YES'),
                        ),
                        const SizedBox(width: 8),
                        StyledButton(
                          onPressed: () => onSelection(Attending.no),
                          child: const Text('NO'),
                        ),
                      ],
                    ),
                  );
              }
            }
          }
      - name: Flutter clean
        path: gtk_flutter
        flutter: clean
      - name: Build for Android
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build apk
      - name: Build for macOS
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build macos --debug
      - name: Build for iOS
        platforms: [ macos ]
        path: gtk_flutter
        flutter: build ios --debug --simulator
      - name: Copy step_09
        copydir:
          from: gtk_flutter
          to: step_09
  - name: Cleanup
    rmdir: gtk_flutter
