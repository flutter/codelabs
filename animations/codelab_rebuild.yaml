name: Add animation effects to your Flutter app
steps:
  - name: step_01
    steps:
      - name: Create project
        flutter: create --empty quiz
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: quiz/ios/Runner.xcodeproj/project.pbxproj
      - name: Remove README
        rm: quiz/README.md
      - name: Replace pubspec.yaml
        path: quiz/pubspec.yaml
        replace-contents: |
          name: quiz
          description: A quiz app for demonstrating animation effects in Flutter
          publish_to: "none"
          version: 1.0.0

          environment:
            sdk: ^3.7.0-0

          dependencies:
            animations: ^2.0.0
            flutter:
              sdk: flutter

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^4.0.0


          flutter:
            uses-material-design: true
      - name: Replace analysis_options.yaml
        path: quiz/analysis_options.yaml
        replace-contents: |
          include: package:flutter_lints/flutter.yaml

          analyzer:
            errors:
              unused_field: ignore

          linter:
            rules:
              annotate_overrides: false
              prefer_const_constructors: false
              prefer_const_constructors_in_immutables: false
              prefer_const_declarations: false
              prefer_const_literals_to_create_immutables: false
      - name: Create the HomeScreen
        path: quiz/lib/home_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'question_screen.dart';

          class HomeScreen extends StatelessWidget {
            const HomeScreen({super.key});

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                body: Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text('✏️', style: Theme.of(context).textTheme.displayLarge),
                      Text(
                        'Flutter Quiz',
                        style: Theme.of(context).textTheme.displayLarge!.copyWith(
                          fontWeight: FontWeight.w700,
                          color: Theme.of(context).colorScheme.onPrimaryFixedVariant,
                        ),
                      ),
                      ElevatedButton(
                        onPressed: () {
                          // Show the question screen to start the game
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (BuildContext context) {
                                return QuestionScreen();
                              },
                            ),
                          );
                        },
                        child: Text('New Game'),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      - name: Show the HomeScreen in MaterialApp
        path: quiz/lib/main.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          import 'home_screen.dart';
          
          void main() {
            runApp(MainApp());
          }
          
          class MainApp extends StatelessWidget {
            const MainApp({super.key});
          
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
                  useMaterial3: true,
                ),
                home: HomeScreen(),
              );
            }
          }
      - name: Create the Model
        path: quiz/lib/model.dart
        replace-contents: |
          import 'dart:math' as math;

          class Question {
            final String question;
            final List<String> possibleAnswers;
            final int correctAnswer;
            Question(this.question, this.possibleAnswers, this.correctAnswer);
          }

          class QuestionBank {
            final List<Question> _questions = _createQuestions();

            bool get hasNextQuestion => _questions.isNotEmpty;
            int get remainingQuestions => _questions.length;

            Question? getRandomQuestion() {
              if (_questions.isEmpty) {
                return null;
              }

              var i = math.Random().nextInt(_questions.length);
              var question = _questions[i];

              _questions.removeAt(i);
              return question;
            }
          }

          List<Question> _createQuestions() {
            return [
              Question(
                'What class used to create custom explicit animations in Flutter?',
                ['AnimationController', 'AnimatedWidget', 'AnimatedBuilder', 'Tween'],
                0,
              ),
              Question(
                'Which widget is used to rebuild its child whenever an animation changes?',
                [
                  'AnimatedContainer',
                  'AnimatedBuilder',
                  'AnimatedSwitcher',
                  'AnimatedOpacity',
                ],
                1,
              ),
              Question(
                'What class is used to define the start and end values for an animation?',
                ['Tween', 'Curve', 'AnimationController', 'AnimatedWidget'],
                0,
              ),
            ];
          }
      - name: Create the ViewModel
        path: quiz/lib/view_model.dart
        replace-contents: |
          import 'package:flutter/cupertino.dart';
          import 'model.dart';
          
          class QuizViewModel extends ChangeNotifier {
            final QuestionBank _questionBank = QuestionBank();
            final VoidCallback onGameOver;
            late final int totalQuestions;
            Question? currentQuestion;
            int answeredQuestionCount = 0;
            int score = 0;
            bool didAnswerQuestion = false;
            bool get hasNextQuestion => answeredQuestionCount < totalQuestions;
          
            QuizViewModel({required this.onGameOver}) {
              totalQuestions = _questionBank.remainingQuestions;
              getNextQuestion();
            }
          
            void getNextQuestion() {
              if (_questionBank.hasNextQuestion) {
                currentQuestion = _questionBank.getRandomQuestion();
                answeredQuestionCount++;
              }
          
              didAnswerQuestion = false;
          
              notifyListeners();
            }
          
            void checkAnswer(int selectedIndex) {
              if (!didAnswerQuestion && currentQuestion?.correctAnswer == selectedIndex) {
                score++;
              }
          
              didAnswerQuestion = true;
          
              if (!_questionBank.hasNextQuestion) {
                onGameOver();
              }
          
              notifyListeners();
            }
          }
      - name: Create the QuestionScreen
        path: quiz/lib/question_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'view_model.dart';

          class QuestionScreen extends StatefulWidget {
            const QuestionScreen({super.key});

            @override
            State<QuestionScreen> createState() => _QuestionScreenState();
          }

          class _QuestionScreenState extends State<QuestionScreen> {
            late final QuizViewModel viewModel = QuizViewModel(
              onGameOver: _handleGameOver,
            );

            @override
            Widget build(BuildContext context) {
              return ListenableBuilder(
                listenable: viewModel,
                builder: (context, child) {
                  return Scaffold(
                    appBar: AppBar(
                      actions: [
                        TextButton(
                          onPressed:
                              viewModel.hasNextQuestion && viewModel.didAnswerQuestion
                                  ? () {
                                    viewModel.getNextQuestion();
                                  }
                                  : null,
                          child: const Text('Next'),
                        ),
                      ],
                    ),
                    body: Center(
                      child: Column(
                        children: [
                          QuestionCard(question: viewModel.currentQuestion?.question),
                          Spacer(),
                          AnswerCards(
                            onTapped: (index) {
                              viewModel.checkAnswer(index);
                            },
                            answers: viewModel.currentQuestion?.possibleAnswers ?? [],
                            correctAnswer:
                                viewModel.didAnswerQuestion
                                    ? viewModel.currentQuestion?.correctAnswer
                                    : null,
                          ),
                          StatusBar(viewModel: viewModel),
                        ],
                      ),
                    ),
                  );
                },
              );
            }

            void _handleGameOver() {
              showDialog(
                barrierDismissible: false,
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: Text('Game Over!'),
                    content: Text('Score: ${viewModel.score}'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.popUntil(context, (route) => route.isFirst);
                        },
                        child: Text('OK'),
                      ),
                    ],
                  );
                },
              );
            }
          }

          class QuestionCard extends StatelessWidget {
            final String? question;

            const QuestionCard({required this.question, super.key});

            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Text(
                    question ?? "",
                    style: Theme.of(context).textTheme.displaySmall,
                  ),
                ),
              );
            }
          }

          class AnswerCards extends StatelessWidget {
            final List<String> answers;
            final ValueChanged<int> onTapped;
            final int? correctAnswer;

            const AnswerCards({
              required this.answers,
              required this.onTapped,
              required this.correctAnswer,
              super.key,
            });

            @override
            Widget build(BuildContext context) {
              return GridView.count(
                shrinkWrap: true,
                crossAxisCount: 2,
                childAspectRatio: 5 / 2,
                children: List.generate(answers.length, (index) {
                  var color = Theme.of(context).colorScheme.primaryContainer;
                  if (correctAnswer == index) {
                    color = Theme.of(context).colorScheme.tertiaryContainer;
                  }
                  return Card.filled(
                    key: ValueKey(answers[index]),
                    color: color,
                    elevation: 2,
                    margin: EdgeInsets.all(8),
                    clipBehavior: Clip.hardEdge,
                    child: InkWell(
                      onTap: () => onTapped(index),
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Center(
                          child: Text(
                            answers.length > index ? answers[index] : "",
                            style: Theme.of(context).textTheme.titleMedium,
                            overflow: TextOverflow.clip,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
              );
            }
          }

          class StatusBar extends StatelessWidget {
            final QuizViewModel viewModel;

            const StatusBar({required this.viewModel, super.key});

            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Text(
                        'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      Text(
                        'Score: ${viewModel.score}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      - name: Fetch dependencies
        path: quiz
        dart: pub get
      - name: Run Dart Analzyer
        path: quiz
        dart: analyze --fatal-infos
      - name: Remove step_01
        rmdir: step_01
      - name: Copy step_01
        copydir:
          from: quiz
          to: step_01
  - name: step_02
    steps:
      - name: Create scoreboard.dart
        path: quiz/lib/scoreboard.dart
        replace-contents: |
          import 'package:flutter/material.dart';

          class Scoreboard extends StatelessWidget {
            final int score;
            final int totalQuestions;

            const Scoreboard({
              super.key,
              required this.score,
              required this.totalQuestions,
            });

            @override
            Widget build(BuildContext context) {
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    for (var i = 0; i < totalQuestions; i++)
                      Icon(
                        Icons.star,
                        size: 50,
                        color:
                            score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
                      ),
                  ],
                ),
              );
            }
          }
      - name: Remove step_02_a
        rmdir: step_02_a
      - name: Copy step_02_a
        copydir:
          from: quiz
          to: step_02_a
      - name: Use Scoreboard widget
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_02_b/lib/question_screen.dart
          +++ a/animations/step_02_b/lib/question_screen.dart
          @@ -1,4 +1,5 @@
           import 'package:flutter/material.dart';
          +import 'scoreboard.dart';
           import 'view_model.dart';
           
           class QuestionScreen extends StatefulWidget {
          @@ -160,13 +161,9 @@ class StatusBar extends StatelessWidget {
                   child: Row(
                     mainAxisAlignment: MainAxisAlignment.spaceAround,
                     children: [
          -            Text(
          -              'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
          -              style: Theme.of(context).textTheme.titleLarge,
          -            ),
          -            Text(
          -              'Score: ${viewModel.score}',
          -              style: Theme.of(context).textTheme.titleLarge,
          +            Scoreboard(
          +              score: viewModel.score,
          +              totalQuestions: viewModel.totalQuestions,
                       ),
                     ],
                   ),
      - name: Remove step_02_b
        rmdir: step_02_b
      - name: Copy step_02_b
        copydir:
          from: quiz
          to: step_02_b
      - name: Use an ImplicitlyAnimatedWidget
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- b/animations/step_02_c/lib/scoreboard.dart
          +++ a/animations/step_02_c/lib/scoreboard.dart
          @@ -18,14 +18,31 @@ class Scoreboard extends StatelessWidget {
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                     for (var i = 0; i < totalQuestions; i++)
          -            Icon(
          -              Icons.star,
          -              size: 50,
          -              color:
          -                  score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
          -            ),
          +            AnimatedStar(isActive: score > i),
                   ],
                 ),
               );
             }
           }
          +
          +class AnimatedStar extends StatelessWidget {
          +  final bool isActive;
          +  final Duration _duration = const Duration(milliseconds: 1000);
          +  final Color _deactivatedColor = Colors.grey.shade400;
          +  final Color _activatedColor = Colors.yellow.shade700;
          +
          +  AnimatedStar({super.key, required this.isActive});
          +
          +  @override
          +  Widget build(BuildContext context) {
          +    return AnimatedScale(
          +      scale: isActive ? 1.0 : 0.5,
          +      duration: _duration,
          +      child: Icon(
          +        Icons.star,
          +        size: 50,
          +        color: isActive ? _activatedColor : _deactivatedColor,
          +      ),
          +    );
          +  }
          +}
      - name: Remove step_02_c
        rmdir: step_02_c
      - name: Copy step_02_c
        copydir:
          from: quiz
          to: step_02_c
      - name: Use a TweenAnimationBuilder to change the color
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- b/animations/step_02_d/lib/scoreboard.dart
          +++ a/animations/step_02_d/lib/scoreboard.dart
          @@ -38,10 +38,15 @@ class AnimatedStar extends StatelessWidget {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
                 duration: _duration,
          -      child: Icon(
          -        Icons.star,
          -        size: 50,
          -        color: isActive ? _activatedColor : _deactivatedColor,
          +      child: TweenAnimationBuilder(
          +        duration: _duration,
          +        tween: ColorTween(
          +          begin: _deactivatedColor,
          +          end: isActive ? _activatedColor : _deactivatedColor,
          +        ),
          +        builder: (context, value, child) {
          +          return Icon(Icons.star, size: 50, color: value);
          +        },
                 ),
               );
             }
      - name: Remove step_02_d
        rmdir: step_02_d
      - name: Copy step_02_d
        copydir:
          from: quiz
          to: step_02_d     
      - name: Use a Curve
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- b/animations/step_02_e/lib/scoreboard.dart
          +++ a/animations/step_02_e/lib/scoreboard.dart
          @@ -30,6 +30,7 @@ class AnimatedStar extends StatelessWidget {
             final Duration _duration = const Duration(milliseconds: 1000);
             final Color _deactivatedColor = Colors.grey.shade400;
             final Color _activatedColor = Colors.yellow.shade700;
          +  final Curve _curve = Curves.elasticOut;
           
             AnimatedStar({super.key, required this.isActive});
           
          @@ -37,8 +38,10 @@ class AnimatedStar extends StatelessWidget {
             Widget build(BuildContext context) {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
          +      curve: _curve,
                 duration: _duration,
                 child: TweenAnimationBuilder(
          +        curve: _curve,
                   duration: _duration,
                   tween: ColorTween(
                     begin: _deactivatedColor,
      - name: Remove step_02_e
        rmdir: step_02_e
      - name: Copy step_02_e
        copydir:
          from: quiz
          to: step_02_e
      # TODO(DomesticMouse): Delete step_02 once the codelab is published with individual steps
      - name: Remove step_02
        rmdir: step_02
      - name: Copy step_02
        copydir:
          from: quiz
          to: step_02
  - name: step_03
    steps:
      - name: Use AnimatedSwitcher
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_03_a/lib/question_screen.dart
          +++ a/animations/step_03_a/lib/question_screen.dart
          @@ -86,13 +86,17 @@ class QuestionCard extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return Card(
          -      elevation: 4,
          -      child: Padding(
          -        padding: EdgeInsets.all(16.0),
          -        child: Text(
          -          question ?? "",
          -          style: Theme.of(context).textTheme.displaySmall,
          +    return AnimatedSwitcher(
          +      duration: const Duration(milliseconds: 300),
          +      child: Card(
          +        key: ValueKey(question),
          +        elevation: 4,
          +        child: Padding(
          +          padding: const EdgeInsets.all(16.0),
          +          child: Text(
          +            question ?? "",
          +            style: Theme.of(context).textTheme.displaySmall,
          +          ),
                   ),
                 ),
               );
      - name: Remove step_03_a
        rmdir: step_03_a
      - name: Copy step_03_a
        copydir:
          from: quiz
          to: step_03_a
      - name: Use a custom transitionBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_03_b/lib/question_screen.dart
          +++ a/animations/step_03_b/lib/question_screen.dart
          @@ -87,6 +87,16 @@ class QuestionCard extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return AnimatedSwitcher(
          +      transitionBuilder: (Widget child, Animation<double> animation) {
          +        final curveAnimation = CurveTween(
          +          curve: Curves.easeInCubic,
          +        ).animate(animation);
          +        final offsetAnimation = Tween<Offset>(
          +          begin: Offset(-0.1, 0.0),
          +          end: Offset.zero,
          +        ).animate(curveAnimation);
          +        return SlideTransition(position: offsetAnimation, child: child);
          +      },
                 duration: const Duration(milliseconds: 300),
                 child: Card(
                   key: ValueKey(question),
      - name: Remove step_03_b
        rmdir: step_03_b
      - name: Copy step_03_b
        copydir:
          from: quiz
          to: step_03_b
      - name: Apply a fade effect to the transitionBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_03_c/lib/question_screen.dart
          +++ a/animations/step_03_c/lib/question_screen.dart
          @@ -95,7 +95,11 @@ class QuestionCard extends StatelessWidget {
                     begin: Offset(-0.1, 0.0),
                     end: Offset.zero,
                   ).animate(curveAnimation);
          -        return SlideTransition(position: offsetAnimation, child: child);
          +        final fadeInAnimation = curveAnimation;
          +        return FadeTransition(
          +          opacity: fadeInAnimation,
          +          child: SlideTransition(position: offsetAnimation, child: child),
          +        );
                 },
                 duration: const Duration(milliseconds: 300),
                 child: Card(
      - name: Remove step_03_c
        rmdir: step_03_c
      - name: Copy step_03_c
        copydir:
          from: quiz
          to: step_03_c     
      - name: Customize the layoutBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_03_d/lib/question_screen.dart
          +++ a/animations/step_03_d/lib/question_screen.dart
          @@ -87,6 +87,15 @@ class QuestionCard extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return AnimatedSwitcher(
          +      layoutBuilder: (Widget? currentChild, List<Widget> previousChildren) {
          +        return Stack(
          +          alignment: Alignment.topCenter,
          +          children: <Widget>[
          +            ...previousChildren,
          +            if (currentChild != null) currentChild,
          +          ],
          +        );
          +      },
                 transitionBuilder: (Widget child, Animation<double> animation) {
                   final curveAnimation = CurveTween(
                     curve: Curves.easeInCubic,
      - name: Remove step_03_d
        rmdir: step_03_d
      - name: Copy step_03_d
        copydir:
          from: quiz
          to: step_03_d
      # TODO(DomesticMouse): Delete step_03 once the codelab is published with individual steps
      - name: Remove step_03
        rmdir: step_03
      - name: Copy step_03
        copydir:
          from: quiz
          to: step_03
  - name: step_04
    steps:
      - name: Add flip_effect.dart
        path: quiz/lib/flip_effect.dart
        replace-contents: |
          import 'package:flutter/widgets.dart';
          import 'dart:math' as math;

          class CardFlipEffect extends StatefulWidget {
            final Widget child;
            final Duration duration;

            const CardFlipEffect({
              super.key,
              required this.child,
              required this.duration,
            });

            @override
            State<CardFlipEffect> createState() => _CardFlipEffectState();
          }

          class _CardFlipEffectState extends State<CardFlipEffect>
              with SingleTickerProviderStateMixin {
            late final AnimationController _animationController;
            Widget? _previousChild;

            @override
            void initState() {
              super.initState();

              _animationController = AnimationController(
                vsync: this,
                duration: widget.duration,
              );

              _animationController.addListener(() {
                if (_animationController.value == 1) {
                  _animationController.reset();
                }
              });
            }

            @override
            void didUpdateWidget(covariant CardFlipEffect oldWidget) {
              super.didUpdateWidget(oldWidget);

              if (widget.child.key != oldWidget.child.key) {
                _handleChildChanged(widget.child, oldWidget.child);
              }
            }

            void _handleChildChanged(Widget newChild, Widget previousChild) {
              _previousChild = previousChild;
              _animationController.forward();
            }

            @override
            Widget build(BuildContext context) {
              return AnimatedBuilder(
                animation: _animationController,
                builder: (context, child) {
                  return Transform(
                    alignment: Alignment.center,
                    transform:
                        Matrix4.identity()..rotateX(_animationController.value * math.pi),
                    child:
                        _animationController.isAnimating
                            ? _animationController.value < 0.5
                                ? _previousChild
                                : Transform.flip(flipY: true, child: widget.child)
                            : widget.child,
                  );
                },
                child: widget.child,
              );
            }
          }
      - name: Use CardFlipEffect
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_04_a/lib/question_screen.dart
          +++ a/animations/step_04_a/lib/question_screen.dart
          @@ -1,4 +1,5 @@
           import 'package:flutter/material.dart';
          +import 'flip_effect.dart';
           import 'scoreboard.dart';
           import 'view_model.dart';
           
          @@ -149,21 +150,25 @@ class AnswerCards extends StatelessWidget {
                   if (correctAnswer == index) {
                     color = Theme.of(context).colorScheme.tertiaryContainer;
                   }
          -        return Card.filled(
          -          key: ValueKey(answers[index]),
          -          color: color,
          -          elevation: 2,
          -          margin: EdgeInsets.all(8),
          -          clipBehavior: Clip.hardEdge,
          -          child: InkWell(
          -            onTap: () => onTapped(index),
          -            child: Padding(
          -              padding: EdgeInsets.all(16.0),
          -              child: Center(
          -                child: Text(
          -                  answers.length > index ? answers[index] : "",
          -                  style: Theme.of(context).textTheme.titleMedium,
          -                  overflow: TextOverflow.clip,
          +
          +        return CardFlipEffect(
          +          duration: const Duration(milliseconds: 300),
          +          child: Card.filled(
          +            key: ValueKey(answers[index]),
          +            color: color,
          +            elevation: 2,
          +            margin: const EdgeInsets.all(8),
          +            clipBehavior: Clip.hardEdge,
          +            child: InkWell(
          +              onTap: () => onTapped(index),
          +              child: Padding(
          +                padding: const EdgeInsets.all(16.0),
          +                child: Center(
          +                  child: Text(
          +                    answers.length > index ? answers[index] : "",
          +                    style: Theme.of(context).textTheme.titleMedium,
          +                    overflow: TextOverflow.clip,
          +                  ),
                           ),
                         ),
                       ),
      - name: Remove step_04_a
        rmdir: step_04_a
      - name: Copy step_04_a
        copydir:
          from: quiz
          to: step_04_a
      - name: Add delay using TweenSequence
        path: quiz/lib/flip_effect.dart
        patch-u: |
          --- b/animations/step_04_b/lib/flip_effect.dart
          +++ a/animations/step_04_b/lib/flip_effect.dart
          @@ -4,11 +4,13 @@ import 'dart:math' as math;
           class CardFlipEffect extends StatefulWidget {
             final Widget child;
             final Duration duration;
          +  final double delayAmount;
           
             const CardFlipEffect({
               super.key,
               required this.child,
               required this.duration,
          +    required this.delayAmount,
             });
           
             @override
      - name: Add delay to question screen
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- b/animations/step_04_b/lib/question_screen.dart
          +++ a/animations/step_04_b/lib/question_screen.dart
          @@ -152,6 +152,7 @@ class AnswerCards extends StatelessWidget {
                   }
           
                   return CardFlipEffect(
          +          delayAmount: index.toDouble() / 2,
                     duration: const Duration(milliseconds: 300),
                     child: Card.filled(
                       key: ValueKey(answers[index]),
      - name: Remove step_04_b
        rmdir: step_04_b
      - name: Copy step_04_b
        copydir:
          from: quiz
          to: step_04_b
      - name: Add delay using TweenSequence, part 2
        path: quiz/lib/flip_effect.dart
        patch-u: |
          --- b/animations/step_04_c/lib/flip_effect.dart
          +++ a/animations/step_04_c/lib/flip_effect.dart
          @@ -21,6 +21,7 @@ class _CardFlipEffectState extends State<CardFlipEffect>
               with SingleTickerProviderStateMixin {
             late final AnimationController _animationController;
             Widget? _previousChild;
          +  late final Animation<double> _animationWithDelay;
           
             @override
             void initState() {
          @@ -28,7 +29,7 @@ class _CardFlipEffectState extends State<CardFlipEffect>
           
               _animationController = AnimationController(
                 vsync: this,
          -      duration: widget.duration,
          +      duration: widget.duration * (widget.delayAmount + 1),
               );
           
               _animationController.addListener(() {
          @@ -36,6 +37,15 @@ class _CardFlipEffectState extends State<CardFlipEffect>
                   _animationController.reset();
                 }
               });
          +
          +    _animationWithDelay = TweenSequence<double>([
          +      if (widget.delayAmount > 0)
          +        TweenSequenceItem(
          +          tween: ConstantTween<double>(0.0),
          +          weight: widget.delayAmount,
          +        ),
          +      TweenSequenceItem(tween: Tween(begin: 0.0, end: 1.0), weight: 1.0),
          +    ]).animate(_animationController);
             }
           
             @override
      - name: Remove step_04_c
        rmdir: step_04_c
      - name: Copy step_04_c
        copydir:
          from: quiz
          to: step_04_c
      - name: Add delay using TweenSequence, part 3
        path: quiz/lib/flip_effect.dart
        patch-u: |
          --- b/animations/step_04_d/lib/flip_effect.dart
          +++ a/animations/step_04_d/lib/flip_effect.dart
          @@ -65,15 +65,15 @@ class _CardFlipEffectState extends State<CardFlipEffect>
             @override
             Widget build(BuildContext context) {
               return AnimatedBuilder(
          -      animation: _animationController,
          +      animation: _animationWithDelay,
                 builder: (context, child) {
                   return Transform(
                     alignment: Alignment.center,
                     transform:
          -              Matrix4.identity()..rotateX(_animationController.value * math.pi),
          +              Matrix4.identity()..rotateX(_animationWithDelay.value * math.pi),
                     child:
                         _animationController.isAnimating
          -                  ? _animationController.value < 0.5
          +                  ? _animationWithDelay.value < 0.5
                                 ? _previousChild
                                 : Transform.flip(flipY: true, child: widget.child)
                             : widget.child,
      - name: Remove step_04_d
        rmdir: step_04_d
      - name: Copy step_04_d
        copydir:
          from: quiz
          to: step_04_d
      # TODO(DomesticMouse): Delete step_04 once the codelab is published with individual steps
      - name: Remove step_04
        rmdir: step_04
      - name: Copy step_04
        copydir:
          from: quiz
          to: step_04
  - name: step_05
    steps:
      - name: Use PageRouteBuilder
        path: quiz/lib/home_screen.dart
        patch-u: |
          --- b/animations/step_05_a/lib/home_screen.dart
          +++ a/animations/step_05_a/lib/home_screen.dart
          @@ -24,14 +24,22 @@ class HomeScreen extends StatelessWidget {
                           // Show the question screen to start the game
                           Navigator.push(
                             context,
          -                  MaterialPageRoute(
          -                    builder: (BuildContext context) {
          -                      return QuestionScreen();
          +                  PageRouteBuilder(
          +                    pageBuilder: (context, animation, secondaryAnimation) {
          +                      return const QuestionScreen();
          +                    },
          +                    transitionsBuilder: (
          +                      context,
          +                      animation,
          +                      secondaryAnimation,
          +                      child,
          +                    ) {
          +                      return FadeTransition(opacity: animation, child: child);
                               },
                             ),
                           );
                         },
          -              child: Text('New Game'),
          +              child: const Text('New Game'),
                       ),
                     ],
                   ),
      - name: Remove step_05_a
        rmdir: step_05_a
      - name: Copy step_05_a
        copydir:
          from: quiz
          to: step_05_a
      - name: Use package:animations FadeThroughTransition
        path: quiz/lib/home_screen.dart
        patch-u: |

      - name: Configure Predictive Back on Android
        path: quiz/lib/main.dart
        patch-u: |

      - name: Remove step_05_b
        rmdir: step_05_b
      - name: Copy step_05_b
        copydir:
          from: quiz
          to: step_05_b
      - name: Change back to MaterialPageRoute
        path: quiz/lib/home_screen.dart
        patch-u: |

      - name: Use FadeThroughTransition
        path: quiz/lib/question_screen.dart
        patch-u: |

      - name: Remove step_05_c
        rmdir: step_05_c
      - name: Copy step_05_c
        copydir:
          from: quiz
          to: step_05_c
      - name: Use OpenContainer
        path: quiz/lib/question_screen.dart
        patch-u: |

      - name: Remove step_05_d
        rmdir: step_05_d
      - name: Copy step_05_d
        copydir:
          from: quiz
          to: step_05_d
      - name: Build Android app
        platforms: [ macos ]
        path: quiz
        flutter: build apk
      - name: Build iOS app
        platforms: [ macos ]
        path: quiz
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: quiz
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: quiz
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: quiz
        flutter: build windows
      - name: Build Web app
        path: quiz
        flutter: build web
      - name: Remove step_05
        rmdir: step_05
      - name: Copy step_05
        copydir:
          from: quiz
          to: step_05
  - name: Cleanup
    rmdir: quiz