name: Add animation effects to your Flutter app
steps:
  - name: step_01
    steps:
      - name: Remove generated code
        rmdir: step_01
      - name: Create project
        flutter: create --empty quiz
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: quiz/ios/Runner.xcodeproj/project.pbxproj
      - name: Remove README
        rm: quiz/README.md
      - name: Replace pubspec.yaml
        path: quiz/pubspec.yaml
        replace-contents: |
          name: quiz
          description: A quiz app for demonstrating animation effects in Flutter
          publish_to: "none"
          version: 1.0.0

          environment:
            sdk: ^3.2.0

          dependencies:
            animations: ^2.0.0
            flutter:
              sdk: flutter

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^4.0.0


          flutter:
            uses-material-design: true
      - name: Replace analysis_options.yaml
        path: quiz/analysis_options.yaml
        replace-contents: |
          include: package:flutter_lints/flutter.yaml

          linter:
            rules:
              prefer_const_constructors: false
              prefer_const_constructors_in_immutables: false
              prefer_const_declarations: false
              prefer_const_literals_to_create_immutables: false
              annotate_overrides: false
      - name: Create the HomeScreen
        path: quiz/lib/home_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'question_screen.dart';
        
          class HomeScreen extends StatelessWidget {
            const HomeScreen({super.key});
        
            @override
            Widget build(BuildContext context) {
              return Scaffold(
                body: Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        '✏️',
                        style: Theme.of(context).textTheme.displayLarge,
                      ),
                      Text(
                        'Flutter Quiz',
                        style: Theme.of(context).textTheme.displayLarge!.copyWith(
                            fontWeight: FontWeight.w700,
                            color: Theme.of(context).colorScheme.onPrimaryFixedVariant),
                      ),
                      ElevatedButton(
                        onPressed: () {
                          // Show the question screen to start the game
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (BuildContext context) {
                                return QuestionScreen();
                              },
                            ),
                          );
                        },
                        child: Text('New Game'),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      - name: Show the HomeScreen in MaterialApp
        path: quiz/lib/main.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          import 'home_screen.dart';
          
          void main() {
            runApp(MainApp());
          }
          
          class MainApp extends StatelessWidget {
            const MainApp({super.key});
          
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
                  useMaterial3: true,
                ),
                home: HomeScreen(),
              );
            }
          }
      - name: Create the Model
        path: quiz/lib/model.dart
        replace-contents: |
          import 'dart:math' as math;
          
          class Question {
            final String question;
            final List<String> possibleAnswers;
            final int correctAnswer;
            Question(this.question, this.possibleAnswers, this.correctAnswer);
          }
          
          class QuestionBank {
            final List<Question> _questions = _createQuestions();
          
            bool get hasNextQuestion => _questions.isNotEmpty;
            int get remainingQuestions => _questions.length;
          
            Question? getRandomQuestion() {
              if (_questions.isEmpty) {
                return null;
              }
          
              var i = math.Random().nextInt(_questions.length);
              var question = _questions[i];
          
              _questions.removeAt(i);
              return question;
            }
          }
          
          List<Question> _createQuestions() {
            return [
              Question(
                'What class used to create custom explicit animations in Flutter?',
                [
                  'AnimationController',
                  'AnimatedWidget',
                  'AnimatedBuilder',
                  'Tween',
                ],
                0,
              ),
              Question(
                'Which widget is used to rebuild its child whenever an animation changes?',
                [
                  'AnimatedContainer',
                  'AnimatedBuilder',
                  'AnimatedSwitcher',
                  'AnimatedOpacity',
                ],
                1,
              ),
              Question(
                'What class is used to define the start and end values for an animation?',
                [
                  'Tween',
                  'Curve',
                  'AnimationController',
                  'AnimatedWidget',
                ],
                0,
              ),
            ];
          }
      - name: Create the ViewModel
        path: quiz/lib/view_model.dart
        replace-contents: |
          import 'package:flutter/cupertino.dart';
          import 'model.dart';
          
          class QuizViewModel extends ChangeNotifier {
            final QuestionBank _questionBank = QuestionBank();
            final VoidCallback onGameOver;
            late final int totalQuestions;
            Question? currentQuestion;
            int answeredQuestionCount = 0;
            int score = 0;
            bool didAnswerQuestion = false;
            bool get hasNextQuestion => answeredQuestionCount < totalQuestions;
          
            QuizViewModel({required this.onGameOver}) {
              totalQuestions = _questionBank.remainingQuestions;
              getNextQuestion();
            }
          
            void getNextQuestion() {
              if (_questionBank.hasNextQuestion) {
                currentQuestion = _questionBank.getRandomQuestion();
                answeredQuestionCount++;
              }
          
              didAnswerQuestion = false;
          
              notifyListeners();
            }
          
            void checkAnswer(int selectedIndex) {
              if (!didAnswerQuestion && currentQuestion?.correctAnswer == selectedIndex) {
                score++;
              }
          
              didAnswerQuestion = true;
          
              if (!_questionBank.hasNextQuestion) {
                onGameOver();
              }
          
              notifyListeners();
            }
          }
      - name: Create the QuestionScreen
        path: quiz/lib/question_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'view_model.dart';
          
          class QuestionScreen extends StatefulWidget {
            const QuestionScreen({super.key});
          
            @override
            State<QuestionScreen> createState() => _QuestionScreenState();
          }
          
          class _QuestionScreenState extends State<QuestionScreen> {
            late final QuizViewModel viewModel =
                QuizViewModel(onGameOver: _handleGameOver);
          
            @override
            Widget build(BuildContext context) {
              return ListenableBuilder(
                listenable: viewModel,
                builder: (context, child) {
                  return Scaffold(
                    appBar: AppBar(
                      actions: [
                        TextButton(
                          onPressed:
                              viewModel.hasNextQuestion && viewModel.didAnswerQuestion
                                  ? () {
                                      viewModel.getNextQuestion();
                                    }
                                  : null,
                          child: const Text('Next'),
                        )
                      ],
                    ),
                    body: Center(
                      child: Column(
                        children: [
                          QuestionCard(question: viewModel.currentQuestion?.question),
                          Spacer(),
                          AnswerCards(
                            onTapped: (index) {
                              viewModel.checkAnswer(index);
                            },
                            answers: viewModel.currentQuestion?.possibleAnswers ?? [],
                            correctAnswer: viewModel.didAnswerQuestion
                                ? viewModel.currentQuestion?.correctAnswer
                                : null,
                          ),
                          StatusBar(viewModel: viewModel),
                        ],
                      ),
                    ),
                  );
                },
              );
            }
          
            void _handleGameOver() {
              showDialog(
                barrierDismissible: false,
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: Text('Game Over!'),
                    content: Text('Score: ${viewModel.score}'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.popUntil(context, (route) => route.isFirst);
                        },
                        child: Text('OK'),
                      ),
                    ],
                  );
                },
              );
            }
          }
          
          class QuestionCard extends StatelessWidget {
            final String? question;
          
            const QuestionCard({
              required this.question,
              super.key,
            });
          
            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Text(
                    question ?? "",
                    style: Theme.of(context).textTheme.displaySmall,
                  ),
                ),
              );
            }
          }
          
          class AnswerCards extends StatelessWidget {
            final List<String> answers;
            final ValueChanged<int> onTapped;
            final int? correctAnswer;
          
            const AnswerCards({
              required this.answers,
              required this.onTapped,
              required this.correctAnswer,
              super.key,
            });
          
            @override
            Widget build(BuildContext context) {
              return GridView.count(
                shrinkWrap: true,
                crossAxisCount: 2,
                childAspectRatio: 5 / 2,
                children: List.generate(answers.length, (index) {
                  var color = Theme.of(context).colorScheme.primaryContainer;
                  if (correctAnswer == index) {
                    color = Theme.of(context).colorScheme.tertiaryContainer;
                  }
                  return Card.filled(
                    key: ValueKey(answers[index]),
                    color: color,
                    elevation: 2,
                    margin: EdgeInsets.all(8),
                    clipBehavior: Clip.hardEdge,
                    child: InkWell(
                      onTap: () => onTapped(index),
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Center(
                          child: Text(
                            answers.length > index ? answers[index] : "",
                            style: Theme.of(context).textTheme.titleMedium,
                            overflow: TextOverflow.clip,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
              );
            }
          }
          
          class StatusBar extends StatelessWidget {
            final QuizViewModel viewModel;
          
            const StatusBar({required this.viewModel, super.key});
          
            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Text(
                        'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      Text(
                        'Score: ${viewModel.score}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      # - name: Build web app
      #   path: patterns_codelab
      #   flutter: build web
      - name: Fetch dependencies
        path: quiz
        dart: pub get
      - name: Run Dart Analzyer
        path: quiz
        dart: analyze --fatal-infos
      # - name: Check formatting
      #   path: quiz
      #   dart: format --set-exit-if-changed
      - name: Copy step_01
        copydir:
          from: quiz
          to: step_01
  - name: step_02
    steps:
      - name: Create scoreboard.dart
        path: quiz/lib/scoreboard.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          class Scoreboard extends StatelessWidget {
            final int score;
            final int totalQuestions;
          
            const Scoreboard({
              super.key,
              required this.score,
              required this.totalQuestions,
            });
          
            @override
            Widget build(BuildContext context) {
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    for (var i = 0; i < totalQuestions; i++)
                      Icon(
                        Icons.star,
                        size: 50,
                        color:
                            score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
                      )
                  ],
                ),
              );
            }
          }
      - name: Use Scoreboard widget
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_01/lib/question_screen.dart
          +++ b/animations/step_01/lib/question_screen.dart
          @@ -1,4 +1,5 @@
           import 'package:flutter/material.dart';
          +import 'scoreboard.dart';
           import 'view_model.dart';
           
           class QuestionScreen extends StatefulWidget {
          @@ -161,13 +162,9 @@ class StatusBar extends StatelessWidget {
                   child: Row(
                     mainAxisAlignment: MainAxisAlignment.spaceAround,
                     children: [
          -            Text(
          -              'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
          -              style: Theme.of(context).textTheme.titleLarge,
          -            ),
          -            Text(
          -              'Score: ${viewModel.score}',
          -              style: Theme.of(context).textTheme.titleLarge,
          +            Scoreboard(
          +              score: viewModel.score,
          +              totalQuestions: viewModel.totalQuestions,
                       ),
                     ],
                   ),
      - name: Use an ImplicitlyAnimatedWidget
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -18,14 +18,33 @@ class Scoreboard extends StatelessWidget {
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                     for (var i = 0; i < totalQuestions; i++)
          -            Icon(
          -              Icons.star,
          -              size: 50,
          -              color:
          -                  score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
          +            AnimatedStar(
          +              isActive: score > i,
                       )
                   ],
                 ),
               );
             }
           }
          +
          +class AnimatedStar extends StatelessWidget {
          +  final bool isActive;
          +  final Duration _duration = const Duration(milliseconds: 1000);
          +  final Color _deactivatedColor = Colors.grey.shade400;
          +  final Color _activatedColor = Colors.yellow.shade700;
          +
          +  AnimatedStar({super.key, required this.isActive});
          +
          +  @override
          +  Widget build(BuildContext context) {
          +    return AnimatedScale(
          +      scale: isActive ? 1.0 : 0.5,
          +      duration: _duration,
          +      child: Icon(
          +        Icons.star,
          +        size: 50,
          +        color: isActive ? _activatedColor : _deactivatedColor,
          +      ),
          +    );
          +  }
          +}
      - name: Use a TweenAnimationBuilder to change the color
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -40,10 +40,19 @@ class AnimatedStar extends StatelessWidget {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
                 duration: _duration,
          -      child: Icon(
          -        Icons.star,
          -        size: 50,
          -        color: isActive ? _activatedColor : _deactivatedColor,
          +      child: TweenAnimationBuilder(
          +        duration: _duration,
          +        tween: ColorTween(
          +          begin: _deactivatedColor,
          +          end: isActive ? _activatedColor : _deactivatedColor,
          +        ),
          +        builder: (context, value, child) {
          +          return Icon(
          +            Icons.star,
          +            size: 50,
          +            color: value,
          +          );
          +        },
                 ),
               );
             }
      - name: Use a Curve
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -32,6 +32,7 @@ class AnimatedStar extends StatelessWidget {
             final Duration _duration = const Duration(milliseconds: 1000);
             final Color _deactivatedColor = Colors.grey.shade400;
             final Color _activatedColor = Colors.yellow.shade700;
          +  final Curve _curve = Curves.elasticOut;
           
             AnimatedStar({super.key, required this.isActive});
           
          @@ -39,8 +40,10 @@ class AnimatedStar extends StatelessWidget {
             Widget build(BuildContext context) {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
          +      curve: _curve,
                 duration: _duration,
                 child: TweenAnimationBuilder(
          +        curve: _curve,
                   duration: _duration,
                   tween: ColorTween(
                     begin: _deactivatedColor,
          
      - name: Copy step_02
        copydir:
          from: quiz
          to: step_02
  - name: step_03
    steps:
      - name: Use AnimatedSwitcher
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_02/lib/question_screen.dart
          +++ b/animations/step_02/lib/question_screen.dart
          @@ -88,13 +88,17 @@ class QuestionCard extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return Card(
          -      elevation: 4,
          -      child: Padding(
          -        padding: EdgeInsets.all(16.0),
          -        child: Text(
          -          question ?? "",
          -          style: Theme.of(context).textTheme.displaySmall,
          +    return AnimatedSwitcher(
          +      duration: const Duration(milliseconds: 300),
          +      child: Card(
          +        key: ValueKey(question),
          +        elevation: 4,
          +        child: Padding(
          +          padding: const EdgeInsets.all(16.0),
          +          child: Text(
          +            question ?? "",
          +            style: Theme.of(context).textTheme.displaySmall,
          +          ),
                   ),
                 ),
               );
      - name: Use a custom transitionBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_03/lib/question_screen.dart
          +++ b/animations/step_03/lib/question_screen.dart
          @@ -88,6 +88,14 @@ class QuestionCard extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return AnimatedSwitcher(
          +      transitionBuilder: (Widget child, Animation<double> animation) {
          +        final curveAnimation =
          +            CurveTween(curve: Curves.easeInCubic).animate(animation);
          +        final offsetAnimation =
          +            Tween<Offset>(begin: Offset(-0.1, 0.0), end: Offset.zero)
          +                .animate(curveAnimation);
          +        return SlideTransition(position: offsetAnimation, child: child);
          +      },
                 duration: const Duration(milliseconds: 300),
                 child: Card(
                   key: ValueKey(question),
      - name: Apply a fade effect to the transitionBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_03/lib/question_screen.dart
          +++ b/animations/step_03/lib/question_screen.dart
          @@ -94,7 +94,11 @@ class QuestionCard extends StatelessWidget {
                   final offsetAnimation =
                       Tween<Offset>(begin: Offset(-0.1, 0.0), end: Offset.zero)
                           .animate(curveAnimation);
          -        return SlideTransition(position: offsetAnimation, child: child);
          +        final fadeInAnimation = curveAnimation;
          +        return FadeTransition(
          +          opacity: fadeInAnimation,
          +          child: SlideTransition(position: offsetAnimation, child: child),
          +        );
                 },
                 duration: const Duration(milliseconds: 300),
                 child: Card(
      - name: Customize the layoutBuilder
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_03/lib/question_screen.dart
          +++ b/animations/step_03/lib/question_screen.dart
          @@ -88,6 +88,15 @@ class QuestionCard extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return AnimatedSwitcher(
          +      layoutBuilder: (Widget? currentChild, List<Widget> previousChildren) {
          +        return Stack(
          +          alignment: Alignment.topCenter,
          +          children: <Widget>[
          +            ...previousChildren,
          +            if (currentChild != null) currentChild,
          +          ],
          +        );
          +      },
                 transitionBuilder: (Widget child, Animation<double> animation) {
                   final curveAnimation =
                       CurveTween(curve: Curves.easeInCubic).animate(animation);
      - name: Copy step_03
        copydir:
          from: quiz
          to: step_03
  - name: step_04
    steps:
      - name: Add flip_effect.dart
        path: quiz/lib/flip_effect.dart
        replace-contents: |
          import 'package:flutter/widgets.dart';
          import 'dart:math' as math;

          class CardFlipEffect extends StatefulWidget {
            final Widget child;
            final Duration duration;

            const CardFlipEffect({
              super.key,
              required this.child,
              required this.duration,
            });

            @override
            State<CardFlipEffect> createState() => _CardFlipEffectState();
          }

          class _CardFlipEffectState extends State<CardFlipEffect>
              with SingleTickerProviderStateMixin {
            late final AnimationController _animationController;
            Widget? _previousChild;

            @override
            void initState() {
              super.initState();

              _animationController = AnimationController(
                  vsync: this, duration: widget.duration);

              _animationController.addListener(() {
                if (_animationController.value == 1) {
                  _animationController.reset();
                }
              });
            }

            @override
            void didUpdateWidget(covariant CardFlipEffect oldWidget) {
              super.didUpdateWidget(oldWidget);

              if (widget.child.key != oldWidget.child.key) {
                _handleChildChanged(widget.child, oldWidget.child);
              }
            }

            void _handleChildChanged(Widget newChild, Widget previousChild) {
              _previousChild = previousChild;
              _animationController.forward();
            }

            @override
            Widget build(BuildContext context) {
              return AnimatedBuilder(
                animation: _animationController,
                builder: (context, child) {
                  return Transform(
                    alignment: Alignment.center,
                    transform: Matrix4.identity()
                      ..rotateX(_animationController.value * math.pi),
                    child: _animationController.isAnimating
                        ? _animationController.value < 0.5
                            ? _previousChild
                            : Transform.flip(flipY: true, child: widget.child)
                        : widget.child,
                  );
                },
                child: widget.child,
              );
            }
          }
      - name: Use CardFlipEffect
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_04/lib/question_screen.dart
          +++ b/animations/step_04/lib/question_screen.dart
          @@ -1,4 +1,5 @@
           import 'package:flutter/material.dart';
          +import 'flip_effect.dart';
           import 'scoreboard.dart';
           import 'view_model.dart';
           
          @@ -148,21 +149,25 @@ class AnswerCards extends StatelessWidget {
                   if (correctAnswer == index) {
                     color = Theme.of(context).colorScheme.tertiaryContainer;
                   }
          -        return Card.filled(
          -          key: ValueKey(answers[index]),
          -          color: color,
          -          elevation: 2,
          -          margin: EdgeInsets.all(8),
          -          clipBehavior: Clip.hardEdge,
          -          child: InkWell(
          -            onTap: () => onTapped(index),
          -            child: Padding(
          -              padding: EdgeInsets.all(16.0),
          -              child: Center(
          -                child: Text(
          -                  answers.length > index ? answers[index] : "",
          -                  style: Theme.of(context).textTheme.titleMedium,
          -                  overflow: TextOverflow.clip,
          +
          +        return CardFlipEffect(
          +          duration: const Duration(milliseconds: 300),
          +          child: Card.filled(
          +            key: ValueKey(answers[index]),
          +            color: color,
          +            elevation: 2,
          +            margin: const EdgeInsets.all(8),
          +            clipBehavior: Clip.hardEdge,
          +            child: InkWell(
          +              onTap: () => onTapped(index),
          +              child: Padding(
          +                padding: const EdgeInsets.all(16.0),
          +                child: Center(
          +                  child: Text(
          +                    answers.length > index ? answers[index] : "",
          +                    style: Theme.of(context).textTheme.titleMedium,
          +                    overflow: TextOverflow.clip,
          +                  ),
                           ),
                         ),
                       ),
      - name: Add delay using TweenSequence
        path: quiz/lib/flip_effect.dart
        patch-u: |
          --- a/animations/step_04/lib/flip_effect.dart
          +++ b/animations/step_04/lib/flip_effect.dart
          @@ -4,11 +4,13 @@ import 'dart:math' as math;
           class CardFlipEffect extends StatefulWidget {
             final Widget child;
             final Duration duration;
          +  final double delayAmount;
           
             const CardFlipEffect({
               super.key,
               required this.child,
               required this.duration,
          +    required this.delayAmount,
             });
           
             @override
          @@ -19,19 +21,32 @@ class _CardFlipEffectState extends State<CardFlipEffect>
               with SingleTickerProviderStateMixin {
             late final AnimationController _animationController;
             Widget? _previousChild;
          +  late final Animation<double> _animationWithDelay;
           
             @override
             void initState() {
               super.initState();
           
               _animationController = AnimationController(
          -        vsync: this, duration: widget.duration);
          +        vsync: this, duration: widget.duration * (widget.delayAmount + 1));
           
               _animationController.addListener(() {
                 if (_animationController.value == 1) {
                   _animationController.reset();
                 }
               });
          +
          +    _animationWithDelay = TweenSequence<double>([
          +      if (widget.delayAmount > 0)
          +        TweenSequenceItem(
          +          tween: ConstantTween<double>(0.0),
          +          weight: widget.delayAmount,
          +        ),
          +      TweenSequenceItem(
          +        tween: Tween(begin: 0.0, end: 1.0),
          +        weight: 1.0,
          +      ),
          +    ]).animate(_animationController);
             }
           
             @override
          @@ -51,14 +66,14 @@ class _CardFlipEffectState extends State<CardFlipEffect>
             @override
             Widget build(BuildContext context) {
               return AnimatedBuilder(
          -      animation: _animationController,
          +      animation: _animationWithDelay,
                 builder: (context, child) {
                   return Transform(
                     alignment: Alignment.center,
                     transform: Matrix4.identity()
          -            ..rotateX(_animationController.value * math.pi),
          +            ..rotateX(_animationWithDelay.value * math.pi),
                     child: _animationController.isAnimating
          -              ? _animationController.value < 0.5
          +              ? _animationWithDelay.value < 0.5
                             ? _previousChild
                             : Transform.flip(flipY: true, child: widget.child)
                         : widget.child,
      - name: Add delay to question screen
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_04/lib/question_screen.dart
          +++ b/animations/step_04/lib/question_screen.dart
          @@ -151,6 +151,7 @@ class AnswerCards extends StatelessWidget {
                   }
           
                   return CardFlipEffect(
          +          delayAmount: index.toDouble() / 2,
                     duration: const Duration(milliseconds: 300),
                     child: Card.filled(
                       key: ValueKey(answers[index]),
      - name: Copy step_04
        copydir:
          from: quiz
          to: step_04
  - name: step_05
    steps:
      - name: Use PageRouteBuilder
        path: quiz/lib/home_screen.dart
        patch-u: |
          --- a/animations/step_05/lib/home_screen.dart
          +++ b/animations/step_05/lib/home_screen.dart
          @@ -26,14 +26,19 @@ class HomeScreen extends StatelessWidget {
                           // Show the question screen to start the game
                           Navigator.push(
                             context,
          -                  MaterialPageRoute(
          -                    builder: (BuildContext context) {
          -                      return QuestionScreen();
          -                    },
          -                  ),
          +                  PageRouteBuilder(
          +                      pageBuilder: (context, animation, secondaryAnimation) {
          +                        return const QuestionScreen();
          +                      }, transitionsBuilder:
          +                      (context, animation, secondaryAnimation, child) {
          +                    return FadeTransition(
          +                      opacity: animation,
          +                      child: child,
          +                    );
          +                  }),
                           );
                         },
          -              child: Text('New Game'),
          +              child: const Text('New Game'),
                       ),
                     ],
                   ),
      - name: Use package:animations FadeThroughTransition
        path: quiz/lib/home_screen.dart
        patch-u: |
          --- a/animations/step_05/lib/home_screen.dart
          +++ b/animations/step_05/lib/home_screen.dart
          @@ -1,3 +1,4 @@
          +import 'package:animations/animations.dart';
           import 'package:flutter/material.dart';
           import 'question_screen.dart';
           
          @@ -31,8 +32,9 @@ class HomeScreen extends StatelessWidget {
                                   return const QuestionScreen();
                                 }, transitionsBuilder:
                                 (context, animation, secondaryAnimation, child) {
          -                    return FadeTransition(
          -                      opacity: animation,
          +                    return FadeThroughTransition(
          +                      animation: animation,
          +                      secondaryAnimation: secondaryAnimation,
                                 child: child,
                               );
                             }),
      - name: Configure Predictive Back on Android
        path: quiz/lib/main.dart
        patch-u: |
          --- a/animations/step_05/lib/main.dart
          +++ b/animations/step_05/lib/main.dart
          @@ -1,3 +1,4 @@
          +import 'package:animations/animations.dart';
           import 'package:flutter/material.dart';
           
           import 'home_screen.dart';
          @@ -16,6 +17,15 @@ class MainApp extends StatelessWidget {
                 theme: ThemeData(
                   colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
                   useMaterial3: true,
          +        pageTransitionsTheme: PageTransitionsTheme(
          +          builders: {
          +            TargetPlatform.android: PredictiveBackPageTransitionsBuilder(),
          +            TargetPlatform.iOS: FadeThroughPageTransitionsBuilder(),
          +            TargetPlatform.macOS: FadeThroughPageTransitionsBuilder(),
          +            TargetPlatform.windows: FadeThroughPageTransitionsBuilder(),
          +            TargetPlatform.linux: FadeThroughPageTransitionsBuilder(),
          +          },
          +        ),
                 ),
                 home: HomeScreen(),
               );

      - name: Change back to MaterialPageRoute
        path: quiz/lib/home_screen.dart
        patch-u: |
          --- a/animations/step_05/lib/home_screen.dart
          +++ b/animations/step_05/lib/home_screen.dart
          @@ -1,4 +1,3 @@
          -import 'package:animations/animations.dart';
           import 'package:flutter/material.dart';
           import 'question_screen.dart';
           
          @@ -27,16 +26,8 @@ class HomeScreen extends StatelessWidget {
                           // Show the question screen to start the game
                           Navigator.push(
                             context,
          -                  PageRouteBuilder(
          -                      pageBuilder: (context, animation, secondaryAnimation) {
          -                        return const QuestionScreen();
          -                      }, transitionsBuilder:
          -                      (context, animation, secondaryAnimation, child) {
          -                    return FadeThroughTransition(
          -                      animation: animation,
          -                      secondaryAnimation: secondaryAnimation,
          -                      child: child,
          -                    );
          +                  MaterialPageRoute(builder: (context) {
          +                    return const QuestionScreen();
                             }),
                           );
                         },
      - name: Use FadeThroughTransition
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_05/lib/question_screen.dart
          +++ b/animations/step_05/lib/question_screen.dart
          @@ -1,3 +1,4 @@
          +import 'package:animations/animations.dart';
           import 'package:flutter/material.dart';
           import 'flip_effect.dart';
           import 'scoreboard.dart';
          @@ -88,29 +89,23 @@ class QuestionCard extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return AnimatedSwitcher(
          -      layoutBuilder: (Widget? currentChild, List<Widget> previousChildren) {
          +    return PageTransitionSwitcher(
          +      duration: const Duration(milliseconds: 200),
          +      layoutBuilder: (List<Widget> entries) {
                   return Stack(
                     alignment: Alignment.topCenter,
                     children: <Widget>[
          -            ...previousChildren,
          -            if (currentChild != null) currentChild,
          +            ...entries,
                     ],
                   );
                 },
          -      transitionBuilder: (Widget child, Animation<double> animation) {
          -        final curveAnimation =
          -            CurveTween(curve: Curves.easeInCubic).animate(animation);
          -        final offsetAnimation =
          -            Tween<Offset>(begin: Offset(-0.1, 0.0), end: Offset.zero)
          -                .animate(curveAnimation);
          -        final fadeInAnimation = curveAnimation;
          -        return FadeTransition(
          -          opacity: fadeInAnimation,
          -          child: SlideTransition(position: offsetAnimation, child: child),
          +      transitionBuilder: (Widget child, animation, secondaryAnimation) {
          +        return FadeThroughTransition(
          +          animation: animation,
          +          secondaryAnimation: secondaryAnimation,
          +          child: child,
                   );
                 },
          -      duration: const Duration(milliseconds: 300),
                 child: Card(
                   key: ValueKey(question),
                   elevation: 4,
      - name: Use OpenContainer
        path: quiz/lib/question_screen.dart
        patch-u: | 
          --- a/animations/step_05/lib/question_screen.dart
          +++ b/animations/step_05/lib/question_screen.dart
          @@ -14,6 +14,7 @@ class QuestionScreen extends StatefulWidget {
           class _QuestionScreenState extends State<QuestionScreen> {
             late final QuizViewModel viewModel =
                 QuizViewModel(onGameOver: _handleGameOver);
          +  VoidCallback? _showGameOverScreen;
           
             @override
             Widget build(BuildContext context) {
          @@ -37,7 +38,11 @@ class _QuestionScreenState extends State<QuestionScreen> {
                     body: Center(
                       child: Column(
                         children: [
          -                QuestionCard(question: viewModel.currentQuestion?.question),
          +                QuestionCard(
          +                  onChangeOpenContainer: _handleChangeOpenContainer,
          +                  question: viewModel.currentQuestion?.question,
          +                  viewModel: viewModel,
          +                ),
                           Spacer(),
                           AnswerCards(
                             onTapped: (index) {
          @@ -48,7 +53,9 @@ class _QuestionScreenState extends State<QuestionScreen> {
                                 ? viewModel.currentQuestion?.correctAnswer
                                 : null,
                           ),
          -                StatusBar(viewModel: viewModel),
          +                StatusBar(
          +                  viewModel: viewModel,
          +                )
                         ],
                       ),
                     ),
          @@ -57,24 +64,54 @@ class _QuestionScreenState extends State<QuestionScreen> {
               );
             }
           
          +  void _handleChangeOpenContainer(VoidCallback openContainer) {
          +    _showGameOverScreen = openContainer;
          +  }
          +
             void _handleGameOver() {
          -    showDialog(
          -      barrierDismissible: false,
          -      context: context,
          -      builder: (context) {
          -        return AlertDialog(
          -          title: Text('Game Over!'),
          -          content: Text('Score: ${viewModel.score}'),
          -          actions: [
          -            TextButton(
          +    if (_showGameOverScreen != null) {
          +      _showGameOverScreen!();
          +    }
          +  }
          +}
          +
          +class GameOverScreen extends StatelessWidget {
          +  final QuizViewModel viewModel;
          +  const GameOverScreen({required this.viewModel, super.key});
          +
          +  @override
          +  Widget build(BuildContext context) {
          +    return Scaffold(
          +      appBar: AppBar(
          +        automaticallyImplyLeading: false,
          +      ),
          +      body: Center(
          +        child: Column(
          +          mainAxisAlignment: MainAxisAlignment.center,
          +          children: [
          +            Scoreboard(
          +              score: viewModel.score,
          +              totalQuestions: viewModel.totalQuestions,
          +            ),
          +            Text(
          +              'You Win!',
          +              style: Theme.of(context).textTheme.displayLarge,
          +            ),
          +            Text(
          +              'Score: ${viewModel.score} / ${viewModel.totalQuestions}',
          +              style: Theme.of(context).textTheme.displaySmall,
          +            ),
          +            ElevatedButton(
          +              child: Text('OK'),
                         onPressed: () {
          -                Navigator.popUntil(context, (route) => route.isFirst);
          +                Navigator.pop(context);
          +                // Navigator.popUntil(
          +                //     context, (route) => route.isFirst);
                         },
          -              child: Text('OK'),
                       ),
                     ],
          -        );
          -      },
          +        ),
          +      ),
               );
             }
           }
          @@ -83,22 +120,21 @@ class QuestionCard extends StatelessWidget {
             final String? question;
           
             const QuestionCard({
          +    required this.onChangeOpenContainer,
               required this.question,
          +    required this.viewModel,
               super.key,
             });
           
          +  final ValueChanged<VoidCallback> onChangeOpenContainer;
          +  final QuizViewModel viewModel;
          +
          +  static const _backgroundColor = Color(0xfff2f3fa);
          +
             @override
             Widget build(BuildContext context) {
               return PageTransitionSwitcher(
                 duration: const Duration(milliseconds: 200),
          -      layoutBuilder: (List<Widget> entries) {
          -        return Stack(
          -          alignment: Alignment.topCenter,
          -          children: <Widget>[
          -            ...entries,
          -          ],
          -        );
          -      },
                 transitionBuilder: (Widget child, animation, secondaryAnimation) {
                   return FadeThroughTransition(
                     animation: animation,
          @@ -106,16 +142,30 @@ class QuestionCard extends StatelessWidget {
                     child: child,
                   );
                 },
          -      child: Card(
          +      child: OpenContainer(
                   key: ValueKey(question),
          -        elevation: 4,
          -        child: Padding(
          -          padding: const EdgeInsets.all(16.0),
          -          child: Text(
          -            question ?? "",
          -            style: Theme.of(context).textTheme.displaySmall,
          -          ),
          +        tappable: false,
          +        closedColor: _backgroundColor,
          +        closedShape: const RoundedRectangleBorder(
          +          borderRadius: BorderRadius.all(Radius.circular(12.0)),
                   ),
          +        closedElevation: 4,
          +        closedBuilder: (context, openContainer) {
          +          onChangeOpenContainer(openContainer);
          +          return ColoredBox(
          +            color: _backgroundColor,
          +            child: Padding(
          +              padding: const EdgeInsets.all(16.0),
          +              child: Text(
          +                question ?? "",
          +                style: Theme.of(context).textTheme.displaySmall,
          +              ),
          +            ),
          +          );
          +        },
          +        openBuilder: (context, closeContainer) {
          +          return GameOverScreen(viewModel: viewModel);
          +        },
                 ),
               );
             }
      - name: dart analyze
        path: quiz
        dart: analyze --fatal-infos
      - name: Build Android app
        platforms: [ macos ]
        path: quiz
        flutter: build apk
      - name: Build iOS app
        platforms: [ macos ]
        path: quiz
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: quiz
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: quiz
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: quiz
        flutter: build windows
      - name: Build Web app
        path: quiz
        flutter: build web
      - name: Copy step_05
        copydir:
          from: quiz
          to: step_05
  - name: Cleanup
    rmdir: quiz
