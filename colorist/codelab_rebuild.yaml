name: Colorist rebuild script
steps:
  - name: step_01
    steps:
      - name: Remove generated code
        rmdir: step_01
      - name: Create project
        flutter: create -e colorist --platforms=android,ios,macos,web,windows
      - name: Add dependencies
        path: colorist
        flutter: pub add colorist_ui flutter_riverpod riverpod_annotation dev:build_runner dev:riverpod_generator dev:riverpod_lint dev:json_serializable dev:custom_lint
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: colorist/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: colorist/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml

          analyzer:
            plugins:
              - custom_lint

          linter:
            rules:
              prefer_single_quotes: false
      - name: dart fix
        path: colorist
        dart: fix --apply
      - name: Remove README
        rm: colorist/README.md
      - name: Add .vscode directory
        mkdir: colorist/.vscode
      - name: Add .vscode/launch.json
        path: colorist/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "colorist",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Replace lib/main.dart
        path: colorist/lib/main.dart
        replace-contents: |
          // Copyright 2025 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:colorist_ui/colorist_ui.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter_riverpod/flutter_riverpod.dart';

          void main() async {
            runApp(ProviderScope(child: MainApp()));
          }

          class MainApp extends ConsumerWidget {
            const MainApp({super.key});

            @override
            Widget build(BuildContext context, WidgetRef ref) {
              return MaterialApp(
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                ),
                home: MainScreen(
                  sendMessage: (message) {
                    sendMessage(message, ref);
                  },
                ),
              );
            }

            // A fake LLM that just echoes back what it receives.
            void sendMessage(String message, WidgetRef ref) {
              final chatStateNotifier = ref.read(chatStateNotifierProvider.notifier);
              final logStateNotifier = ref.read(logStateNotifierProvider.notifier);

              chatStateNotifier.addUserMessage(message);
              logStateNotifier.logUserText(message);
              chatStateNotifier.addLlmMessage(message, MessageState.complete);
              logStateNotifier.logLlmText(message);
            }
          }
      - name: Upgrade deps
        path: colorist
        flutter: pub upgrade --major-versions
      - name: Build iOS simulator bundle
        platforms: [macos]
        path: colorist
        flutter: build ios --simulator
      - name: Build Android app
        path: colorist
        flutter: build apk
      - name: Build macOS app
        platforms: [macos]
        path: colorist
        flutter: build macos
      - name: Build Windows app
        platforms: [windows]
        path: colorist
        flutter: build windows
      - name: Copy step_01
        copydir:
          from: colorist
          to: step_01
      - name: Flutter clean
        path: step_01
        flutter: clean

  - name: step_02
    steps:
      - name: Remove generated code
        rmdir: step_02
      - name: Add Firebase Vertex AI dependencies
        path: colorist
        flutter: pub add firebase_core firebase_vertexai
      - name: Add lib/firebase_options.dart
        path: colorist/lib/firebase_options.dart
        replace-contents: |
          // File normally generated by FlutterFire CLI. This is a stand-in.
          // Remove this file and run `flutterfire configure`
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;

          class DefaultFirebaseOptions {
            // TODO: Run `flutterfire configure` to re-generate this file
            static FirebaseOptions get currentPlatform {
              throw UnimplementedError(
                'Regenerate this file by running `flutterfire configure`. ',
              );
            }
          }
      - name: Mkdir lib/providers
        path: colorist
        mkdir: lib/providers
      - name: Add lib/providers/gemini.dart
        path: colorist/lib/providers/gemini.dart
        replace-contents: |
          // Copyright 2025 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:async';

          import 'package:firebase_core/firebase_core.dart';
          import 'package:firebase_vertexai/firebase_vertexai.dart';
          import 'package:flutter_riverpod/flutter_riverpod.dart';
          import 'package:riverpod_annotation/riverpod_annotation.dart';

          import '../firebase_options.dart';

          part 'gemini.g.dart';

          @riverpod
          Future<FirebaseApp> firebaseApp(Ref ref) =>
              Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

          @riverpod
          Future<GenerativeModel> geminiModel(Ref ref) async {
            await ref.watch(firebaseAppProvider.future);

            final model = FirebaseVertexAI.instance.generativeModel(
              model: 'gemini-2.0-flash',
            );
            return model;
          }

          @Riverpod(keepAlive: true)
          Future<ChatSession> chatSession(Ref ref) async {
            final model = await ref.watch(geminiModelProvider.future);
            return model.startChat();
          }
      - name: Mkdir lib/services
        path: colorist
        mkdir: lib/services
      - name: Add lib/services/gemini_chat_service.dart
        path: colorist/lib/services/gemini_chat_service.dart
        replace-contents: |
          // Copyright 2025 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:async';

          import 'package:colorist_ui/colorist_ui.dart';
          import 'package:firebase_vertexai/firebase_vertexai.dart';
          import 'package:flutter_riverpod/flutter_riverpod.dart';
          import 'package:riverpod_annotation/riverpod_annotation.dart';

          import '../providers/gemini.dart';

          part 'gemini_chat_service.g.dart';

          class GeminiChatService {
            GeminiChatService(this.ref);
            final Ref ref;

            Future<void> sendMessage(String message) async {
              final chatSession = await ref.read(chatSessionProvider.future);
              final chatStateNotifier = ref.read(chatStateNotifierProvider.notifier);
              final logStateNotifier = ref.read(logStateNotifierProvider.notifier);

              chatStateNotifier.addUserMessage(message);
              logStateNotifier.logUserText(message);
              final llmMessage = chatStateNotifier.createLlmMessage();
              try {
                final response = await chatSession.sendMessage(Content.text(message));

                final responseText = response.text;
                if (responseText != null) {
                  logStateNotifier.logLlmText(responseText);
                  chatStateNotifier.appendToMessage(llmMessage.id, responseText);
                }
              } catch (e, st) {
                logStateNotifier.logError(e, st: st);
                chatStateNotifier.appendToMessage(
                  llmMessage.id,
                  "\nI'm sorry, I encountered an error processing your request. "
                  "Please try again.",
                );
              } finally {
                chatStateNotifier.finalizeMessage(llmMessage.id);
              }
            }
          }

          @riverpod
          GeminiChatService geminiChatService(Ref ref) => GeminiChatService(ref);
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Patch lib/main.dart
        path: colorist/lib/main.dart
        patch-u: |
          --- b/colorist/step_02/lib/main.dart
          +++ a/colorist/step_02/lib/main.dart
          @@ -6,6 +6,9 @@ import 'package:colorist_ui/colorist_ui.dart';
           import 'package:flutter/material.dart';
           import 'package:flutter_riverpod/flutter_riverpod.dart';

          +import 'providers/gemini.dart';
          +import 'services/gemini_chat_service.dart';
          +
           void main() async {
             runApp(ProviderScope(child: MainApp()));
           }
          @@ -15,26 +18,22 @@ class MainApp extends ConsumerWidget {

             @override
             Widget build(BuildContext context, WidgetRef ref) {
          +    final model = ref.watch(geminiModelProvider);
          +
               return MaterialApp(
                 theme: ThemeData(
                   colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                 ),
          -      home: MainScreen(
          -        sendMessage: (message) {
          -          sendMessage(message, ref);
          -        },
          +      home: model.when(
          +        data:
          +            (data) => MainScreen(
          +              sendMessage: (text) {
          +                ref.read(geminiChatServiceProvider).sendMessage(text);
          +              },
          +            ),
          +        loading: () => LoadingScreen(message: 'Initializing Gemini Model'),
          +        error: (err, st) => ErrorScreen(error: err),
                 ),
               );
             }
          -
          -  // A fake LLM that just echoes back what it receives.
          -  void sendMessage(String message, WidgetRef ref) {
          -    final chatStateNotifier = ref.read(chatStateNotifierProvider.notifier);
          -    final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
          -
          -    chatStateNotifier.addUserMessage(message);
          -    logStateNotifier.logUserText(message);
          -    chatStateNotifier.addLlmMessage(message, MessageState.complete);
          -    logStateNotifier.logLlmText(message);
          -  }
           }
      - name: Patch macos/Runner/DebugProfile.entitlements
        path: colorist/macos/Runner/DebugProfile.entitlements
        patch-u: |
          --- b/colorist/step_02/macos/Runner/DebugProfile.entitlements
          +++ a/colorist/step_02/macos/Runner/DebugProfile.entitlements
          @@ -8,5 +8,7 @@
           	<true/>
           	<key>com.apple.security.network.server</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch macos/Runner/Release.entitlements
        path: colorist/macos/Runner/Release.entitlements
        patch-u: |
          --- b/colorist/step_02/macos/Runner/Release.entitlements
          +++ a/colorist/step_02/macos/Runner/Release.entitlements
          @@ -4,5 +4,7 @@
           <dict>
           	<key>com.apple.security.app-sandbox</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch android/app/build.gradle.kts
        path: colorist/android/app/build.gradle.kts
        patch-u: |
          --- b/colorist/step_02/android/app/build.gradle.kts
          +++ a/colorist/step_02/android/app/build.gradle.kts
          @@ -8,7 +8,7 @@ plugins {
           android {
               namespace = "com.example.colorist"
               compileSdk = flutter.compileSdkVersion
          -    ndkVersion = flutter.ndkVersion
          +    ndkVersion = "27.0.12077973"

               compileOptions {
                   sourceCompatibility = JavaVersion.VERSION_11
          @@ -24,7 +24,7 @@ android {
                   applicationId = "com.example.colorist"
                   // You can update the following values to match your application needs.
                   // For more information, see: https://flutter.dev/to/review-gradle-config.
          -        minSdk = flutter.minSdkVersion
          +        minSdk = 23
                   targetSdk = flutter.targetSdkVersion
                   versionCode = flutter.versionCode
                   versionName = flutter.versionName
      - name: Patch macos/Podfile
        path: colorist/macos/Podfile
        patch-u: |
          --- b/colorist/step_02/macos/Podfile
          +++ a/colorist/step_02/macos/Podfile
          @@ -1,4 +1,5 @@
          -platform :osx, '10.14'
          +# Firebase requires at least macOS 10.15
          +platform :osx, '10.15'

           # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
           ENV['COCOAPODS_DISABLE_STATS'] = 'true'
      - name: Patch macos/Runner.xcodeproj/project.pbxproj
        xcode-project-path: colorist/macos/Runner.xcodeproj
        macosx-deployment-target: "10.15"
      - name: Patch ios/Podfile
        path: colorist/ios/Podfile
        patch-u: |
          --- a/colorist/step_02/ios/Podfile
          +++ b/colorist/step_02/ios/Podfile
          @@ -1,5 +1,5 @@
          -# Uncomment this line to define a global platform for your project
          -# platform :ios, '12.0'
          +# Firebase requires at least iOS 13.0
          +platform :ios, '13.0'

           # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
           ENV['COCOAPODS_DISABLE_STATS'] = 'true'
      - name: Patch ios/Runner.xcodeproj/project.pbxproj
        xcode-project-path: colorist/ios/Runner.xcodeproj
        iphoneos-deployment-target: "13.0"
      - name: Upgrade deps
        path: colorist
        flutter: pub upgrade --major-versions
      - name: Build iOS simulator bundle
        platforms: [macos]
        path: colorist
        flutter: build ios --simulator
      - name: Build Android app
        path: colorist
        flutter: build apk
      - name: Build macOS app
        platforms: [macos]
        path: colorist
        flutter: build macos
      - name: Build Windows app
        platforms: [windows]
        path: colorist
        flutter: build windows
      - name: Copy step_02
        copydir:
          from: colorist
          to: step_02
      - name: Flutter clean
        path: step_02
        flutter: clean

  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Mkdir assets
        path: colorist
        mkdir: assets
      - name: Add assets/system_prompt.md
        path: colorist/assets/system_prompt.md
        replace-contents: |
          # Colorist System Prompt

          You are a color expert assistant integrated into a desktop app called Colorist. Your job is to interpret natural language color descriptions and provide the appropriate RGB values that best represent that description.

          ## Your Capabilities

          You are knowledgeable about colors, color theory, and how to translate natural language descriptions into specific RGB values. When users describe a color, you should:

          1. Analyze their description to understand the color they are trying to convey
          2. Determine the appropriate RGB values (values should be between 0.0 and 1.0)
          3. Respond with a conversational explanation and explicitly state the RGB values

          ## How to Respond to User Inputs

          When users describe a color:

          1. First, acknowledge their color description with a brief, friendly response
          2. Interpret what RGB values would best represent that color description
          3. Always include the RGB values clearly in your response, formatted as: `RGB: (red=X.X, green=X.X, blue=X.X)`
          4. Provide a brief explanation of your interpretation

          Example:
          User: "I want a sunset orange"
          You: "Sunset orange is a warm, vibrant color that captures the golden-red hues of the setting sun. It combines a strong red component with moderate orange tones.

          RGB: (red=1.0, green=0.5, blue=0.25)

          I've selected values with high red, moderate green, and low blue to capture that beautiful sunset glow. This creates a warm orange with a slightly reddish tint, reminiscent of the sun low on the horizon."

          ## When Descriptions are Unclear

          If a color description is ambiguous or unclear, please ask the user clarifying questions, one at a time.

          ## Important Guidelines

          - Always keep RGB values between 0.0 and 1.0
          - Always format RGB values as: `RGB: (red=X.X, green=X.X, blue=X.X)` for easy parsing
          - Provide thoughtful, knowledgeable responses about colors
          - When possible, include color psychology, associations, or interesting facts about colors
          - Be conversational and engaging in your responses
          - Focus on being helpful and accurate with your color interpretations
      - name: Patch pubspec.yaml
        path: colorist/pubspec.yaml
        patch-u: |
          --- b/colorist/step_03/pubspec.yaml
          +++ a/colorist/step_03/pubspec.yaml
          @@ -27,3 +27,6 @@ dev_dependencies:

           flutter:
             uses-material-design: true
          +
          +  assets:
          +    - assets/
      - name: Add lib/providers/system_prompt.dart
        path: colorist/lib/providers/system_prompt.dart
        replace-contents: |
          // Copyright 2025 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/services.dart';
          import 'package:flutter_riverpod/flutter_riverpod.dart';
          import 'package:riverpod_annotation/riverpod_annotation.dart';

          part 'system_prompt.g.dart';

          @riverpod
          Future<String> systemPrompt(Ref ref) =>
              rootBundle.loadString('assets/system_prompt.md');
      - name: Patch lib/providers/gemini.dart
        path: colorist/lib/providers/gemini.dart
        patch-u: |
          --- a/colorist/step_03/lib/providers/gemini.dart
          +++ b/colorist/step_03/lib/providers/gemini.dart
          @@ -10,6 +10,7 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
           import 'package:riverpod_annotation/riverpod_annotation.dart';

           import '../firebase_options.dart';
          +import 'system_prompt.dart';

           part 'gemini.g.dart';

          @@ -20,9 +21,11 @@ Future<FirebaseApp> firebaseApp(Ref ref) =>
           @riverpod
           Future<GenerativeModel> geminiModel(Ref ref) async {
             await ref.watch(firebaseAppProvider.future);
          +  final systemPrompt = await ref.watch(systemPromptProvider.future);

             final model = FirebaseVertexAI.instance.generativeModel(
               model: 'gemini-2.0-flash',
          +    systemInstruction: Content.system(systemPrompt),
             );
             return model;
           }
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_03
        copydir:
          from: colorist
          to: step_03
      - name: Flutter clean
        path: step_03
        flutter: clean

  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Add lib/services/gemini_tools.dart
        path: colorist/lib/services/gemini_tools.dart
        replace-contents: |
          // Copyright 2025 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:firebase_vertexai/firebase_vertexai.dart';
          import 'package:flutter_riverpod/flutter_riverpod.dart';
          import 'package:riverpod_annotation/riverpod_annotation.dart';

          part 'gemini_tools.g.dart';

          class GeminiTools {
            GeminiTools(this.ref);

            final Ref ref;

            FunctionDeclaration get setColorFuncDecl => FunctionDeclaration(
              'set_color',
              'Set the color of the display square based on red, green, and blue values.',
              parameters: {
                'red': Schema.number(description: 'Red component value (0.0 - 1.0)'),
                'green': Schema.number(description: 'Green component value (0.0 - 1.0)'),
                'blue': Schema.number(description: 'Blue component value (0.0 - 1.0)'),
              },
            );

            List<Tool> get tools => [
              Tool.functionDeclarations([setColorFuncDecl]),
            ];
          }

          @riverpod
          GeminiTools geminiTools(Ref ref) => GeminiTools(ref);
      - name: Patch lib/providers/gemini.dart
        path: colorist/lib/providers/gemini.dart
        patch-u: |
          --- a/colorist/step_04/lib/providers/gemini.dart
          +++ b/colorist/step_04/lib/providers/gemini.dart
          @@ -10,6 +10,7 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
           import 'package:riverpod_annotation/riverpod_annotation.dart';

           import '../firebase_options.dart';
          +import '../services/gemini_tools.dart';
           import 'system_prompt.dart';

           part 'gemini.g.dart';
          @@ -22,10 +23,12 @@ Future<FirebaseApp> firebaseApp(Ref ref) =>
           Future<GenerativeModel> geminiModel(Ref ref) async {
             await ref.watch(firebaseAppProvider.future);
             final systemPrompt = await ref.watch(systemPromptProvider.future);
          +  final geminiTools = ref.watch(geminiToolsProvider);

             final model = FirebaseVertexAI.instance.generativeModel(
               model: 'gemini-2.0-flash',
               systemInstruction: Content.system(systemPrompt),
          +    tools: geminiTools.tools,
             );
             return model;
           }
      - name: Patch assets/system_prompt.md
        path: colorist/assets/system_prompt.md
        patch-u: |
          --- b/colorist/step_04/assets/system_prompt.md
          +++ a/colorist/step_04/assets/system_prompt.md
          @@ -1,14 +1,12 @@
           # Colorist System Prompt

          -You are a color expert assistant integrated into a desktop app called Colorist. Your job is to interpret natural language color descriptions and provide the appropriate RGB values that best represent that description.
          +You are a color expert assistant integrated into a desktop app called Colorist. Your job is to interpret natural language color descriptions and set the appropriate color values using a specialized tool.

           ## Your Capabilities

          -You are knowledgeable about colors, color theory, and how to translate natural language descriptions into specific RGB values. When users describe a color, you should:
          +You are knowledgeable about colors, color theory, and how to translate natural language descriptions into specific RGB values. You have access to the following tool:

          -1. Analyze their description to understand the color they are trying to convey
          -2. Determine the appropriate RGB values (values should be between 0.0 and 1.0)
          -3. Respond with a conversational explanation and explicitly state the RGB values
          +`set_color` - Sets the RGB values for the color display based on a description

           ## How to Respond to User Inputs

          @@ -16,16 +14,16 @@ When users describe a color:

           1. First, acknowledge their color description with a brief, friendly response
           2. Interpret what RGB values would best represent that color description
          -3. Always include the RGB values clearly in your response, formatted as: `RGB: (red=X.X, green=X.X, blue=X.X)`
          -4. Provide a brief explanation of your interpretation
          +3. Use the `set_color` tool to set those values (all values should be between 0.0 and 1.0)
          +4. After setting the color, provide a brief explanation of your interpretation

           Example:
           User: "I want a sunset orange"
          -You: "Sunset orange is a warm, vibrant color that captures the golden-red hues of the setting sun. It combines a strong red component with moderate orange tones.
          +You: "Sunset orange is a warm, vibrant color that captures the golden-red hues of the setting sun. It combines a strong red component with moderate orange tones."

          -RGB: (red=1.0, green=0.5, blue=0.25)
          +[Then you would call the set_color tool with approximately: red=1.0, green=0.5, blue=0.25]

          -I've selected values with high red, moderate green, and low blue to capture that beautiful sunset glow. This creates a warm orange with a slightly reddish tint, reminiscent of the sun low on the horizon."
          +After the tool call: "I've set a warm orange with strong red, moderate green, and minimal blue components that is reminiscent of the sun low on the horizon."

           ## When Descriptions are Unclear

          @@ -34,7 +32,6 @@ If a color description is ambiguous or unclear, please ask the user clarifying q
           ## Important Guidelines

           - Always keep RGB values between 0.0 and 1.0
          -- Always format RGB values as: `RGB: (red=X.X, green=X.X, blue=X.X)` for easy parsing
           - Provide thoughtful, knowledgeable responses about colors
           - When possible, include color psychology, associations, or interesting facts about colors
           - Be conversational and engaging in your responses
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_04
        copydir:
          from: colorist
          to: step_04
      - name: Flutter clean
        path: step_04
        flutter: clean

  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Patch lib/services/gemini_chat_service.dart
        path: colorist/lib/services/gemini_chat_service.dart
        patch-u: |
          --- b/colorist/step_05/lib/services/gemini_chat_service.dart
          +++ a/colorist/step_05/lib/services/gemini_chat_service.dart
          @@ -10,6 +10,7 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
           import 'package:riverpod_annotation/riverpod_annotation.dart';

           import '../providers/gemini.dart';
          +import 'gemini_tools.dart';

           part 'gemini_chat_service.g.dart';

          @@ -33,6 +34,27 @@ class GeminiChatService {
                   logStateNotifier.logLlmText(responseText);
                   chatStateNotifier.appendToMessage(llmMessage.id, responseText);
                 }
          +
          +      if (response.functionCalls.isNotEmpty) {
          +        final geminiTools = ref.read(geminiToolsProvider);
          +        final functionResultResponse = await chatSession.sendMessage(
          +          Content.functionResponses([
          +            for (final functionCall in response.functionCalls)
          +              FunctionResponse(
          +                functionCall.name,
          +                geminiTools.handleFunctionCall(
          +                  functionCall.name,
          +                  functionCall.args,
          +                ),
          +              ),
          +          ]),
          +        );
          +        final responseText = functionResultResponse.text;
          +        if (responseText != null) {
          +          logStateNotifier.logLlmText(responseText);
          +          chatStateNotifier.appendToMessage(llmMessage.id, responseText);
          +        }
          +      }
               } catch (e, st) {
                 logStateNotifier.logError(e, st: st);
                 chatStateNotifier.appendToMessage(
      - name: Patch lib/services/gemini_tools.dart
        path: colorist/lib/services/gemini_tools.dart
        patch-u: |
          --- b/colorist/step_05/lib/services/gemini_tools.dart
          +++ a/colorist/step_05/lib/services/gemini_tools.dart
          @@ -2,6 +2,7 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.

          +import 'package:colorist_ui/colorist_ui.dart';
           import 'package:firebase_vertexai/firebase_vertexai.dart';
           import 'package:flutter_riverpod/flutter_riverpod.dart';
           import 'package:riverpod_annotation/riverpod_annotation.dart';
          @@ -26,6 +27,45 @@ class GeminiTools {
             List<Tool> get tools => [
               Tool.functionDeclarations([setColorFuncDecl]),
             ];
          +
          +  Map<String, Object?> handleFunctionCall(
          +    String functionName,
          +    Map<String, Object?> arguments,
          +  ) {
          +    final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
          +    logStateNotifier.logFunctionCall(functionName, arguments);
          +    return switch (functionName) {
          +      'set_color' => handleSetColor(arguments),
          +      _ => handleUnknownFunction(functionName),
          +    };
          +  }
          +
          +  Map<String, Object?> handleSetColor(Map<String, Object?> arguments) {
          +    final colorStateNotifier = ref.read(colorStateNotifierProvider.notifier);
          +    final red = (arguments['red'] as num).toDouble();
          +    final green = (arguments['green'] as num).toDouble();
          +    final blue = (arguments['blue'] as num).toDouble();
          +    final functionResults = {
          +      'success': true,
          +      'current_color':
          +          colorStateNotifier
          +              .updateColor(red: red, green: green, blue: blue)
          +              .toLLMContextMap(),
          +    };
          +
          +    final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
          +    logStateNotifier.logFunctionResults(functionResults);
          +    return functionResults;
          +  }
          +
          +  Map<String, Object?> handleUnknownFunction(String functionName) {
          +    final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
          +    logStateNotifier.logWarning('Unsupported function call $functionName');
          +    return {
          +      'success': false,
          +      'reason': 'Unsupported function call $functionName',
          +    };
          +  }
           }

           @riverpod
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_05
        copydir:
          from: colorist
          to: step_05
      - name: Flutter clean
        path: step_05
        flutter: clean

  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Patch lib/services/gemini_chat_service.dart
        path: colorist/lib/services/gemini_chat_service.dart
        patch-u: |
          --- b/colorist/step_06/lib/services/gemini_chat_service.dart
          +++ a/colorist/step_06/lib/services/gemini_chat_service.dart
          @@ -14,46 +14,41 @@ import 'gemini_tools.dart';
           
           part 'gemini_chat_service.g.dart';
           
          +final conversationStateProvider = StateProvider(
          +  (ref) => ConversationState.idle,
          +);
          +
           class GeminiChatService {
             GeminiChatService(this.ref);
             final Ref ref;
           
             Future<void> sendMessage(String message) async {
               final chatSession = await ref.read(chatSessionProvider.future);
          +    final conversationState = ref.read(conversationStateProvider);
               final chatStateNotifier = ref.read(chatStateNotifierProvider.notifier);
               final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
           
          +    if (conversationState == ConversationState.busy) {
          +      logStateNotifier.logWarning(
          +        "Can't send a message while a conversation is in progress",
          +      );
          +      throw Exception(
          +        "Can't send a message while a conversation is in progress",
          +      );
          +    }
          +    final conversationStateNotifier = ref.read(
          +      conversationStateProvider.notifier,
          +    );
          +    conversationStateNotifier.state = ConversationState.busy;
               chatStateNotifier.addUserMessage(message);
               logStateNotifier.logUserText(message);
               final llmMessage = chatStateNotifier.createLlmMessage();
               try {
          -      final response = await chatSession.sendMessage(Content.text(message));
          -
          -      final responseText = response.text;
          -      if (responseText != null) {
          -        logStateNotifier.logLlmText(responseText);
          -        chatStateNotifier.appendToMessage(llmMessage.id, responseText);
          -      }
          -
          -      if (response.functionCalls.isNotEmpty) {
          -        final geminiTools = ref.read(geminiToolsProvider);
          -        final functionResultResponse = await chatSession.sendMessage(
          -          Content.functionResponses([
          -            for (final functionCall in response.functionCalls)
          -              FunctionResponse(
          -                functionCall.name,
          -                geminiTools.handleFunctionCall(
          -                  functionCall.name,
          -                  functionCall.args,
          -                ),
          -              ),
          -          ]),
          -        );
          -        final responseText = functionResultResponse.text;
          -        if (responseText != null) {
          -          logStateNotifier.logLlmText(responseText);
          -          chatStateNotifier.appendToMessage(llmMessage.id, responseText);
          -        }
          +      final responseStream = chatSession.sendMessageStream(
          +        Content.text(message),
          +      );
          +      await for (final block in responseStream) {
          +        await _processBlock(block, llmMessage.id);
                 }
               } catch (e, st) {
                 logStateNotifier.logError(e, st: st);
          @@ -64,6 +59,45 @@ class GeminiChatService {
                 );
               } finally {
                 chatStateNotifier.finalizeMessage(llmMessage.id);
          +      conversationStateNotifier.state = ConversationState.idle;
          +    }
          +  }
          +
          +  Future<void> _processBlock(
          +    GenerateContentResponse block,
          +    String llmMessageId,
          +  ) async {
          +    final chatSession = await ref.read(chatSessionProvider.future);
          +    final chatStateNotifier = ref.read(chatStateNotifierProvider.notifier);
          +    final logStateNotifier = ref.read(logStateNotifierProvider.notifier);
          +    final blockText = block.text;
          +
          +    if (blockText != null) {
          +      logStateNotifier.logLlmText(blockText);
          +      chatStateNotifier.appendToMessage(llmMessageId, blockText);
          +    }
          +
          +    if (block.functionCalls.isNotEmpty) {
          +      final geminiTools = ref.read(geminiToolsProvider);
          +      final responseStream = chatSession.sendMessageStream(
          +        Content.functionResponses([
          +          for (final functionCall in block.functionCalls)
          +            FunctionResponse(
          +              functionCall.name,
          +              geminiTools.handleFunctionCall(
          +                functionCall.name,
          +                functionCall.args,
          +              ),
          +            ),
          +        ]),
          +      );
          +      await for (final response in responseStream) {
          +        final responseText = response.text;
          +        if (responseText != null) {
          +          logStateNotifier.logLlmText(responseText);
          +          chatStateNotifier.appendToMessage(llmMessageId, responseText);
          +        }
          +      }
               }
             }
           }
      - name: Patch lib/main.dart
        path: colorist/lib/main.dart
        patch-u: |
          --- b/colorist/step_06/lib/main.dart
          +++ a/colorist/step_06/lib/main.dart
          @@ -19,6 +19,7 @@ class MainApp extends ConsumerWidget {
             @override
             Widget build(BuildContext context, WidgetRef ref) {
               final model = ref.watch(geminiModelProvider);
          +    final conversationState = ref.watch(conversationStateProvider);

               return MaterialApp(
                 theme: ThemeData(
          @@ -27,6 +28,7 @@ class MainApp extends ConsumerWidget {
                 home: model.when(
                   data:
                       (data) => MainScreen(
          +              conversationState: conversationState,
                         sendMessage: (text) {
                           ref.read(geminiChatServiceProvider).sendMessage(text);
                         },
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_06
        copydir:
          from: colorist
          to: step_06
      - name: Flutter clean
        path: step_06
        flutter: clean
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Patch lib/services/gemini_chat_service.dart
        path: colorist/lib/services/gemini_chat_service.dart
        patch-u: |
          --- b/colorist/step_07/lib/services/gemini_chat_service.dart
          +++ a/colorist/step_07/lib/services/gemini_chat_service.dart
          @@ -3,6 +3,7 @@
           // found in the LICENSE file.

           import 'dart:async';
          +import 'dart:convert';

           import 'package:colorist_ui/colorist_ui.dart';
           import 'package:firebase_vertexai/firebase_vertexai.dart';
          @@ -22,6 +23,10 @@ class GeminiChatService {
             GeminiChatService(this.ref);
             final Ref ref;

          +  Future<void> notifyColorSelection(ColorData color) => sendMessage(
          +    'User selected color from history: ${json.encode(color.toLLMContextMap())}',
          +  );
          +
             Future<void> sendMessage(String message) async {
               final chatSession = await ref.read(chatSessionProvider.future);
               final conversationState = ref.read(conversationStateProvider);
      - name: Patch lib/main.dart
        path: colorist/lib/main.dart
        patch-u: |
          --- b/colorist/step_07/lib/main.dart
          +++ a/colorist/step_07/lib/main.dart
          @@ -29,6 +29,9 @@ class MainApp extends ConsumerWidget {
                   data:
                       (data) => MainScreen(
                         conversationState: conversationState,
          +              notifyColorSelection: (color) {
          +                ref.read(geminiChatServiceProvider).notifyColorSelection(color);
          +              },
                         sendMessage: (text) {
                           ref.read(geminiChatServiceProvider).sendMessage(text);
                         },
      - name: Patch assets/system_prompt.md
        path: colorist/assets/system_prompt.md
        patch-u: |
          --- b/colorist/step_07/assets/system_prompt.md
          +++ a/colorist/step_07/assets/system_prompt.md
          @@ -29,6 +29,14 @@ After the tool call: "I've set a warm orange with strong red, moderate green, an

           If a color description is ambiguous or unclear, please ask the user clarifying questions, one at a time.

          +## When Users Select Historical Colors
          +
          +Sometimes, the user will manually select a color from the history panel. When this happens, you'll receive a notification about this selection that includes details about the color. Acknowledge this selection with a brief response that recognizes what they've done and comments on the selected color.
          +
          +Example notification:
          +User: "User selected color from history: {red: 0.2, green: 0.5, blue: 0.8, hexCode: #3380CC}"
          +You: "I see you've selected an ocean blue from your history. This tranquil blue with a moderate intensity has a calming, professional quality to it. Would you like to explore similar shades or create a contrasting color?"
          +
           ## Important Guidelines

           - Always keep RGB values between 0.0 and 1.0
      - name: Run build_runner
        path: colorist
        dart: run build_runner build --delete-conflicting-outputs
      - name: Upgrade deps
        path: colorist
        flutter: pub upgrade --major-versions
      - name: Build iOS simulator bundle
        platforms: [macos]
        path: colorist
        flutter: build ios --simulator
      - name: Build Android app
        path: colorist
        flutter: build apk
      - name: Build macOS app
        platforms: [macos]
        path: colorist
        flutter: build macos
      - name: Build Windows app
        platforms: [windows]
        path: colorist
        flutter: build windows
      - name: Copy step_07
        copydir:
          from: colorist
          to: step_07
      - name: Flutter clean
        path: step_07
        flutter: clean
  - name: Cleanup
    rmdir: colorist
