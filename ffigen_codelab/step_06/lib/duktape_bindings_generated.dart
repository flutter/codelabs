// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/duktape.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class DuktapeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DuktapeBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DuktapeBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Context management
  ffi.Pointer<duk_context> duk_create_heap(
    duk_alloc_function alloc_func,
    duk_realloc_function realloc_func,
    duk_free_function free_func,
    ffi.Pointer<ffi.Void> heap_udata,
    duk_fatal_function fatal_handler,
  ) {
    return _duk_create_heap(
      alloc_func,
      realloc_func,
      free_func,
      heap_udata,
      fatal_handler,
    );
  }

  late final _duk_create_heapPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<duk_context> Function(
        duk_alloc_function,
        duk_realloc_function,
        duk_free_function,
        ffi.Pointer<ffi.Void>,
        duk_fatal_function,
      )
    >
  >('duk_create_heap');
  late final _duk_create_heap =
      _duk_create_heapPtr
          .asFunction<
            ffi.Pointer<duk_context> Function(
              duk_alloc_function,
              duk_realloc_function,
              duk_free_function,
              ffi.Pointer<ffi.Void>,
              duk_fatal_function,
            )
          >();

  void duk_destroy_heap(ffi.Pointer<duk_context> ctx) {
    return _duk_destroy_heap(ctx);
  }

  late final _duk_destroy_heapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_destroy_heap',
      );
  late final _duk_destroy_heap =
      _duk_destroy_heapPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_suspend(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<duk_thread_state> state,
  ) {
    return _duk_suspend(ctx, state);
  }

  late final _duk_suspendPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<duk_thread_state>)
    >
  >('duk_suspend');
  late final _duk_suspend =
      _duk_suspendPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<duk_thread_state>,
            )
          >();

  void duk_resume(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<duk_thread_state> state,
  ) {
    return _duk_resume(ctx, state);
  }

  late final _duk_resumePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<duk_thread_state>)
    >
  >('duk_resume');
  late final _duk_resume =
      _duk_resumePtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<duk_thread_state>,
            )
          >();

  /// Memory management
  ///
  /// Raw functions have no side effects (cannot trigger GC).
  ffi.Pointer<ffi.Void> duk_alloc_raw(ffi.Pointer<duk_context> ctx, int size) {
    return _duk_alloc_raw(ctx, size);
  }

  late final _duk_alloc_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_size_t)
    >
  >('duk_alloc_raw');
  late final _duk_alloc_raw =
      _duk_alloc_rawPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_free_raw(ffi.Pointer<duk_context> ctx, ffi.Pointer<ffi.Void> ptr) {
    return _duk_free_raw(ctx, ptr);
  }

  late final _duk_free_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_free_raw');
  late final _duk_free_raw =
      _duk_free_rawPtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  ffi.Pointer<ffi.Void> duk_realloc_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _duk_realloc_raw(ctx, ptr, size);
  }

  late final _duk_realloc_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_realloc_raw');
  late final _duk_realloc_raw =
      _duk_realloc_rawPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_alloc(ffi.Pointer<duk_context> ctx, int size) {
    return _duk_alloc(ctx, size);
  }

  late final _duk_allocPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_size_t)
    >
  >('duk_alloc');
  late final _duk_alloc =
      _duk_allocPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_free(ffi.Pointer<duk_context> ctx, ffi.Pointer<ffi.Void> ptr) {
    return _duk_free(ctx, ptr);
  }

  late final _duk_freePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_free');
  late final _duk_free =
      _duk_freePtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  ffi.Pointer<ffi.Void> duk_realloc(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _duk_realloc(ctx, ptr, size);
  }

  late final _duk_reallocPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_realloc');
  late final _duk_realloc =
      _duk_reallocPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  void duk_get_memory_functions(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<duk_memory_functions> out_funcs,
  ) {
    return _duk_get_memory_functions(ctx, out_funcs);
  }

  late final _duk_get_memory_functionsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<duk_memory_functions>,
      )
    >
  >('duk_get_memory_functions');
  late final _duk_get_memory_functions =
      _duk_get_memory_functionsPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<duk_memory_functions>,
            )
          >();

  void duk_gc(ffi.Pointer<duk_context> ctx, int flags) {
    return _duk_gc(ctx, flags);
  }

  late final _duk_gcPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_uint_t)>
  >('duk_gc');
  late final _duk_gc =
      _duk_gcPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_throw_raw(ffi.Pointer<duk_context> ctx) {
    return _duk_throw_raw(ctx);
  }

  late final _duk_throw_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_throw_raw',
      );
  late final _duk_throw_raw =
      _duk_throw_rawPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_fatal_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> err_msg,
  ) {
    return _duk_fatal_raw(ctx, err_msg);
  }

  late final _duk_fatal_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
    >
  >('duk_fatal_raw');
  late final _duk_fatal_raw =
      _duk_fatal_rawPtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
          >();

  void duk_error_raw(
    ffi.Pointer<duk_context> ctx,
    int err_code,
    ffi.Pointer<ffi.Char> filename,
    int line,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _duk_error_raw(ctx, err_code, filename, line, fmt);
  }

  late final _duk_error_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_errcode_t,
        ffi.Pointer<ffi.Char>,
        duk_int_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_error_raw');
  late final _duk_error_raw =
      _duk_error_rawPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  void duk_error_va_raw(
    ffi.Pointer<duk_context> ctx,
    int err_code,
    ffi.Pointer<ffi.Char> filename,
    int line,
    ffi.Pointer<ffi.Char> fmt,
    va_list ap,
  ) {
    return _duk_error_va_raw(ctx, err_code, filename, line, fmt, ap);
  }

  late final _duk_error_va_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_errcode_t,
        ffi.Pointer<ffi.Char>,
        duk_int_t,
        ffi.Pointer<ffi.Char>,
        va_list,
      )
    >
  >('duk_error_va_raw');
  late final _duk_error_va_raw =
      _duk_error_va_rawPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              va_list,
            )
          >();

  /// Other state related functions
  int duk_is_strict_call(ffi.Pointer<duk_context> ctx) {
    return _duk_is_strict_call(ctx);
  }

  late final _duk_is_strict_callPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>)>
  >('duk_is_strict_call');
  late final _duk_is_strict_call =
      _duk_is_strict_callPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_is_constructor_call(ffi.Pointer<duk_context> ctx) {
    return _duk_is_constructor_call(ctx);
  }

  late final _duk_is_constructor_callPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>)>
  >('duk_is_constructor_call');
  late final _duk_is_constructor_call =
      _duk_is_constructor_callPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  /// Stack management
  int duk_normalize_index(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_normalize_index(ctx, idx);
  }

  late final _duk_normalize_indexPtr = _lookup<
    ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_normalize_index');
  late final _duk_normalize_index =
      _duk_normalize_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_require_normalize_index(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_normalize_index(ctx, idx);
  }

  late final _duk_require_normalize_indexPtr = _lookup<
    ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_normalize_index');
  late final _duk_require_normalize_index =
      _duk_require_normalize_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_valid_index(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_valid_index(ctx, idx);
  }

  late final _duk_is_valid_indexPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_valid_index');
  late final _duk_is_valid_index =
      _duk_is_valid_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_require_valid_index(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_valid_index(ctx, idx);
  }

  late final _duk_require_valid_indexPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_valid_index');
  late final _duk_require_valid_index =
      _duk_require_valid_indexPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_top(ffi.Pointer<duk_context> ctx) {
    return _duk_get_top(ctx);
  }

  late final _duk_get_topPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_get_top',
      );
  late final _duk_get_top =
      _duk_get_topPtr.asFunction<int Function(ffi.Pointer<duk_context>)>();

  void duk_set_top(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_set_top(ctx, idx);
  }

  late final _duk_set_topPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_set_top');
  late final _duk_set_top =
      _duk_set_topPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_top_index(ffi.Pointer<duk_context> ctx) {
    return _duk_get_top_index(ctx);
  }

  late final _duk_get_top_indexPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_get_top_index',
      );
  late final _duk_get_top_index =
      _duk_get_top_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_require_top_index(ffi.Pointer<duk_context> ctx) {
    return _duk_require_top_index(ctx);
  }

  late final _duk_require_top_indexPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_require_top_index',
      );
  late final _duk_require_top_index =
      _duk_require_top_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  /// Although extra/top could be an unsigned type here, using a signed type
  /// makes the API more robust to calling code calculation errors or corner
  /// cases (where caller might occasionally come up with negative values).
  /// Negative values are treated as zero, which is better than casting them
  /// to a large unsigned number.  (This principle is used elsewhere in the
  /// API too.)
  int duk_check_stack(ffi.Pointer<duk_context> ctx, int extra) {
    return _duk_check_stack(ctx, extra);
  }

  late final _duk_check_stackPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_check_stack');
  late final _duk_check_stack =
      _duk_check_stackPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_require_stack(ffi.Pointer<duk_context> ctx, int extra) {
    return _duk_require_stack(ctx, extra);
  }

  late final _duk_require_stackPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_stack');
  late final _duk_require_stack =
      _duk_require_stackPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_check_stack_top(ffi.Pointer<duk_context> ctx, int top) {
    return _duk_check_stack_top(ctx, top);
  }

  late final _duk_check_stack_topPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_check_stack_top');
  late final _duk_check_stack_top =
      _duk_check_stack_topPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_require_stack_top(ffi.Pointer<duk_context> ctx, int top) {
    return _duk_require_stack_top(ctx, top);
  }

  late final _duk_require_stack_topPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_stack_top');
  late final _duk_require_stack_top =
      _duk_require_stack_topPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  /// Stack manipulation (other than push/pop)
  void duk_swap(ffi.Pointer<duk_context> ctx, int idx1, int idx2) {
    return _duk_swap(ctx, idx1, idx2);
  }

  late final _duk_swapPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_swap');
  late final _duk_swap =
      _duk_swapPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_swap_top(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_swap_top(ctx, idx);
  }

  late final _duk_swap_topPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_swap_top');
  late final _duk_swap_top =
      _duk_swap_topPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_dup(ffi.Pointer<duk_context> ctx, int from_idx) {
    return _duk_dup(ctx, from_idx);
  }

  late final _duk_dupPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_dup');
  late final _duk_dup =
      _duk_dupPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_dup_top(ffi.Pointer<duk_context> ctx) {
    return _duk_dup_top(ctx);
  }

  late final _duk_dup_topPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_dup_top',
      );
  late final _duk_dup_top =
      _duk_dup_topPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_insert(ffi.Pointer<duk_context> ctx, int to_idx) {
    return _duk_insert(ctx, to_idx);
  }

  late final _duk_insertPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_insert');
  late final _duk_insert =
      _duk_insertPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_pull(ffi.Pointer<duk_context> ctx, int from_idx) {
    return _duk_pull(ctx, from_idx);
  }

  late final _duk_pullPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_pull');
  late final _duk_pull =
      _duk_pullPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_replace(ffi.Pointer<duk_context> ctx, int to_idx) {
    return _duk_replace(ctx, to_idx);
  }

  late final _duk_replacePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_replace');
  late final _duk_replace =
      _duk_replacePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_copy(ffi.Pointer<duk_context> ctx, int from_idx, int to_idx) {
    return _duk_copy(ctx, from_idx, to_idx);
  }

  late final _duk_copyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_copy');
  late final _duk_copy =
      _duk_copyPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_remove(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_remove(ctx, idx);
  }

  late final _duk_removePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_remove');
  late final _duk_remove =
      _duk_removePtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_xcopymove_raw(
    ffi.Pointer<duk_context> to_ctx,
    ffi.Pointer<duk_context> from_ctx,
    int count,
    int is_copy,
  ) {
    return _duk_xcopymove_raw(to_ctx, from_ctx, count, is_copy);
  }

  late final _duk_xcopymove_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_bool_t,
      )
    >
  >('duk_xcopymove_raw');
  late final _duk_xcopymove_raw =
      _duk_xcopymove_rawPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<duk_context>,
              int,
              int,
            )
          >();

  /// Push operations
  ///
  /// Push functions return the absolute (relative to bottom of frame)
  /// position of the pushed value for convenience.
  ///
  /// Note: duk_dup() is technically a push.
  void duk_push_undefined(ffi.Pointer<duk_context> ctx) {
    return _duk_push_undefined(ctx);
  }

  late final _duk_push_undefinedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_undefined',
      );
  late final _duk_push_undefined =
      _duk_push_undefinedPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_null(ffi.Pointer<duk_context> ctx) {
    return _duk_push_null(ctx);
  }

  late final _duk_push_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_null',
      );
  late final _duk_push_null =
      _duk_push_nullPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_boolean(ffi.Pointer<duk_context> ctx, int val) {
    return _duk_push_boolean(ctx, val);
  }

  late final _duk_push_booleanPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_bool_t)>
  >('duk_push_boolean');
  late final _duk_push_boolean =
      _duk_push_booleanPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_push_true(ffi.Pointer<duk_context> ctx) {
    return _duk_push_true(ctx);
  }

  late final _duk_push_truePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_true',
      );
  late final _duk_push_true =
      _duk_push_truePtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_false(ffi.Pointer<duk_context> ctx) {
    return _duk_push_false(ctx);
  }

  late final _duk_push_falsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_false',
      );
  late final _duk_push_false =
      _duk_push_falsePtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_number(ffi.Pointer<duk_context> ctx, double val) {
    return _duk_push_number(ctx, val);
  }

  late final _duk_push_numberPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_double_t)
    >
  >('duk_push_number');
  late final _duk_push_number =
      _duk_push_numberPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, double)>();

  void duk_push_nan(ffi.Pointer<duk_context> ctx) {
    return _duk_push_nan(ctx);
  }

  late final _duk_push_nanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_nan',
      );
  late final _duk_push_nan =
      _duk_push_nanPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_int(ffi.Pointer<duk_context> ctx, int val) {
    return _duk_push_int(ctx, val);
  }

  late final _duk_push_intPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_int_t)>
  >('duk_push_int');
  late final _duk_push_int =
      _duk_push_intPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_push_uint(ffi.Pointer<duk_context> ctx, int val) {
    return _duk_push_uint(ctx, val);
  }

  late final _duk_push_uintPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_uint_t)>
  >('duk_push_uint');
  late final _duk_push_uint =
      _duk_push_uintPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_push_string(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _duk_push_string(ctx, str);
  }

  late final _duk_push_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_push_string');
  late final _duk_push_string =
      _duk_push_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  ffi.Pointer<ffi.Char> duk_push_lstring(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _duk_push_lstring(ctx, str, len);
  }

  late final _duk_push_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_push_lstring');
  late final _duk_push_lstring =
      _duk_push_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  void duk_push_pointer(ffi.Pointer<duk_context> ctx, ffi.Pointer<ffi.Void> p) {
    return _duk_push_pointer(ctx, p);
  }

  late final _duk_push_pointerPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_push_pointer');
  late final _duk_push_pointer =
      _duk_push_pointerPtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  ffi.Pointer<ffi.Char> duk_push_sprintf(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _duk_push_sprintf(ctx, fmt);
  }

  late final _duk_push_sprintfPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_push_sprintf');
  late final _duk_push_sprintf =
      _duk_push_sprintfPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  ffi.Pointer<ffi.Char> duk_push_vsprintf(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> fmt,
    va_list ap,
  ) {
    return _duk_push_vsprintf(ctx, fmt, ap);
  }

  late final _duk_push_vsprintfPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        va_list,
      )
    >
  >('duk_push_vsprintf');
  late final _duk_push_vsprintf =
      _duk_push_vsprintfPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
              va_list,
            )
          >();

  ffi.Pointer<ffi.Char> duk_push_literal_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _duk_push_literal_raw(ctx, str, len);
  }

  late final _duk_push_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_push_literal_raw');
  late final _duk_push_literal_raw =
      _duk_push_literal_rawPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  void duk_push_this(ffi.Pointer<duk_context> ctx) {
    return _duk_push_this(ctx);
  }

  late final _duk_push_thisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_this',
      );
  late final _duk_push_this =
      _duk_push_thisPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_new_target(ffi.Pointer<duk_context> ctx) {
    return _duk_push_new_target(ctx);
  }

  late final _duk_push_new_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_new_target',
      );
  late final _duk_push_new_target =
      _duk_push_new_targetPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_current_function(ffi.Pointer<duk_context> ctx) {
    return _duk_push_current_function(ctx);
  }

  late final _duk_push_current_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_current_function',
      );
  late final _duk_push_current_function =
      _duk_push_current_functionPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_current_thread(ffi.Pointer<duk_context> ctx) {
    return _duk_push_current_thread(ctx);
  }

  late final _duk_push_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_current_thread',
      );
  late final _duk_push_current_thread =
      _duk_push_current_threadPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_global_object(ffi.Pointer<duk_context> ctx) {
    return _duk_push_global_object(ctx);
  }

  late final _duk_push_global_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_global_object',
      );
  late final _duk_push_global_object =
      _duk_push_global_objectPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_heap_stash(ffi.Pointer<duk_context> ctx) {
    return _duk_push_heap_stash(ctx);
  }

  late final _duk_push_heap_stashPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_heap_stash',
      );
  late final _duk_push_heap_stash =
      _duk_push_heap_stashPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_global_stash(ffi.Pointer<duk_context> ctx) {
    return _duk_push_global_stash(ctx);
  }

  late final _duk_push_global_stashPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_global_stash',
      );
  late final _duk_push_global_stash =
      _duk_push_global_stashPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_push_thread_stash(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<duk_context> target_ctx,
  ) {
    return _duk_push_thread_stash(ctx, target_ctx);
  }

  late final _duk_push_thread_stashPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, ffi.Pointer<duk_context>)
    >
  >('duk_push_thread_stash');
  late final _duk_push_thread_stash =
      _duk_push_thread_stashPtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, ffi.Pointer<duk_context>)
          >();

  int duk_push_object(ffi.Pointer<duk_context> ctx) {
    return _duk_push_object(ctx);
  }

  late final _duk_push_objectPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_push_object',
      );
  late final _duk_push_object =
      _duk_push_objectPtr.asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_push_bare_object(ffi.Pointer<duk_context> ctx) {
    return _duk_push_bare_object(ctx);
  }

  late final _duk_push_bare_objectPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_push_bare_object',
      );
  late final _duk_push_bare_object =
      _duk_push_bare_objectPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_push_array(ffi.Pointer<duk_context> ctx) {
    return _duk_push_array(ctx);
  }

  late final _duk_push_arrayPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_push_array',
      );
  late final _duk_push_array =
      _duk_push_arrayPtr.asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_push_bare_array(ffi.Pointer<duk_context> ctx) {
    return _duk_push_bare_array(ctx);
  }

  late final _duk_push_bare_arrayPtr =
      _lookup<ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>)>>(
        'duk_push_bare_array',
      );
  late final _duk_push_bare_array =
      _duk_push_bare_arrayPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  int duk_push_c_function(
    ffi.Pointer<duk_context> ctx,
    duk_c_function func,
    int nargs,
  ) {
    return _duk_push_c_function(ctx, func, nargs);
  }

  late final _duk_push_c_functionPtr = _lookup<
    ffi.NativeFunction<
      duk_idx_t Function(ffi.Pointer<duk_context>, duk_c_function, duk_idx_t)
    >
  >('duk_push_c_function');
  late final _duk_push_c_function =
      _duk_push_c_functionPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, duk_c_function, int)
          >();

  int duk_push_c_lightfunc(
    ffi.Pointer<duk_context> ctx,
    duk_c_function func,
    int nargs,
    int length,
    int magic,
  ) {
    return _duk_push_c_lightfunc(ctx, func, nargs, length, magic);
  }

  late final _duk_push_c_lightfuncPtr = _lookup<
    ffi.NativeFunction<
      duk_idx_t Function(
        ffi.Pointer<duk_context>,
        duk_c_function,
        duk_idx_t,
        duk_idx_t,
        duk_int_t,
      )
    >
  >('duk_push_c_lightfunc');
  late final _duk_push_c_lightfunc =
      _duk_push_c_lightfuncPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              duk_c_function,
              int,
              int,
              int,
            )
          >();

  int duk_push_thread_raw(ffi.Pointer<duk_context> ctx, int flags) {
    return _duk_push_thread_raw(ctx, flags);
  }

  late final _duk_push_thread_rawPtr = _lookup<
    ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>, duk_uint_t)>
  >('duk_push_thread_raw');
  late final _duk_push_thread_raw =
      _duk_push_thread_rawPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_push_proxy(ffi.Pointer<duk_context> ctx, int proxy_flags) {
    return _duk_push_proxy(ctx, proxy_flags);
  }

  late final _duk_push_proxyPtr = _lookup<
    ffi.NativeFunction<duk_idx_t Function(ffi.Pointer<duk_context>, duk_uint_t)>
  >('duk_push_proxy');
  late final _duk_push_proxy =
      _duk_push_proxyPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_push_error_object_raw(
    ffi.Pointer<duk_context> ctx,
    int err_code,
    ffi.Pointer<ffi.Char> filename,
    int line,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _duk_push_error_object_raw(ctx, err_code, filename, line, fmt);
  }

  late final _duk_push_error_object_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_idx_t Function(
        ffi.Pointer<duk_context>,
        duk_errcode_t,
        ffi.Pointer<ffi.Char>,
        duk_int_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_push_error_object_raw');
  late final _duk_push_error_object_raw =
      _duk_push_error_object_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  int duk_push_error_object_va_raw(
    ffi.Pointer<duk_context> ctx,
    int err_code,
    ffi.Pointer<ffi.Char> filename,
    int line,
    ffi.Pointer<ffi.Char> fmt,
    va_list ap,
  ) {
    return _duk_push_error_object_va_raw(
      ctx,
      err_code,
      filename,
      line,
      fmt,
      ap,
    );
  }

  late final _duk_push_error_object_va_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_idx_t Function(
        ffi.Pointer<duk_context>,
        duk_errcode_t,
        ffi.Pointer<ffi.Char>,
        duk_int_t,
        ffi.Pointer<ffi.Char>,
        va_list,
      )
    >
  >('duk_push_error_object_va_raw');
  late final _duk_push_error_object_va_raw =
      _duk_push_error_object_va_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              va_list,
            )
          >();

  ffi.Pointer<ffi.Void> duk_push_buffer_raw(
    ffi.Pointer<duk_context> ctx,
    int size,
    int flags,
  ) {
    return _duk_push_buffer_raw(ctx, size, flags);
  }

  late final _duk_push_buffer_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_size_t,
        duk_small_uint_t,
      )
    >
  >('duk_push_buffer_raw');
  late final _duk_push_buffer_raw =
      _duk_push_buffer_rawPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int, int)
          >();

  void duk_push_buffer_object(
    ffi.Pointer<duk_context> ctx,
    int idx_buffer,
    int byte_offset,
    int byte_length,
    int flags,
  ) {
    return _duk_push_buffer_object(
      ctx,
      idx_buffer,
      byte_offset,
      byte_length,
      flags,
    );
  }

  late final _duk_push_buffer_objectPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_size_t,
        duk_size_t,
        duk_uint_t,
      )
    >
  >('duk_push_buffer_object');
  late final _duk_push_buffer_object =
      _duk_push_buffer_objectPtr
          .asFunction<
            void Function(ffi.Pointer<duk_context>, int, int, int, int)
          >();

  int duk_push_heapptr(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_push_heapptr(ctx, ptr);
  }

  late final _duk_push_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_idx_t Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_push_heapptr');
  late final _duk_push_heapptr =
      _duk_push_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  /// Pop operations
  void duk_pop(ffi.Pointer<duk_context> ctx) {
    return _duk_pop(ctx);
  }

  late final _duk_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_pop',
      );
  late final _duk_pop =
      _duk_popPtr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_pop_n(ffi.Pointer<duk_context> ctx, int count) {
    return _duk_pop_n(ctx, count);
  }

  late final _duk_pop_nPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_pop_n');
  late final _duk_pop_n =
      _duk_pop_nPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_pop_2(ffi.Pointer<duk_context> ctx) {
    return _duk_pop_2(ctx);
  }

  late final _duk_pop_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_pop_2',
      );
  late final _duk_pop_2 =
      _duk_pop_2Ptr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_pop_3(ffi.Pointer<duk_context> ctx) {
    return _duk_pop_3(ctx);
  }

  late final _duk_pop_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_pop_3',
      );
  late final _duk_pop_3 =
      _duk_pop_3Ptr.asFunction<void Function(ffi.Pointer<duk_context>)>();

  /// Type checks
  ///
  /// duk_is_none(), which would indicate whether index it outside of stack,
  /// is not needed; duk_is_valid_index() gives the same information.
  int duk_get_type(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_type(ctx, idx);
  }

  late final _duk_get_typePtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_type');
  late final _duk_get_type =
      _duk_get_typePtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_check_type(ffi.Pointer<duk_context> ctx, int idx, int type) {
    return _duk_check_type(ctx, idx, type);
  }

  late final _duk_check_typePtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_int_t)
    >
  >('duk_check_type');
  late final _duk_check_type =
      _duk_check_typePtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_get_type_mask(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_type_mask(ctx, idx);
  }

  late final _duk_get_type_maskPtr = _lookup<
    ffi.NativeFunction<duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_type_mask');
  late final _duk_get_type_mask =
      _duk_get_type_maskPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_check_type_mask(ffi.Pointer<duk_context> ctx, int idx, int mask) {
    return _duk_check_type_mask(ctx, idx, mask);
  }

  late final _duk_check_type_maskPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_check_type_mask');
  late final _duk_check_type_mask =
      _duk_check_type_maskPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_is_undefined(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_undefined(ctx, idx);
  }

  late final _duk_is_undefinedPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_undefined');
  late final _duk_is_undefined =
      _duk_is_undefinedPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_null(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_null(ctx, idx);
  }

  late final _duk_is_nullPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_null');
  late final _duk_is_null =
      _duk_is_nullPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_boolean(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_boolean(ctx, idx);
  }

  late final _duk_is_booleanPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_boolean');
  late final _duk_is_boolean =
      _duk_is_booleanPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_number(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_number(ctx, idx);
  }

  late final _duk_is_numberPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_number');
  late final _duk_is_number =
      _duk_is_numberPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_nan(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_nan(ctx, idx);
  }

  late final _duk_is_nanPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_nan');
  late final _duk_is_nan =
      _duk_is_nanPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_string(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_string(ctx, idx);
  }

  late final _duk_is_stringPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_string');
  late final _duk_is_string =
      _duk_is_stringPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_object(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_object(ctx, idx);
  }

  late final _duk_is_objectPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_object');
  late final _duk_is_object =
      _duk_is_objectPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_buffer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_buffer(ctx, idx);
  }

  late final _duk_is_bufferPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_buffer');
  late final _duk_is_buffer =
      _duk_is_bufferPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_buffer_data(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_buffer_data(ctx, idx);
  }

  late final _duk_is_buffer_dataPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_buffer_data');
  late final _duk_is_buffer_data =
      _duk_is_buffer_dataPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_pointer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_pointer(ctx, idx);
  }

  late final _duk_is_pointerPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_pointer');
  late final _duk_is_pointer =
      _duk_is_pointerPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_lightfunc(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_lightfunc(ctx, idx);
  }

  late final _duk_is_lightfuncPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_lightfunc');
  late final _duk_is_lightfunc =
      _duk_is_lightfuncPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_symbol(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_symbol(ctx, idx);
  }

  late final _duk_is_symbolPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_symbol');
  late final _duk_is_symbol =
      _duk_is_symbolPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_array(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_array(ctx, idx);
  }

  late final _duk_is_arrayPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_array');
  late final _duk_is_array =
      _duk_is_arrayPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_function(ctx, idx);
  }

  late final _duk_is_functionPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_function');
  late final _duk_is_function =
      _duk_is_functionPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_c_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_c_function(ctx, idx);
  }

  late final _duk_is_c_functionPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_c_function');
  late final _duk_is_c_function =
      _duk_is_c_functionPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_ecmascript_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_ecmascript_function(ctx, idx);
  }

  late final _duk_is_ecmascript_functionPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_ecmascript_function');
  late final _duk_is_ecmascript_function =
      _duk_is_ecmascript_functionPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_bound_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_bound_function(ctx, idx);
  }

  late final _duk_is_bound_functionPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_bound_function');
  late final _duk_is_bound_function =
      _duk_is_bound_functionPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_thread(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_thread(ctx, idx);
  }

  late final _duk_is_threadPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_thread');
  late final _duk_is_thread =
      _duk_is_threadPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_constructable(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_constructable(ctx, idx);
  }

  late final _duk_is_constructablePtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_constructable');
  late final _duk_is_constructable =
      _duk_is_constructablePtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_dynamic_buffer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_dynamic_buffer(ctx, idx);
  }

  late final _duk_is_dynamic_bufferPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_dynamic_buffer');
  late final _duk_is_dynamic_buffer =
      _duk_is_dynamic_bufferPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_fixed_buffer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_fixed_buffer(ctx, idx);
  }

  late final _duk_is_fixed_bufferPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_fixed_buffer');
  late final _duk_is_fixed_buffer =
      _duk_is_fixed_bufferPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_is_external_buffer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_is_external_buffer(ctx, idx);
  }

  late final _duk_is_external_bufferPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_is_external_buffer');
  late final _duk_is_external_buffer =
      _duk_is_external_bufferPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_error_code(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_error_code(ctx, idx);
  }

  late final _duk_get_error_codePtr = _lookup<
    ffi.NativeFunction<
      duk_errcode_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_error_code');
  late final _duk_get_error_code =
      _duk_get_error_codePtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  /// Get operations: no coercion, returns default value for invalid
  /// indices and invalid value types.
  ///
  /// duk_get_undefined() and duk_get_null() would be pointless and
  /// are not included.
  int duk_get_boolean(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_boolean(ctx, idx);
  }

  late final _duk_get_booleanPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_boolean');
  late final _duk_get_boolean =
      _duk_get_booleanPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  double duk_get_number(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_number(ctx, idx);
  }

  late final _duk_get_numberPtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_number');
  late final _duk_get_number =
      _duk_get_numberPtr
          .asFunction<double Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_int(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_int(ctx, idx);
  }

  late final _duk_get_intPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_int');
  late final _duk_get_int =
      _duk_get_intPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_uint(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_uint(ctx, idx);
  }

  late final _duk_get_uintPtr = _lookup<
    ffi.NativeFunction<duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_uint');
  late final _duk_get_uint =
      _duk_get_uintPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_get_string(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_string(ctx, idx);
  }

  late final _duk_get_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_string');
  late final _duk_get_string =
      _duk_get_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  ffi.Pointer<ffi.Char> duk_get_lstring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
  ) {
    return _duk_get_lstring(ctx, idx, out_len);
  }

  late final _duk_get_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_get_lstring');
  late final _duk_get_lstring =
      _duk_get_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
  ) {
    return _duk_get_buffer(ctx, idx, out_size);
  }

  late final _duk_get_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_get_buffer');
  late final _duk_get_buffer =
      _duk_get_bufferPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_buffer_data(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
  ) {
    return _duk_get_buffer_data(ctx, idx, out_size);
  }

  late final _duk_get_buffer_dataPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_get_buffer_data');
  late final _duk_get_buffer_data =
      _duk_get_buffer_dataPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_pointer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_pointer(ctx, idx);
  }

  late final _duk_get_pointerPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_pointer');
  late final _duk_get_pointer =
      _duk_get_pointerPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  duk_c_function duk_get_c_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_c_function(ctx, idx);
  }

  late final _duk_get_c_functionPtr = _lookup<
    ffi.NativeFunction<
      duk_c_function Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_c_function');
  late final _duk_get_c_function =
      _duk_get_c_functionPtr
          .asFunction<duk_c_function Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<duk_context> duk_get_context(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_get_context(ctx, idx);
  }

  late final _duk_get_contextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<duk_context> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_context');
  late final _duk_get_context =
      _duk_get_contextPtr
          .asFunction<
            ffi.Pointer<duk_context> Function(ffi.Pointer<duk_context>, int)
          >();

  ffi.Pointer<ffi.Void> duk_get_heapptr(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_heapptr(ctx, idx);
  }

  late final _duk_get_heapptrPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_get_heapptr');
  late final _duk_get_heapptr =
      _duk_get_heapptrPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  /// Get-with-explicit default operations: like get operations but with an
  /// explicit default value.
  int duk_get_boolean_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int def_value,
  ) {
    return _duk_get_boolean_default(ctx, idx, def_value);
  }

  late final _duk_get_boolean_defaultPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_bool_t)
    >
  >('duk_get_boolean_default');
  late final _duk_get_boolean_default =
      _duk_get_boolean_defaultPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  double duk_get_number_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    double def_value,
  ) {
    return _duk_get_number_default(ctx, idx, def_value);
  }

  late final _duk_get_number_defaultPtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_double_t)
    >
  >('duk_get_number_default');
  late final _duk_get_number_default =
      _duk_get_number_defaultPtr
          .asFunction<double Function(ffi.Pointer<duk_context>, int, double)>();

  int duk_get_int_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int def_value,
  ) {
    return _duk_get_int_default(ctx, idx, def_value);
  }

  late final _duk_get_int_defaultPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_int_t)
    >
  >('duk_get_int_default');
  late final _duk_get_int_default =
      _duk_get_int_defaultPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_get_uint_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int def_value,
  ) {
    return _duk_get_uint_default(ctx, idx, def_value);
  }

  late final _duk_get_uint_defaultPtr = _lookup<
    ffi.NativeFunction<
      duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_get_uint_default');
  late final _duk_get_uint_default =
      _duk_get_uint_defaultPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  ffi.Pointer<ffi.Char> duk_get_string_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Char> def_value,
  ) {
    return _duk_get_string_default(ctx, idx, def_value);
  }

  late final _duk_get_string_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_get_string_default');
  late final _duk_get_string_default =
      _duk_get_string_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  ffi.Pointer<ffi.Char> duk_get_lstring_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
    ffi.Pointer<ffi.Char> def_ptr,
    int def_len,
  ) {
    return _duk_get_lstring_default(ctx, idx, out_len, def_ptr, def_len);
  }

  late final _duk_get_lstring_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_get_lstring_default');
  late final _duk_get_lstring_default =
      _duk_get_lstring_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_buffer_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
    ffi.Pointer<ffi.Void> def_ptr,
    int def_len,
  ) {
    return _duk_get_buffer_default(ctx, idx, out_size, def_ptr, def_len);
  }

  late final _duk_get_buffer_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_get_buffer_default');
  late final _duk_get_buffer_default =
      _duk_get_buffer_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_buffer_data_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
    ffi.Pointer<ffi.Void> def_ptr,
    int def_len,
  ) {
    return _duk_get_buffer_data_default(ctx, idx, out_size, def_ptr, def_len);
  }

  late final _duk_get_buffer_data_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_get_buffer_data_default');
  late final _duk_get_buffer_data_default =
      _duk_get_buffer_data_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_pointer_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Void> def_value,
  ) {
    return _duk_get_pointer_default(ctx, idx, def_value);
  }

  late final _duk_get_pointer_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_get_pointer_default');
  late final _duk_get_pointer_default =
      _duk_get_pointer_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  duk_c_function duk_get_c_function_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    duk_c_function def_value,
  ) {
    return _duk_get_c_function_default(ctx, idx, def_value);
  }

  late final _duk_get_c_function_defaultPtr = _lookup<
    ffi.NativeFunction<
      duk_c_function Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_c_function,
      )
    >
  >('duk_get_c_function_default');
  late final _duk_get_c_function_default =
      _duk_get_c_function_defaultPtr
          .asFunction<
            duk_c_function Function(
              ffi.Pointer<duk_context>,
              int,
              duk_c_function,
            )
          >();

  ffi.Pointer<duk_context> duk_get_context_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_context> def_value,
  ) {
    return _duk_get_context_default(ctx, idx, def_value);
  }

  late final _duk_get_context_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<duk_context> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_context>,
      )
    >
  >('duk_get_context_default');
  late final _duk_get_context_default =
      _duk_get_context_defaultPtr
          .asFunction<
            ffi.Pointer<duk_context> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_context>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_get_heapptr_default(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Void> def_value,
  ) {
    return _duk_get_heapptr_default(ctx, idx, def_value);
  }

  late final _duk_get_heapptr_defaultPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_get_heapptr_default');
  late final _duk_get_heapptr_default =
      _duk_get_heapptr_defaultPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  /// Opt operations: like require operations but with an explicit default value
  /// when value is undefined or index is invalid, null and non-matching types
  /// cause a TypeError.
  int duk_opt_boolean(ffi.Pointer<duk_context> ctx, int idx, int def_value) {
    return _duk_opt_boolean(ctx, idx, def_value);
  }

  late final _duk_opt_booleanPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_bool_t)
    >
  >('duk_opt_boolean');
  late final _duk_opt_boolean =
      _duk_opt_booleanPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  double duk_opt_number(
    ffi.Pointer<duk_context> ctx,
    int idx,
    double def_value,
  ) {
    return _duk_opt_number(ctx, idx, def_value);
  }

  late final _duk_opt_numberPtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_double_t)
    >
  >('duk_opt_number');
  late final _duk_opt_number =
      _duk_opt_numberPtr
          .asFunction<double Function(ffi.Pointer<duk_context>, int, double)>();

  int duk_opt_int(ffi.Pointer<duk_context> ctx, int idx, int def_value) {
    return _duk_opt_int(ctx, idx, def_value);
  }

  late final _duk_opt_intPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_int_t)
    >
  >('duk_opt_int');
  late final _duk_opt_int =
      _duk_opt_intPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_opt_uint(ffi.Pointer<duk_context> ctx, int idx, int def_value) {
    return _duk_opt_uint(ctx, idx, def_value);
  }

  late final _duk_opt_uintPtr = _lookup<
    ffi.NativeFunction<
      duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_opt_uint');
  late final _duk_opt_uint =
      _duk_opt_uintPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  ffi.Pointer<ffi.Char> duk_opt_string(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Char> def_ptr,
  ) {
    return _duk_opt_string(ctx, idx, def_ptr);
  }

  late final _duk_opt_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_opt_string');
  late final _duk_opt_string =
      _duk_opt_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  ffi.Pointer<ffi.Char> duk_opt_lstring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
    ffi.Pointer<ffi.Char> def_ptr,
    int def_len,
  ) {
    return _duk_opt_lstring(ctx, idx, out_len, def_ptr, def_len);
  }

  late final _duk_opt_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_opt_lstring');
  late final _duk_opt_lstring =
      _duk_opt_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_opt_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
    ffi.Pointer<ffi.Void> def_ptr,
    int def_size,
  ) {
    return _duk_opt_buffer(ctx, idx, out_size, def_ptr, def_size);
  }

  late final _duk_opt_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_opt_buffer');
  late final _duk_opt_buffer =
      _duk_opt_bufferPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_opt_buffer_data(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
    ffi.Pointer<ffi.Void> def_ptr,
    int def_size,
  ) {
    return _duk_opt_buffer_data(ctx, idx, out_size, def_ptr, def_size);
  }

  late final _duk_opt_buffer_dataPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_opt_buffer_data');
  late final _duk_opt_buffer_data =
      _duk_opt_buffer_dataPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_opt_pointer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Void> def_value,
  ) {
    return _duk_opt_pointer(ctx, idx, def_value);
  }

  late final _duk_opt_pointerPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_opt_pointer');
  late final _duk_opt_pointer =
      _duk_opt_pointerPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  duk_c_function duk_opt_c_function(
    ffi.Pointer<duk_context> ctx,
    int idx,
    duk_c_function def_value,
  ) {
    return _duk_opt_c_function(ctx, idx, def_value);
  }

  late final _duk_opt_c_functionPtr = _lookup<
    ffi.NativeFunction<
      duk_c_function Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_c_function,
      )
    >
  >('duk_opt_c_function');
  late final _duk_opt_c_function =
      _duk_opt_c_functionPtr
          .asFunction<
            duk_c_function Function(
              ffi.Pointer<duk_context>,
              int,
              duk_c_function,
            )
          >();

  ffi.Pointer<duk_context> duk_opt_context(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_context> def_value,
  ) {
    return _duk_opt_context(ctx, idx, def_value);
  }

  late final _duk_opt_contextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<duk_context> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_context>,
      )
    >
  >('duk_opt_context');
  late final _duk_opt_context =
      _duk_opt_contextPtr
          .asFunction<
            ffi.Pointer<duk_context> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_context>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_opt_heapptr(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Void> def_value,
  ) {
    return _duk_opt_heapptr(ctx, idx, def_value);
  }

  late final _duk_opt_heapptrPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_opt_heapptr');
  late final _duk_opt_heapptr =
      _duk_opt_heapptrPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void duk_require_undefined(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_undefined(ctx, idx);
  }

  late final _duk_require_undefinedPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_undefined');
  late final _duk_require_undefined =
      _duk_require_undefinedPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_require_null(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_null(ctx, idx);
  }

  late final _duk_require_nullPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_null');
  late final _duk_require_null =
      _duk_require_nullPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_require_boolean(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_boolean(ctx, idx);
  }

  late final _duk_require_booleanPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_boolean');
  late final _duk_require_boolean =
      _duk_require_booleanPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  double duk_require_number(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_number(ctx, idx);
  }

  late final _duk_require_numberPtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_number');
  late final _duk_require_number =
      _duk_require_numberPtr
          .asFunction<double Function(ffi.Pointer<duk_context>, int)>();

  int duk_require_int(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_int(ctx, idx);
  }

  late final _duk_require_intPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_int');
  late final _duk_require_int =
      _duk_require_intPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_require_uint(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_uint(ctx, idx);
  }

  late final _duk_require_uintPtr = _lookup<
    ffi.NativeFunction<duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_uint');
  late final _duk_require_uint =
      _duk_require_uintPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_require_string(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_require_string(ctx, idx);
  }

  late final _duk_require_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_string');
  late final _duk_require_string =
      _duk_require_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  ffi.Pointer<ffi.Char> duk_require_lstring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
  ) {
    return _duk_require_lstring(ctx, idx, out_len);
  }

  late final _duk_require_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_require_lstring');
  late final _duk_require_lstring =
      _duk_require_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  void duk_require_object(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_object(ctx, idx);
  }

  late final _duk_require_objectPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_object');
  late final _duk_require_object =
      _duk_require_objectPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Void> duk_require_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
  ) {
    return _duk_require_buffer(ctx, idx, out_size);
  }

  late final _duk_require_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_require_buffer');
  late final _duk_require_buffer =
      _duk_require_bufferPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_require_buffer_data(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
  ) {
    return _duk_require_buffer_data(ctx, idx, out_size);
  }

  late final _duk_require_buffer_dataPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_require_buffer_data');
  late final _duk_require_buffer_data =
      _duk_require_buffer_dataPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_require_pointer(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_require_pointer(ctx, idx);
  }

  late final _duk_require_pointerPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_pointer');
  late final _duk_require_pointer =
      _duk_require_pointerPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  duk_c_function duk_require_c_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_c_function(ctx, idx);
  }

  late final _duk_require_c_functionPtr = _lookup<
    ffi.NativeFunction<
      duk_c_function Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_c_function');
  late final _duk_require_c_function =
      _duk_require_c_functionPtr
          .asFunction<duk_c_function Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<duk_context> duk_require_context(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_require_context(ctx, idx);
  }

  late final _duk_require_contextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<duk_context> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_context');
  late final _duk_require_context =
      _duk_require_contextPtr
          .asFunction<
            ffi.Pointer<duk_context> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_require_function(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_function(ctx, idx);
  }

  late final _duk_require_functionPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_function');
  late final _duk_require_function =
      _duk_require_functionPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_require_constructor_call(ffi.Pointer<duk_context> ctx) {
    return _duk_require_constructor_call(ctx);
  }

  late final _duk_require_constructor_callPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_require_constructor_call',
      );
  late final _duk_require_constructor_call =
      _duk_require_constructor_callPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_require_constructable(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_require_constructable(ctx, idx);
  }

  late final _duk_require_constructablePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_require_constructable');
  late final _duk_require_constructable =
      _duk_require_constructablePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Void> duk_require_heapptr(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_require_heapptr(ctx, idx);
  }

  late final _duk_require_heapptrPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_require_heapptr');
  late final _duk_require_heapptr =
      _duk_require_heapptrPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  /// Coercion operations: in-place coercion, return coerced value where
  /// applicable.  If index is invalid, throw error.  Some coercions may
  /// throw an expected error (e.g. from a toString() or valueOf() call)
  /// or an internal error (e.g. from out of memory).
  void duk_to_undefined(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_undefined(ctx, idx);
  }

  late final _duk_to_undefinedPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_undefined');
  late final _duk_to_undefined =
      _duk_to_undefinedPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_to_null(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_null(ctx, idx);
  }

  late final _duk_to_nullPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_null');
  late final _duk_to_null =
      _duk_to_nullPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_boolean(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_boolean(ctx, idx);
  }

  late final _duk_to_booleanPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_boolean');
  late final _duk_to_boolean =
      _duk_to_booleanPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  double duk_to_number(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_number(ctx, idx);
  }

  late final _duk_to_numberPtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_number');
  late final _duk_to_number =
      _duk_to_numberPtr
          .asFunction<double Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_int(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_int(ctx, idx);
  }

  late final _duk_to_intPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_int');
  late final _duk_to_int =
      _duk_to_intPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_uint(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_uint(ctx, idx);
  }

  late final _duk_to_uintPtr = _lookup<
    ffi.NativeFunction<duk_uint_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_uint');
  late final _duk_to_uint =
      _duk_to_uintPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_int32(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_int32(ctx, idx);
  }

  late final _duk_to_int32Ptr = _lookup<
    ffi.NativeFunction<
      duk_int32_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_int32');
  late final _duk_to_int32 =
      _duk_to_int32Ptr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_uint32(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_uint32(ctx, idx);
  }

  late final _duk_to_uint32Ptr = _lookup<
    ffi.NativeFunction<
      duk_uint32_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_uint32');
  late final _duk_to_uint32 =
      _duk_to_uint32Ptr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_to_uint16(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_uint16(ctx, idx);
  }

  late final _duk_to_uint16Ptr = _lookup<
    ffi.NativeFunction<
      duk_uint16_t Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_uint16');
  late final _duk_to_uint16 =
      _duk_to_uint16Ptr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_to_string(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_string(ctx, idx);
  }

  late final _duk_to_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_string');
  late final _duk_to_string =
      _duk_to_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  ffi.Pointer<ffi.Char> duk_to_lstring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
  ) {
    return _duk_to_lstring(ctx, idx, out_len);
  }

  late final _duk_to_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_to_lstring');
  late final _duk_to_lstring =
      _duk_to_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Void> duk_to_buffer_raw(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
    int flags,
  ) {
    return _duk_to_buffer_raw(ctx, idx, out_size, flags);
  }

  late final _duk_to_buffer_rawPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
        duk_uint_t,
      )
    >
  >('duk_to_buffer_raw');
  late final _duk_to_buffer_raw =
      _duk_to_buffer_rawPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
              int,
            )
          >();

  ffi.Pointer<ffi.Void> duk_to_pointer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_pointer(ctx, idx);
  }

  late final _duk_to_pointerPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_pointer');
  late final _duk_to_pointer =
      _duk_to_pointerPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_to_object(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_to_object(ctx, idx);
  }

  late final _duk_to_objectPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_to_object');
  late final _duk_to_object =
      _duk_to_objectPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_to_primitive(ffi.Pointer<duk_context> ctx, int idx, int hint) {
    return _duk_to_primitive(ctx, idx, hint);
  }

  late final _duk_to_primitivePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_int_t)
    >
  >('duk_to_primitive');
  late final _duk_to_primitive =
      _duk_to_primitivePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  /// safe variants of a few coercion operations
  ffi.Pointer<ffi.Char> duk_safe_to_lstring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_len,
  ) {
    return _duk_safe_to_lstring(ctx, idx, out_len);
  }

  late final _duk_safe_to_lstringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_safe_to_lstring');
  late final _duk_safe_to_lstring =
      _duk_safe_to_lstringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  ffi.Pointer<ffi.Char> duk_to_stacktrace(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_to_stacktrace(ctx, idx);
  }

  late final _duk_to_stacktracePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_to_stacktrace');
  late final _duk_to_stacktrace =
      _duk_to_stacktracePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  ffi.Pointer<ffi.Char> duk_safe_to_stacktrace(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_safe_to_stacktrace(ctx, idx);
  }

  late final _duk_safe_to_stacktracePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_safe_to_stacktrace');
  late final _duk_safe_to_stacktrace =
      _duk_safe_to_stacktracePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  /// Value length
  int duk_get_length(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_length(ctx, idx);
  }

  late final _duk_get_lengthPtr = _lookup<
    ffi.NativeFunction<duk_size_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_length');
  late final _duk_get_length =
      _duk_get_lengthPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_set_length(ffi.Pointer<duk_context> ctx, int idx, int len) {
    return _duk_set_length(ctx, idx, len);
  }

  late final _duk_set_lengthPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_size_t)
    >
  >('duk_set_length');
  late final _duk_set_length =
      _duk_set_lengthPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  /// Misc conversion
  ffi.Pointer<ffi.Char> duk_base64_encode(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_base64_encode(ctx, idx);
  }

  late final _duk_base64_encodePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_base64_encode');
  late final _duk_base64_encode =
      _duk_base64_encodePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_base64_decode(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_base64_decode(ctx, idx);
  }

  late final _duk_base64_decodePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_base64_decode');
  late final _duk_base64_decode =
      _duk_base64_decodePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_hex_encode(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_hex_encode(ctx, idx);
  }

  late final _duk_hex_encodePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_hex_encode');
  late final _duk_hex_encode =
      _duk_hex_encodePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_hex_decode(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_hex_decode(ctx, idx);
  }

  late final _duk_hex_decodePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_hex_decode');
  late final _duk_hex_decode =
      _duk_hex_decodePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  ffi.Pointer<ffi.Char> duk_json_encode(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_json_encode(ctx, idx);
  }

  late final _duk_json_encodePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_json_encode');
  late final _duk_json_encode =
      _duk_json_encodePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  void duk_json_decode(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_json_decode(ctx, idx);
  }

  late final _duk_json_decodePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_json_decode');
  late final _duk_json_decode =
      _duk_json_decodePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_cbor_encode(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int encode_flags,
  ) {
    return _duk_cbor_encode(ctx, idx, encode_flags);
  }

  late final _duk_cbor_encodePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_cbor_encode');
  late final _duk_cbor_encode =
      _duk_cbor_encodePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_cbor_decode(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int decode_flags,
  ) {
    return _duk_cbor_decode(ctx, idx, decode_flags);
  }

  late final _duk_cbor_decodePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_cbor_decode');
  late final _duk_cbor_decode =
      _duk_cbor_decodePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  ffi.Pointer<ffi.Char> duk_buffer_to_string(
    ffi.Pointer<duk_context> ctx,
    int idx,
  ) {
    return _duk_buffer_to_string(ctx, idx);
  }

  late final _duk_buffer_to_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, duk_idx_t)
    >
  >('duk_buffer_to_string');
  late final _duk_buffer_to_string =
      _duk_buffer_to_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<duk_context>, int)
          >();

  /// Buffer
  ffi.Pointer<ffi.Void> duk_resize_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int new_size,
  ) {
    return _duk_resize_buffer(ctx, idx, new_size);
  }

  late final _duk_resize_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_size_t,
      )
    >
  >('duk_resize_buffer');
  late final _duk_resize_buffer =
      _duk_resize_bufferPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<duk_context>, int, int)
          >();

  ffi.Pointer<ffi.Void> duk_steal_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<duk_size_t> out_size,
  ) {
    return _duk_steal_buffer(ctx, idx, out_size);
  }

  late final _duk_steal_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_size_t>,
      )
    >
  >('duk_steal_buffer');
  late final _duk_steal_buffer =
      _duk_steal_bufferPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_size_t>,
            )
          >();

  void duk_config_buffer(
    ffi.Pointer<duk_context> ctx,
    int idx,
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _duk_config_buffer(ctx, idx, ptr, len);
  }

  late final _duk_config_bufferPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
        duk_size_t,
      )
    >
  >('duk_config_buffer');
  late final _duk_config_buffer =
      _duk_config_bufferPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  /// Property access
  ///
  /// The basic function assumes key is on stack.  The _(l)string variant takes
  /// a C string as a property name; the _literal variant takes a C literal.
  /// The _index variant takes an array index as a property name (e.g. 123 is
  /// equivalent to the key "123").  The _heapptr variant takes a raw, borrowed
  /// heap pointer.
  int duk_get_prop(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_get_prop(ctx, obj_idx);
  }

  late final _duk_get_propPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_prop');
  late final _duk_get_prop =
      _duk_get_propPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_get_prop_string(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_get_prop_string(ctx, obj_idx, key);
  }

  late final _duk_get_prop_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_get_prop_string');
  late final _duk_get_prop_string =
      _duk_get_prop_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Char>)
          >();

  int duk_get_prop_lstring(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_get_prop_lstring(ctx, obj_idx, key, key_len);
  }

  late final _duk_get_prop_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_get_prop_lstring');
  late final _duk_get_prop_lstring =
      _duk_get_prop_lstringPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_get_prop_literal_raw(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_get_prop_literal_raw(ctx, obj_idx, key, key_len);
  }

  late final _duk_get_prop_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_get_prop_literal_raw');
  late final _duk_get_prop_literal_raw =
      _duk_get_prop_literal_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_get_prop_index(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    int arr_idx,
  ) {
    return _duk_get_prop_index(ctx, obj_idx, arr_idx);
  }

  late final _duk_get_prop_indexPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uarridx_t)
    >
  >('duk_get_prop_index');
  late final _duk_get_prop_index =
      _duk_get_prop_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_get_prop_heapptr(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_get_prop_heapptr(ctx, obj_idx, ptr);
  }

  late final _duk_get_prop_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_get_prop_heapptr');
  late final _duk_get_prop_heapptr =
      _duk_get_prop_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Void>)
          >();

  int duk_put_prop(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_put_prop(ctx, obj_idx);
  }

  late final _duk_put_propPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_put_prop');
  late final _duk_put_prop =
      _duk_put_propPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_put_prop_string(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_put_prop_string(ctx, obj_idx, key);
  }

  late final _duk_put_prop_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_put_prop_string');
  late final _duk_put_prop_string =
      _duk_put_prop_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Char>)
          >();

  int duk_put_prop_lstring(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_put_prop_lstring(ctx, obj_idx, key, key_len);
  }

  late final _duk_put_prop_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_put_prop_lstring');
  late final _duk_put_prop_lstring =
      _duk_put_prop_lstringPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_put_prop_literal_raw(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_put_prop_literal_raw(ctx, obj_idx, key, key_len);
  }

  late final _duk_put_prop_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_put_prop_literal_raw');
  late final _duk_put_prop_literal_raw =
      _duk_put_prop_literal_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_put_prop_index(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    int arr_idx,
  ) {
    return _duk_put_prop_index(ctx, obj_idx, arr_idx);
  }

  late final _duk_put_prop_indexPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uarridx_t)
    >
  >('duk_put_prop_index');
  late final _duk_put_prop_index =
      _duk_put_prop_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_put_prop_heapptr(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_put_prop_heapptr(ctx, obj_idx, ptr);
  }

  late final _duk_put_prop_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_put_prop_heapptr');
  late final _duk_put_prop_heapptr =
      _duk_put_prop_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Void>)
          >();

  int duk_del_prop(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_del_prop(ctx, obj_idx);
  }

  late final _duk_del_propPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_del_prop');
  late final _duk_del_prop =
      _duk_del_propPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_del_prop_string(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_del_prop_string(ctx, obj_idx, key);
  }

  late final _duk_del_prop_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_del_prop_string');
  late final _duk_del_prop_string =
      _duk_del_prop_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Char>)
          >();

  int duk_del_prop_lstring(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_del_prop_lstring(ctx, obj_idx, key, key_len);
  }

  late final _duk_del_prop_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_del_prop_lstring');
  late final _duk_del_prop_lstring =
      _duk_del_prop_lstringPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_del_prop_literal_raw(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_del_prop_literal_raw(ctx, obj_idx, key, key_len);
  }

  late final _duk_del_prop_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_del_prop_literal_raw');
  late final _duk_del_prop_literal_raw =
      _duk_del_prop_literal_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_del_prop_index(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    int arr_idx,
  ) {
    return _duk_del_prop_index(ctx, obj_idx, arr_idx);
  }

  late final _duk_del_prop_indexPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uarridx_t)
    >
  >('duk_del_prop_index');
  late final _duk_del_prop_index =
      _duk_del_prop_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_del_prop_heapptr(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_del_prop_heapptr(ctx, obj_idx, ptr);
  }

  late final _duk_del_prop_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_del_prop_heapptr');
  late final _duk_del_prop_heapptr =
      _duk_del_prop_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Void>)
          >();

  int duk_has_prop(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_has_prop(ctx, obj_idx);
  }

  late final _duk_has_propPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_has_prop');
  late final _duk_has_prop =
      _duk_has_propPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_has_prop_string(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_has_prop_string(ctx, obj_idx, key);
  }

  late final _duk_has_prop_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('duk_has_prop_string');
  late final _duk_has_prop_string =
      _duk_has_prop_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Char>)
          >();

  int duk_has_prop_lstring(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_has_prop_lstring(ctx, obj_idx, key, key_len);
  }

  late final _duk_has_prop_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_has_prop_lstring');
  late final _duk_has_prop_lstring =
      _duk_has_prop_lstringPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_has_prop_literal_raw(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_has_prop_literal_raw(ctx, obj_idx, key, key_len);
  }

  late final _duk_has_prop_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_has_prop_literal_raw');
  late final _duk_has_prop_literal_raw =
      _duk_has_prop_literal_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int duk_has_prop_index(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    int arr_idx,
  ) {
    return _duk_has_prop_index(ctx, obj_idx, arr_idx);
  }

  late final _duk_has_prop_indexPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uarridx_t)
    >
  >('duk_has_prop_index');
  late final _duk_has_prop_index =
      _duk_has_prop_indexPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_has_prop_heapptr(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_has_prop_heapptr(ctx, obj_idx, ptr);
  }

  late final _duk_has_prop_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_has_prop_heapptr');
  late final _duk_has_prop_heapptr =
      _duk_has_prop_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, int, ffi.Pointer<ffi.Void>)
          >();

  void duk_get_prop_desc(ffi.Pointer<duk_context> ctx, int obj_idx, int flags) {
    return _duk_get_prop_desc(ctx, obj_idx, flags);
  }

  late final _duk_get_prop_descPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_get_prop_desc');
  late final _duk_get_prop_desc =
      _duk_get_prop_descPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_def_prop(ffi.Pointer<duk_context> ctx, int obj_idx, int flags) {
    return _duk_def_prop(ctx, obj_idx, flags);
  }

  late final _duk_def_propPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_def_prop');
  late final _duk_def_prop =
      _duk_def_propPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_get_global_string(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_get_global_string(ctx, key);
  }

  late final _duk_get_global_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
    >
  >('duk_get_global_string');
  late final _duk_get_global_string =
      _duk_get_global_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
          >();

  int duk_get_global_lstring(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_get_global_lstring(ctx, key, key_len);
  }

  late final _duk_get_global_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_get_global_lstring');
  late final _duk_get_global_lstring =
      _duk_get_global_lstringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>, int)
          >();

  int duk_get_global_literal_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_get_global_literal_raw(ctx, key, key_len);
  }

  late final _duk_get_global_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_get_global_literal_raw');
  late final _duk_get_global_literal_raw =
      _duk_get_global_literal_rawPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>, int)
          >();

  int duk_get_global_heapptr(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_get_global_heapptr(ctx, ptr);
  }

  late final _duk_get_global_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_get_global_heapptr');
  late final _duk_get_global_heapptr =
      _duk_get_global_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  int duk_put_global_string(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _duk_put_global_string(ctx, key);
  }

  late final _duk_put_global_stringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
    >
  >('duk_put_global_string');
  late final _duk_put_global_string =
      _duk_put_global_stringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>)
          >();

  int duk_put_global_lstring(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_put_global_lstring(ctx, key, key_len);
  }

  late final _duk_put_global_lstringPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_put_global_lstring');
  late final _duk_put_global_lstring =
      _duk_put_global_lstringPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>, int)
          >();

  int duk_put_global_literal_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> key,
    int key_len,
  ) {
    return _duk_put_global_literal_raw(ctx, key, key_len);
  }

  late final _duk_put_global_literal_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
      )
    >
  >('duk_put_global_literal_raw');
  late final _duk_put_global_literal_raw =
      _duk_put_global_literal_rawPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Char>, int)
          >();

  int duk_put_global_heapptr(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duk_put_global_heapptr(ctx, ptr);
  }

  late final _duk_put_global_heapptrPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
    >
  >('duk_put_global_heapptr');
  late final _duk_put_global_heapptr =
      _duk_put_global_heapptrPtr
          .asFunction<
            int Function(ffi.Pointer<duk_context>, ffi.Pointer<ffi.Void>)
          >();

  /// Inspection
  void duk_inspect_value(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_inspect_value(ctx, idx);
  }

  late final _duk_inspect_valuePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_inspect_value');
  late final _duk_inspect_value =
      _duk_inspect_valuePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_inspect_callstack_entry(ffi.Pointer<duk_context> ctx, int level) {
    return _duk_inspect_callstack_entry(ctx, level);
  }

  late final _duk_inspect_callstack_entryPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_int_t)>
  >('duk_inspect_callstack_entry');
  late final _duk_inspect_callstack_entry =
      _duk_inspect_callstack_entryPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  /// Object prototype
  void duk_get_prototype(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_prototype(ctx, idx);
  }

  late final _duk_get_prototypePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_prototype');
  late final _duk_get_prototype =
      _duk_get_prototypePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_set_prototype(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_set_prototype(ctx, idx);
  }

  late final _duk_set_prototypePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_set_prototype');
  late final _duk_set_prototype =
      _duk_set_prototypePtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  /// Object finalizer
  void duk_get_finalizer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_finalizer(ctx, idx);
  }

  late final _duk_get_finalizerPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_finalizer');
  late final _duk_get_finalizer =
      _duk_get_finalizerPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_set_finalizer(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_set_finalizer(ctx, idx);
  }

  late final _duk_set_finalizerPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_set_finalizer');
  late final _duk_set_finalizer =
      _duk_set_finalizerPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  /// Global object
  void duk_set_global_object(ffi.Pointer<duk_context> ctx) {
    return _duk_set_global_object(ctx);
  }

  late final _duk_set_global_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_set_global_object',
      );
  late final _duk_set_global_object =
      _duk_set_global_objectPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  /// Duktape/C function magic value
  int duk_get_magic(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_get_magic(ctx, idx);
  }

  late final _duk_get_magicPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_get_magic');
  late final _duk_get_magic =
      _duk_get_magicPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_set_magic(ffi.Pointer<duk_context> ctx, int idx, int magic) {
    return _duk_set_magic(ctx, idx, magic);
  }

  late final _duk_set_magicPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_int_t)
    >
  >('duk_set_magic');
  late final _duk_set_magic =
      _duk_set_magicPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_get_current_magic(ffi.Pointer<duk_context> ctx) {
    return _duk_get_current_magic(ctx);
  }

  late final _duk_get_current_magicPtr =
      _lookup<ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>)>>(
        'duk_get_current_magic',
      );
  late final _duk_get_current_magic =
      _duk_get_current_magicPtr
          .asFunction<int Function(ffi.Pointer<duk_context>)>();

  /// Module helpers: put multiple function or constant properties
  void duk_put_function_list(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<duk_function_list_entry> funcs,
  ) {
    return _duk_put_function_list(ctx, obj_idx, funcs);
  }

  late final _duk_put_function_listPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_function_list_entry>,
      )
    >
  >('duk_put_function_list');
  late final _duk_put_function_list =
      _duk_put_function_listPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_function_list_entry>,
            )
          >();

  void duk_put_number_list(
    ffi.Pointer<duk_context> ctx,
    int obj_idx,
    ffi.Pointer<duk_number_list_entry> numbers,
  ) {
    return _duk_put_number_list(ctx, obj_idx, numbers);
  }

  late final _duk_put_number_listPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        ffi.Pointer<duk_number_list_entry>,
      )
    >
  >('duk_put_number_list');
  late final _duk_put_number_list =
      _duk_put_number_listPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              ffi.Pointer<duk_number_list_entry>,
            )
          >();

  /// Object operations
  void duk_compact(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_compact(ctx, obj_idx);
  }

  late final _duk_compactPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_compact');
  late final _duk_compact =
      _duk_compactPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_enum(ffi.Pointer<duk_context> ctx, int obj_idx, int enum_flags) {
    return _duk_enum(ctx, obj_idx, enum_flags);
  }

  late final _duk_enumPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_uint_t)
    >
  >('duk_enum');
  late final _duk_enum =
      _duk_enumPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_next(ffi.Pointer<duk_context> ctx, int enum_idx, int get_value) {
    return _duk_next(ctx, enum_idx, get_value);
  }

  late final _duk_nextPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_bool_t)
    >
  >('duk_next');
  late final _duk_next =
      _duk_nextPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_seal(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_seal(ctx, obj_idx);
  }

  late final _duk_sealPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_seal');
  late final _duk_seal =
      _duk_sealPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_freeze(ffi.Pointer<duk_context> ctx, int obj_idx) {
    return _duk_freeze(ctx, obj_idx);
  }

  late final _duk_freezePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_freeze');
  late final _duk_freeze =
      _duk_freezePtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  /// String manipulation
  void duk_concat(ffi.Pointer<duk_context> ctx, int count) {
    return _duk_concat(ctx, count);
  }

  late final _duk_concatPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_concat');
  late final _duk_concat =
      _duk_concatPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_join(ffi.Pointer<duk_context> ctx, int count) {
    return _duk_join(ctx, count);
  }

  late final _duk_joinPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_join');
  late final _duk_join =
      _duk_joinPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_decode_string(
    ffi.Pointer<duk_context> ctx,
    int idx,
    duk_decode_char_function callback,
    ffi.Pointer<ffi.Void> udata,
  ) {
    return _duk_decode_string(ctx, idx, callback, udata);
  }

  late final _duk_decode_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_decode_char_function,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_decode_string');
  late final _duk_decode_string =
      _duk_decode_stringPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              duk_decode_char_function,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void duk_map_string(
    ffi.Pointer<duk_context> ctx,
    int idx,
    duk_map_char_function callback,
    ffi.Pointer<ffi.Void> udata,
  ) {
    return _duk_map_string(ctx, idx, callback, udata);
  }

  late final _duk_map_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_map_char_function,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_map_string');
  late final _duk_map_string =
      _duk_map_stringPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              int,
              duk_map_char_function,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void duk_substring(
    ffi.Pointer<duk_context> ctx,
    int idx,
    int start_char_offset,
    int end_char_offset,
  ) {
    return _duk_substring(ctx, idx, start_char_offset, end_char_offset);
  }

  late final _duk_substringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_idx_t,
        duk_size_t,
        duk_size_t,
      )
    >
  >('duk_substring');
  late final _duk_substring =
      _duk_substringPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int, int)>();

  void duk_trim(ffi.Pointer<duk_context> ctx, int idx) {
    return _duk_trim(ctx, idx);
  }

  late final _duk_trimPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_trim');
  late final _duk_trim =
      _duk_trimPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_char_code_at(ffi.Pointer<duk_context> ctx, int idx, int char_offset) {
    return _duk_char_code_at(ctx, idx, char_offset);
  }

  late final _duk_char_code_atPtr = _lookup<
    ffi.NativeFunction<
      duk_codepoint_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_size_t)
    >
  >('duk_char_code_at');
  late final _duk_char_code_at =
      _duk_char_code_atPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  /// ECMAScript operators
  int duk_equals(ffi.Pointer<duk_context> ctx, int idx1, int idx2) {
    return _duk_equals(ctx, idx1, idx2);
  }

  late final _duk_equalsPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_equals');
  late final _duk_equals =
      _duk_equalsPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_strict_equals(ffi.Pointer<duk_context> ctx, int idx1, int idx2) {
    return _duk_strict_equals(ctx, idx1, idx2);
  }

  late final _duk_strict_equalsPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_strict_equals');
  late final _duk_strict_equals =
      _duk_strict_equalsPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_samevalue(ffi.Pointer<duk_context> ctx, int idx1, int idx2) {
    return _duk_samevalue(ctx, idx1, idx2);
  }

  late final _duk_samevaluePtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_samevalue');
  late final _duk_samevalue =
      _duk_samevaluePtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_instanceof(ffi.Pointer<duk_context> ctx, int idx1, int idx2) {
    return _duk_instanceof(ctx, idx1, idx2);
  }

  late final _duk_instanceofPtr = _lookup<
    ffi.NativeFunction<
      duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_instanceof');
  late final _duk_instanceof =
      _duk_instanceofPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  /// Random
  double duk_random(ffi.Pointer<duk_context> ctx) {
    return _duk_random(ctx);
  }

  late final _duk_randomPtr = _lookup<
    ffi.NativeFunction<duk_double_t Function(ffi.Pointer<duk_context>)>
  >('duk_random');
  late final _duk_random =
      _duk_randomPtr.asFunction<double Function(ffi.Pointer<duk_context>)>();

  /// Function (method) calls
  void duk_call(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_call(ctx, nargs);
  }

  late final _duk_callPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_call');
  late final _duk_call =
      _duk_callPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_call_method(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_call_method(ctx, nargs);
  }

  late final _duk_call_methodPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_call_method');
  late final _duk_call_method =
      _duk_call_methodPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  void duk_call_prop(ffi.Pointer<duk_context> ctx, int obj_idx, int nargs) {
    return _duk_call_prop(ctx, obj_idx, nargs);
  }

  late final _duk_call_propPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_call_prop');
  late final _duk_call_prop =
      _duk_call_propPtr
          .asFunction<void Function(ffi.Pointer<duk_context>, int, int)>();

  int duk_pcall(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_pcall(ctx, nargs);
  }

  late final _duk_pcallPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_pcall');
  late final _duk_pcall =
      _duk_pcallPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_pcall_method(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_pcall_method(ctx, nargs);
  }

  late final _duk_pcall_methodPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_pcall_method');
  late final _duk_pcall_method =
      _duk_pcall_methodPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_pcall_prop(ffi.Pointer<duk_context> ctx, int obj_idx, int nargs) {
    return _duk_pcall_prop(ctx, obj_idx, nargs);
  }

  late final _duk_pcall_propPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t, duk_idx_t)
    >
  >('duk_pcall_prop');
  late final _duk_pcall_prop =
      _duk_pcall_propPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int, int)>();

  void duk_new(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_new(ctx, nargs);
  }

  late final _duk_newPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_new');
  late final _duk_new =
      _duk_newPtr.asFunction<void Function(ffi.Pointer<duk_context>, int)>();

  int duk_pnew(ffi.Pointer<duk_context> ctx, int nargs) {
    return _duk_pnew(ctx, nargs);
  }

  late final _duk_pnewPtr = _lookup<
    ffi.NativeFunction<duk_int_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_pnew');
  late final _duk_pnew =
      _duk_pnewPtr.asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  int duk_safe_call(
    ffi.Pointer<duk_context> ctx,
    duk_safe_call_function func,
    ffi.Pointer<ffi.Void> udata,
    int nargs,
    int nrets,
  ) {
    return _duk_safe_call(ctx, func, udata, nargs, nrets);
  }

  late final _duk_safe_callPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(
        ffi.Pointer<duk_context>,
        duk_safe_call_function,
        ffi.Pointer<ffi.Void>,
        duk_idx_t,
        duk_idx_t,
      )
    >
  >('duk_safe_call');
  late final _duk_safe_call =
      _duk_safe_callPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              duk_safe_call_function,
              ffi.Pointer<ffi.Void>,
              int,
              int,
            )
          >();

  /// Compilation and evaluation
  int duk_eval_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> src_buffer,
    int src_length,
    int flags,
  ) {
    return _duk_eval_raw(ctx, src_buffer, src_length, flags);
  }

  late final _duk_eval_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
        duk_uint_t,
      )
    >
  >('duk_eval_raw');
  late final _duk_eval_raw =
      _duk_eval_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
            )
          >();

  int duk_compile_raw(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<ffi.Char> src_buffer,
    int src_length,
    int flags,
  ) {
    return _duk_compile_raw(ctx, src_buffer, src_length, flags);
  }

  late final _duk_compile_rawPtr = _lookup<
    ffi.NativeFunction<
      duk_int_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<ffi.Char>,
        duk_size_t,
        duk_uint_t,
      )
    >
  >('duk_compile_raw');
  late final _duk_compile_raw =
      _duk_compile_rawPtr
          .asFunction<
            int Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
            )
          >();

  /// Bytecode load/dump
  void duk_dump_function(ffi.Pointer<duk_context> ctx) {
    return _duk_dump_function(ctx);
  }

  late final _duk_dump_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_dump_function',
      );
  late final _duk_dump_function =
      _duk_dump_functionPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_load_function(ffi.Pointer<duk_context> ctx) {
    return _duk_load_function(ctx);
  }

  late final _duk_load_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_load_function',
      );
  late final _duk_load_function =
      _duk_load_functionPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  /// Debugging
  void duk_push_context_dump(ffi.Pointer<duk_context> ctx) {
    return _duk_push_context_dump(ctx);
  }

  late final _duk_push_context_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_push_context_dump',
      );
  late final _duk_push_context_dump =
      _duk_push_context_dumpPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  /// Debugger (debug protocol)
  void duk_debugger_attach(
    ffi.Pointer<duk_context> ctx,
    duk_debug_read_function read_cb,
    duk_debug_write_function write_cb,
    duk_debug_peek_function peek_cb,
    duk_debug_read_flush_function read_flush_cb,
    duk_debug_write_flush_function write_flush_cb,
    duk_debug_request_function request_cb,
    duk_debug_detached_function detached_cb,
    ffi.Pointer<ffi.Void> udata,
  ) {
    return _duk_debugger_attach(
      ctx,
      read_cb,
      write_cb,
      peek_cb,
      read_flush_cb,
      write_flush_cb,
      request_cb,
      detached_cb,
      udata,
    );
  }

  late final _duk_debugger_attachPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_debug_read_function,
        duk_debug_write_function,
        duk_debug_peek_function,
        duk_debug_read_flush_function,
        duk_debug_write_flush_function,
        duk_debug_request_function,
        duk_debug_detached_function,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('duk_debugger_attach');
  late final _duk_debugger_attach =
      _duk_debugger_attachPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              duk_debug_read_function,
              duk_debug_write_function,
              duk_debug_peek_function,
              duk_debug_read_flush_function,
              duk_debug_write_flush_function,
              duk_debug_request_function,
              duk_debug_detached_function,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void duk_debugger_detach(ffi.Pointer<duk_context> ctx) {
    return _duk_debugger_detach(ctx);
  }

  late final _duk_debugger_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_debugger_detach',
      );
  late final _duk_debugger_detach =
      _duk_debugger_detachPtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  void duk_debugger_cooperate(ffi.Pointer<duk_context> ctx) {
    return _duk_debugger_cooperate(ctx);
  }

  late final _duk_debugger_cooperatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_debugger_cooperate',
      );
  late final _duk_debugger_cooperate =
      _duk_debugger_cooperatePtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  int duk_debugger_notify(ffi.Pointer<duk_context> ctx, int nvalues) {
    return _duk_debugger_notify(ctx, nvalues);
  }

  late final _duk_debugger_notifyPtr = _lookup<
    ffi.NativeFunction<duk_bool_t Function(ffi.Pointer<duk_context>, duk_idx_t)>
  >('duk_debugger_notify');
  late final _duk_debugger_notify =
      _duk_debugger_notifyPtr
          .asFunction<int Function(ffi.Pointer<duk_context>, int)>();

  void duk_debugger_pause(ffi.Pointer<duk_context> ctx) {
    return _duk_debugger_pause(ctx);
  }

  late final _duk_debugger_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duk_context>)>>(
        'duk_debugger_pause',
      );
  late final _duk_debugger_pause =
      _duk_debugger_pausePtr
          .asFunction<void Function(ffi.Pointer<duk_context>)>();

  /// Time handling
  double duk_get_now(ffi.Pointer<duk_context> ctx) {
    return _duk_get_now(ctx);
  }

  late final _duk_get_nowPtr = _lookup<
    ffi.NativeFunction<duk_double_t Function(ffi.Pointer<duk_context>)>
  >('duk_get_now');
  late final _duk_get_now =
      _duk_get_nowPtr.asFunction<double Function(ffi.Pointer<duk_context>)>();

  void duk_time_to_components(
    ffi.Pointer<duk_context> ctx,
    double timeval,
    ffi.Pointer<duk_time_components> comp,
  ) {
    return _duk_time_to_components(ctx, timeval, comp);
  }

  late final _duk_time_to_componentsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<duk_context>,
        duk_double_t,
        ffi.Pointer<duk_time_components>,
      )
    >
  >('duk_time_to_components');
  late final _duk_time_to_components =
      _duk_time_to_componentsPtr
          .asFunction<
            void Function(
              ffi.Pointer<duk_context>,
              double,
              ffi.Pointer<duk_time_components>,
            )
          >();

  double duk_components_to_time(
    ffi.Pointer<duk_context> ctx,
    ffi.Pointer<duk_time_components> comp,
  ) {
    return _duk_components_to_time(ctx, comp);
  }

  late final _duk_components_to_timePtr = _lookup<
    ffi.NativeFunction<
      duk_double_t Function(
        ffi.Pointer<duk_context>,
        ffi.Pointer<duk_time_components>,
      )
    >
  >('duk_components_to_time');
  late final _duk_components_to_time =
      _duk_components_to_timePtr
          .asFunction<
            double Function(
              ffi.Pointer<duk_context>,
              ffi.Pointer<duk_time_components>,
            )
          >();
}

/// Public API specific typedefs
///
/// Many types are wrapped by Duktape for portability to rare platforms
/// where e.g. 'int' is a 16-bit type.  See practical typing discussion
/// in Duktape web documentation.
final class duk_thread_state extends ffi.Struct {
  /// XXX: Enough space to hold internal suspend/resume structure.
  /// This is rather awkward and to be fixed when the internal
  /// structure is visible for the public API header.
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> data;
}

/// A few types are assumed to always exist.
typedef duk_size_t = ffi.Size;
typedef Dartduk_size_t = int;
typedef duk_alloc_functionFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> udata,
      duk_size_t size,
    );
typedef Dartduk_alloc_functionFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> udata,
      Dartduk_size_t size,
    );
typedef duk_alloc_function =
    ffi.Pointer<ffi.NativeFunction<duk_alloc_functionFunction>>;
typedef duk_realloc_functionFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Void> ptr,
      duk_size_t size,
    );
typedef Dartduk_realloc_functionFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Void> ptr,
      Dartduk_size_t size,
    );
typedef duk_realloc_function =
    ffi.Pointer<ffi.NativeFunction<duk_realloc_functionFunction>>;
typedef duk_free_functionFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> udata, ffi.Pointer<ffi.Void> ptr);
typedef Dartduk_free_functionFunction =
    void Function(ffi.Pointer<ffi.Void> udata, ffi.Pointer<ffi.Void> ptr);
typedef duk_free_function =
    ffi.Pointer<ffi.NativeFunction<duk_free_functionFunction>>;

final class duk_memory_functions extends ffi.Struct {
  external duk_alloc_function alloc_func;

  external duk_realloc_function realloc_func;

  external duk_free_function free_func;

  external ffi.Pointer<ffi.Void> udata;
}

/// Small integers (16 bits or more) can fall back to the 'int' type, but
/// have a typedef so they are marked "small" explicitly.
typedef duk_small_int_t = ffi.Int;
typedef Dartduk_small_int_t = int;

/// Duktape/C function return value, platform int is enough for now to
/// represent 0, 1, or negative error code.  Must be compatible with
/// assigning truth values (e.g. duk_ret_t rc = (foo == bar);).
typedef duk_ret_t = duk_small_int_t;

final class duk_hthread extends ffi.Opaque {}

/// Type used in public API declarations and user code.  Typedef maps to
/// 'struct duk_hthread' like the 'duk_hthread' typedef which is used
/// exclusively in internals.
typedef duk_context = duk_hthread;
typedef duk_c_functionFunction =
    duk_ret_t Function(ffi.Pointer<duk_context> ctx);
typedef Dartduk_c_functionFunction =
    Dartduk_small_int_t Function(ffi.Pointer<duk_context> ctx);
typedef duk_c_function =
    ffi.Pointer<ffi.NativeFunction<duk_c_functionFunction>>;
typedef duk_int_t = ffi.Int;
typedef Dartduk_int_t = int;

/// Index values must have at least 32-bit signed range.
typedef duk_idx_t = duk_int_t;

final class duk_function_list_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  external duk_c_function value;

  @duk_idx_t()
  external int nargs;
}

typedef duk_double_t = ffi.Double;
typedef Dartduk_double_t = double;

final class duk_number_list_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @duk_double_t()
  external double value;
}

final class duk_time_components extends ffi.Struct {
  /// year, e.g. 2016, ECMAScript year range
  @duk_double_t()
  external double year;

  /// month: 1-12
  @duk_double_t()
  external double month;

  /// day: 1-31
  @duk_double_t()
  external double day;

  /// hour: 0-59
  @duk_double_t()
  external double hours;

  /// minute: 0-59
  @duk_double_t()
  external double minutes;

  /// second: 0-59 (in POSIX time no leap second)
  @duk_double_t()
  external double seconds;

  /// may contain sub-millisecond fractions
  @duk_double_t()
  external double milliseconds;

  /// weekday: 0-6, 0=Sunday, 1=Monday, ..., 6=Saturday
  @duk_double_t()
  external double weekday;
}

typedef duk_fatal_functionFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> udata, ffi.Pointer<ffi.Char> msg);
typedef Dartduk_fatal_functionFunction =
    void Function(ffi.Pointer<ffi.Void> udata, ffi.Pointer<ffi.Char> msg);
typedef duk_fatal_function =
    ffi.Pointer<ffi.NativeFunction<duk_fatal_functionFunction>>;

/// Codepoint type.  Must be 32 bits or more because it is used also for
/// internal codepoints.  The type is signed because negative codepoints
/// are used as internal markers (e.g. to mark EOF or missing argument).
/// (X)UTF-8/CESU-8 encode/decode take and return an unsigned variant to
/// ensure duk_uint32_t casts back and forth nicely.  Almost everything
/// else uses the signed one.
typedef duk_codepoint_t = duk_int_t;
typedef duk_decode_char_functionFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> udata, duk_codepoint_t codepoint);
typedef Dartduk_decode_char_functionFunction =
    void Function(ffi.Pointer<ffi.Void> udata, Dartduk_int_t codepoint);
typedef duk_decode_char_function =
    ffi.Pointer<ffi.NativeFunction<duk_decode_char_functionFunction>>;
typedef duk_map_char_functionFunction =
    duk_codepoint_t Function(
      ffi.Pointer<ffi.Void> udata,
      duk_codepoint_t codepoint,
    );
typedef Dartduk_map_char_functionFunction =
    Dartduk_int_t Function(
      ffi.Pointer<ffi.Void> udata,
      Dartduk_int_t codepoint,
    );
typedef duk_map_char_function =
    ffi.Pointer<ffi.NativeFunction<duk_map_char_functionFunction>>;
typedef duk_safe_call_functionFunction =
    duk_ret_t Function(
      ffi.Pointer<duk_context> ctx,
      ffi.Pointer<ffi.Void> udata,
    );
typedef Dartduk_safe_call_functionFunction =
    Dartduk_small_int_t Function(
      ffi.Pointer<duk_context> ctx,
      ffi.Pointer<ffi.Void> udata,
    );
typedef duk_safe_call_function =
    ffi.Pointer<ffi.NativeFunction<duk_safe_call_functionFunction>>;
typedef duk_debug_read_functionFunction =
    duk_size_t Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Char> buffer,
      duk_size_t length,
    );
typedef Dartduk_debug_read_functionFunction =
    Dartduk_size_t Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Char> buffer,
      Dartduk_size_t length,
    );
typedef duk_debug_read_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_read_functionFunction>>;
typedef duk_debug_write_functionFunction =
    duk_size_t Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Char> buffer,
      duk_size_t length,
    );
typedef Dartduk_debug_write_functionFunction =
    Dartduk_size_t Function(
      ffi.Pointer<ffi.Void> udata,
      ffi.Pointer<ffi.Char> buffer,
      Dartduk_size_t length,
    );
typedef duk_debug_write_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_write_functionFunction>>;
typedef duk_debug_peek_functionFunction =
    duk_size_t Function(ffi.Pointer<ffi.Void> udata);
typedef Dartduk_debug_peek_functionFunction =
    Dartduk_size_t Function(ffi.Pointer<ffi.Void> udata);
typedef duk_debug_peek_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_peek_functionFunction>>;
typedef duk_debug_read_flush_functionFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> udata);
typedef Dartduk_debug_read_flush_functionFunction =
    void Function(ffi.Pointer<ffi.Void> udata);
typedef duk_debug_read_flush_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_read_flush_functionFunction>>;
typedef duk_debug_write_flush_functionFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> udata);
typedef Dartduk_debug_write_flush_functionFunction =
    void Function(ffi.Pointer<ffi.Void> udata);
typedef duk_debug_write_flush_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_write_flush_functionFunction>>;
typedef duk_debug_request_functionFunction =
    duk_idx_t Function(
      ffi.Pointer<duk_context> ctx,
      ffi.Pointer<ffi.Void> udata,
      duk_idx_t nvalues,
    );
typedef Dartduk_debug_request_functionFunction =
    Dartduk_int_t Function(
      ffi.Pointer<duk_context> ctx,
      ffi.Pointer<ffi.Void> udata,
      Dartduk_int_t nvalues,
    );
typedef duk_debug_request_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_request_functionFunction>>;
typedef duk_debug_detached_functionFunction =
    ffi.Void Function(
      ffi.Pointer<duk_context> ctx,
      ffi.Pointer<ffi.Void> udata,
    );
typedef Dartduk_debug_detached_functionFunction =
    void Function(ffi.Pointer<duk_context> ctx, ffi.Pointer<ffi.Void> udata);
typedef duk_debug_detached_function =
    ffi.Pointer<ffi.NativeFunction<duk_debug_detached_functionFunction>>;
typedef duk_uint_t = ffi.UnsignedInt;
typedef Dartduk_uint_t = int;

/// Error codes are represented with platform int.  High bits are used
/// for flags and such, so 32 bits are needed.
typedef duk_errcode_t = duk_int_t;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef va_list = __builtin_va_list;
typedef duk_small_uint_t = ffi.UnsignedInt;
typedef Dartduk_small_uint_t = int;

/// Boolean values are represented with the platform 'unsigned int'.
typedef duk_bool_t = duk_small_uint_t;
typedef duk_int32_t = ffi.Int32;
typedef Dartduk_int32_t = int;
typedef duk_uint32_t = ffi.Uint32;
typedef Dartduk_uint32_t = int;
typedef duk_uint16_t = ffi.Uint16;
typedef Dartduk_uint16_t = int;

/// Array index values, could be exact 32 bits.
/// Currently no need for signed duk_arridx_t.
typedef duk_uarridx_t = duk_uint_t;

const int DUK_VERSION = 20700;

const String DUK_GIT_COMMIT = '03d4d728f8365021de6955c649e6dcd05dcca99f';

const String DUK_GIT_DESCRIBE = '03d4d72-dirty';

const String DUK_GIT_BRANCH = 'HEAD';

const int DUK_DEBUG_PROTOCOL_VERSION = 2;

const int DUK_INVALID_INDEX = -2147483648;

const int DUK_VARARGS = -1;

const int DUK_API_ENTRY_STACK = 64;

const int DUK_TYPE_MIN = 0;

const int DUK_TYPE_NONE = 0;

const int DUK_TYPE_UNDEFINED = 1;

const int DUK_TYPE_NULL = 2;

const int DUK_TYPE_BOOLEAN = 3;

const int DUK_TYPE_NUMBER = 4;

const int DUK_TYPE_STRING = 5;

const int DUK_TYPE_OBJECT = 6;

const int DUK_TYPE_BUFFER = 7;

const int DUK_TYPE_POINTER = 8;

const int DUK_TYPE_LIGHTFUNC = 9;

const int DUK_TYPE_MAX = 9;

const int DUK_TYPE_MASK_NONE = 1;

const int DUK_TYPE_MASK_UNDEFINED = 2;

const int DUK_TYPE_MASK_NULL = 4;

const int DUK_TYPE_MASK_BOOLEAN = 8;

const int DUK_TYPE_MASK_NUMBER = 16;

const int DUK_TYPE_MASK_STRING = 32;

const int DUK_TYPE_MASK_OBJECT = 64;

const int DUK_TYPE_MASK_BUFFER = 128;

const int DUK_TYPE_MASK_POINTER = 256;

const int DUK_TYPE_MASK_LIGHTFUNC = 512;

const int DUK_TYPE_MASK_THROW = 1024;

const int DUK_TYPE_MASK_PROMOTE = 2048;

const int DUK_HINT_NONE = 0;

const int DUK_HINT_STRING = 1;

const int DUK_HINT_NUMBER = 2;

const int DUK_ENUM_INCLUDE_NONENUMERABLE = 1;

const int DUK_ENUM_INCLUDE_HIDDEN = 2;

const int DUK_ENUM_INCLUDE_SYMBOLS = 4;

const int DUK_ENUM_EXCLUDE_STRINGS = 8;

const int DUK_ENUM_OWN_PROPERTIES_ONLY = 16;

const int DUK_ENUM_ARRAY_INDICES_ONLY = 32;

const int DUK_ENUM_SORT_ARRAY_INDICES = 64;

const int DUK_ENUM_NO_PROXY_BEHAVIOR = 128;

const int DUK_COMPILE_EVAL = 8;

const int DUK_COMPILE_FUNCTION = 16;

const int DUK_COMPILE_STRICT = 32;

const int DUK_COMPILE_SHEBANG = 64;

const int DUK_COMPILE_SAFE = 128;

const int DUK_COMPILE_NORESULT = 256;

const int DUK_COMPILE_NOSOURCE = 512;

const int DUK_COMPILE_STRLEN = 1024;

const int DUK_COMPILE_NOFILENAME = 2048;

const int DUK_COMPILE_FUNCEXPR = 4096;

const int DUK_DEFPROP_WRITABLE = 1;

const int DUK_DEFPROP_ENUMERABLE = 2;

const int DUK_DEFPROP_CONFIGURABLE = 4;

const int DUK_DEFPROP_HAVE_WRITABLE = 8;

const int DUK_DEFPROP_HAVE_ENUMERABLE = 16;

const int DUK_DEFPROP_HAVE_CONFIGURABLE = 32;

const int DUK_DEFPROP_HAVE_VALUE = 64;

const int DUK_DEFPROP_HAVE_GETTER = 128;

const int DUK_DEFPROP_HAVE_SETTER = 256;

const int DUK_DEFPROP_FORCE = 512;

const int DUK_DEFPROP_SET_WRITABLE = 9;

const int DUK_DEFPROP_CLEAR_WRITABLE = 8;

const int DUK_DEFPROP_SET_ENUMERABLE = 18;

const int DUK_DEFPROP_CLEAR_ENUMERABLE = 16;

const int DUK_DEFPROP_SET_CONFIGURABLE = 36;

const int DUK_DEFPROP_CLEAR_CONFIGURABLE = 32;

const int DUK_DEFPROP_W = 1;

const int DUK_DEFPROP_E = 2;

const int DUK_DEFPROP_C = 4;

const int DUK_DEFPROP_WE = 3;

const int DUK_DEFPROP_WC = 5;

const int DUK_DEFPROP_EC = 6;

const int DUK_DEFPROP_WEC = 7;

const int DUK_DEFPROP_HAVE_W = 8;

const int DUK_DEFPROP_HAVE_E = 16;

const int DUK_DEFPROP_HAVE_C = 32;

const int DUK_DEFPROP_HAVE_WE = 24;

const int DUK_DEFPROP_HAVE_WC = 40;

const int DUK_DEFPROP_HAVE_EC = 48;

const int DUK_DEFPROP_HAVE_WEC = 56;

const int DUK_DEFPROP_SET_W = 9;

const int DUK_DEFPROP_SET_E = 18;

const int DUK_DEFPROP_SET_C = 36;

const int DUK_DEFPROP_SET_WE = 27;

const int DUK_DEFPROP_SET_WC = 45;

const int DUK_DEFPROP_SET_EC = 54;

const int DUK_DEFPROP_SET_WEC = 63;

const int DUK_DEFPROP_CLEAR_W = 8;

const int DUK_DEFPROP_CLEAR_E = 16;

const int DUK_DEFPROP_CLEAR_C = 32;

const int DUK_DEFPROP_CLEAR_WE = 24;

const int DUK_DEFPROP_CLEAR_WC = 40;

const int DUK_DEFPROP_CLEAR_EC = 48;

const int DUK_DEFPROP_CLEAR_WEC = 56;

const int DUK_DEFPROP_ATTR_W = 57;

const int DUK_DEFPROP_ATTR_E = 58;

const int DUK_DEFPROP_ATTR_C = 60;

const int DUK_DEFPROP_ATTR_WE = 59;

const int DUK_DEFPROP_ATTR_WC = 61;

const int DUK_DEFPROP_ATTR_EC = 62;

const int DUK_DEFPROP_ATTR_WEC = 63;

const int DUK_THREAD_NEW_GLOBAL_ENV = 1;

const int DUK_GC_COMPACT = 1;

const int DUK_ERR_NONE = 0;

const int DUK_ERR_ERROR = 1;

const int DUK_ERR_EVAL_ERROR = 2;

const int DUK_ERR_RANGE_ERROR = 3;

const int DUK_ERR_REFERENCE_ERROR = 4;

const int DUK_ERR_SYNTAX_ERROR = 5;

const int DUK_ERR_TYPE_ERROR = 6;

const int DUK_ERR_URI_ERROR = 7;

const int DUK_RET_ERROR = -1;

const int DUK_RET_EVAL_ERROR = -2;

const int DUK_RET_RANGE_ERROR = -3;

const int DUK_RET_REFERENCE_ERROR = -4;

const int DUK_RET_SYNTAX_ERROR = -5;

const int DUK_RET_TYPE_ERROR = -6;

const int DUK_RET_URI_ERROR = -7;

const int DUK_EXEC_SUCCESS = 0;

const int DUK_EXEC_ERROR = 1;

const int DUK_LEVEL_DEBUG = 0;

const int DUK_LEVEL_DDEBUG = 1;

const int DUK_LEVEL_DDDEBUG = 2;

const int DUK_BUF_FLAG_DYNAMIC = 1;

const int DUK_BUF_FLAG_EXTERNAL = 2;

const int DUK_BUF_FLAG_NOZERO = 4;

const int DUK_BUFOBJ_ARRAYBUFFER = 0;

const int DUK_BUFOBJ_NODEJS_BUFFER = 1;

const int DUK_BUFOBJ_DATAVIEW = 2;

const int DUK_BUFOBJ_INT8ARRAY = 3;

const int DUK_BUFOBJ_UINT8ARRAY = 4;

const int DUK_BUFOBJ_UINT8CLAMPEDARRAY = 5;

const int DUK_BUFOBJ_INT16ARRAY = 6;

const int DUK_BUFOBJ_UINT16ARRAY = 7;

const int DUK_BUFOBJ_INT32ARRAY = 8;

const int DUK_BUFOBJ_UINT32ARRAY = 9;

const int DUK_BUFOBJ_FLOAT32ARRAY = 10;

const int DUK_BUFOBJ_FLOAT64ARRAY = 11;

const int DUK_BUF_MODE_FIXED = 0;

const int DUK_BUF_MODE_DYNAMIC = 1;

const int DUK_BUF_MODE_DONTCARE = 2;

const int DUK_DATE_MSEC_SECOND = 1000;

const int DUK_DATE_MSEC_MINUTE = 60000;

const int DUK_DATE_MSEC_HOUR = 3600000;

const int DUK_DATE_MSEC_DAY = 86400000;

const double DUK_DATE_MSEC_100M_DAYS = 8640000000000000.0;

const double DUK_DATE_MSEC_100M_DAYS_LEEWAY = 8640000086400000.0;

const int DUK_DATE_MIN_ECMA_YEAR = -271821;

const int DUK_DATE_MAX_ECMA_YEAR = 275760;

const int DUK_DATE_IDX_YEAR = 0;

const int DUK_DATE_IDX_MONTH = 1;

const int DUK_DATE_IDX_DAY = 2;

const int DUK_DATE_IDX_HOUR = 3;

const int DUK_DATE_IDX_MINUTE = 4;

const int DUK_DATE_IDX_SECOND = 5;

const int DUK_DATE_IDX_MILLISECOND = 6;

const int DUK_DATE_IDX_WEEKDAY = 7;

const int DUK_DATE_IDX_NUM_PARTS = 8;

const int DUK_DATE_FLAG_NAN_TO_ZERO = 1;

const int DUK_DATE_FLAG_NAN_TO_RANGE_ERROR = 2;

const int DUK_DATE_FLAG_ONEBASED = 4;

const int DUK_DATE_FLAG_EQUIVYEAR = 8;

const int DUK_DATE_FLAG_LOCALTIME = 16;

const int DUK_DATE_FLAG_SUB1900 = 32;

const int DUK_DATE_FLAG_TOSTRING_DATE = 64;

const int DUK_DATE_FLAG_TOSTRING_TIME = 128;

const int DUK_DATE_FLAG_TOSTRING_LOCALE = 256;

const int DUK_DATE_FLAG_TIMESETTER = 512;

const int DUK_DATE_FLAG_YEAR_FIXUP = 1024;

const int DUK_DATE_FLAG_SEP_T = 2048;

const int DUK_DATE_FLAG_VALUE_SHIFT = 12;
