name: Adaptive App rebuild script
steps:
  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Create project
        flutter: create adaptive_app
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: adaptive_app/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: adaptive_app/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml

          linter:
            rules:
              avoid_print: false
      - name: Remove README
        rm: adaptive_app/README.md
      - name: Add .vscode directory
        mkdir: adaptive_app/.vscode
      - name: Add .vscode/launch.json
        path: adaptive_app/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "adaptive_app",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Replace lib/main.dart
        path: adaptive_app/lib/main.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:io' show Platform;
          import 'package:flutter/foundation.dart' show kIsWeb;
          import 'package:flutter/material.dart';

          void main() {
            runApp(const MyApp());
          }

          class MyApp extends StatelessWidget {
            const MyApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Flutter Demo',
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                ),
                home: const ResizeablePage(),
              );
            }
          }

          class ResizeablePage extends StatelessWidget {
            const ResizeablePage({super.key});

            @override
            Widget build(BuildContext context) {
              final mediaQuery = MediaQuery.of(context);
              final themePlatform = Theme.of(context).platform;

              return Scaffold(
                body: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Text(
                        'Window properties',
                        style: Theme.of(context).textTheme.headlineSmall,
                      ),
                      const SizedBox(height: 8),
                      SizedBox(
                        width: 350,
                        child: Table(
                          textBaseline: TextBaseline.alphabetic,
                          children: <TableRow>[
                            _fillTableRow(
                              context: context,
                              property: 'Window Size',
                              value:
                                  '${mediaQuery.size.width.toStringAsFixed(1)} x '
                                  '${mediaQuery.size.height.toStringAsFixed(1)}',
                            ),
                            _fillTableRow(
                              context: context,
                              property: 'Device Pixel Ratio',
                              value: mediaQuery.devicePixelRatio.toStringAsFixed(2),
                            ),
                            _fillTableRow(
                              context: context,
                              property: 'Platform.isXXX',
                              value: platformDescription(),
                            ),
                            _fillTableRow(
                              context: context,
                              property: 'Theme.of(ctx).platform',
                              value: themePlatform.toString(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }

            TableRow _fillTableRow({
              required BuildContext context,
              required String property,
              required String value,
            }) {
              return TableRow(
                children: [
                  TableCell(
                    verticalAlignment: TableCellVerticalAlignment.baseline,
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Text(property),
                    ),
                  ),
                  TableCell(
                    verticalAlignment: TableCellVerticalAlignment.baseline,
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Text(value),
                    ),
                  ),
                ],
              );
            }

            String platformDescription() {
              if (kIsWeb) {
                return 'Web';
              } else if (Platform.isAndroid) {
                return 'Android';
              } else if (Platform.isIOS) {
                return 'iOS';
              } else if (Platform.isWindows) {
                return 'Windows';
              } else if (Platform.isMacOS) {
                return 'macOS';
              } else if (Platform.isLinux) {
                return 'Linux';
              } else if (Platform.isFuchsia) {
                return 'Fuchsia';
              } else {
                return 'Unknown';
              }
            }
          }
      - name: Replace test/widget_test.dart
        path: adaptive_app/test/widget_test.dart
        replace-contents: |
          // This is a basic Flutter widget test.
          //
          // To perform an interaction with a widget in your test, use the WidgetTester
          // utility in the flutter_test package. For example, you can send tap and scroll
          // gestures. You can also use WidgetTester to find child widgets in the widget
          // tree, read text, and verify that the values of widget properties are correct.
          
          import 'package:adaptive_app/main.dart';
          import 'package:flutter_test/flutter_test.dart';
          
          void main() {
            testWidgets('Counter increments smoke test', (tester) async {
              // Build our app and trigger a frame.
              await tester.pumpWidget(const MyApp());
            });
          }
      - name: Upgrade deps
        path: adaptive_app
        flutter: pub upgrade --major-versions
      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: adaptive_app
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: adaptive_app
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: adaptive_app
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: adaptive_app
        flutter: build windows
      - name: Copy step_03
        copydir:
          from: adaptive_app
          to: step_03
      - name: Flutter clean
        path: step_03
        flutter: clean
  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Add googleapis http provider url_launcher flex_color_scheme go_router
        path: adaptive_app
        flutter: pub add googleapis http provider url_launcher flex_color_scheme go_router
      - name: Patch android/app/src/main/AndroidManifest.xml
        path: adaptive_app/android/app/src/main/AndroidManifest.xml
        patch-u: |
          --- b/adaptive_app/step_04/android/app/src/main/AndroidManifest.xml
          +++ a/adaptive_app/step_04/android/app/src/main/AndroidManifest.xml
          @@ -31,6 +31,21 @@
                       android:name="flutterEmbedding"
                       android:value="2" />
               </application>
          +    <!-- https://pub.dev/packages/url_launcher#android -->
          +    <queries>
          +        <intent>
          +            <action android:name="android.intent.action.VIEW" />
          +            <data android:scheme="https" />
          +        </intent>
          +        <intent>
          +            <action android:name="android.intent.action.DIAL" />
          +            <data android:scheme="tel" />
          +        </intent>
          +        <intent>
          +            <action android:name="android.intent.action.SEND" />
          +            <data android:mimeType="*/*" />
          +        </intent>
          +    </queries>
               <!-- Required to query activities that can process text, see:
                    https://developer.android.com/training/package-visibility and
                    https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.
      - name: Patch ios/Runner/Info.plist
        path: adaptive_app/ios/Runner/Info.plist
        patch-u: |
          --- b/adaptive_app/step_04/ios/Runner/Info.plist
          +++ a/adaptive_app/step_04/ios/Runner/Info.plist
          @@ -45,5 +45,13 @@
           	<true/>
           	<key>UIApplicationSupportsIndirectInputEvents</key>
           	<true/>
          +	<!-- https://pub.dev/packages/url_launcher#ios -->
          +	<key>LSApplicationQueriesSchemes</key>
          +	<array>
          +		<string>https</string>
          +		<string>http</string>
          +		<string>tel</string>
          +		<string>mailto</string>
          +	</array>
           </dict>
           </plist>
      - name: Replace adaptive_app/lib/main.dart
        path: adaptive_app/lib/main.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:io';

          import 'package:flex_color_scheme/flex_color_scheme.dart';
          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:provider/provider.dart';

          import 'src/app_state.dart';
          import 'src/playlist_details.dart';
          import 'src/playlists.dart';

          // From https://www.youtube.com/channel/UCwXdFgeE9KYzlDdR7TG9cMw
          const flutterDevAccountId = 'UCwXdFgeE9KYzlDdR7TG9cMw';

          // TODO: Replace with your YouTube API Key
          const youTubeApiKey = 'AIzaNotAnApiKey';

          final _router = GoRouter(
            routes: <RouteBase>[
              GoRoute(
                path: '/',
                builder: (context, state) {
                  return const Playlists();
                },
                routes: <RouteBase>[
                  GoRoute(
                    path: 'playlist/:id',
                    builder: (context, state) {
                      final title = state.uri.queryParameters['title']!;
                      final id = state.pathParameters['id']!;
                      return PlaylistDetails(playlistId: id, playlistName: title);
                    },
                  ),
                ],
              ),
            ],
          );

          void main() {
            if (youTubeApiKey == 'AIzaNotAnApiKey') {
              print('youTubeApiKey has not been configured.');
              exit(1);
            }

            runApp(
              ChangeNotifierProvider<FlutterDevPlaylists>(
                create:
                    (context) => FlutterDevPlaylists(
                      flutterDevAccountId: flutterDevAccountId,
                      youTubeApiKey: youTubeApiKey,
                    ),
                child: const PlaylistsApp(),
              ),
            );
          }

          class PlaylistsApp extends StatelessWidget {
            const PlaylistsApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp.router(
                title: 'FlutterDev Playlists',
                theme: FlexColorScheme.light(scheme: FlexScheme.red).toTheme,
                darkTheme: FlexColorScheme.dark(scheme: FlexScheme.red).toTheme,
                themeMode: ThemeMode.dark, // Or ThemeMode.System if you'd prefer
                debugShowCheckedModeBanner: false,
                routerConfig: _router,
              );
            }
          }
      - name: Make lib/src directory
        path: adaptive_app
        mkdir: lib/src
      - name: Add app_state.dart
        path: adaptive_app/lib/src/app_state.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:collection';

          import 'package:flutter/foundation.dart';
          import 'package:googleapis/youtube/v3.dart';
          import 'package:http/http.dart' as http;

          class FlutterDevPlaylists extends ChangeNotifier {
            FlutterDevPlaylists({
              required String flutterDevAccountId,
              required String youTubeApiKey,
            }) : _flutterDevAccountId = flutterDevAccountId {
              _api = YouTubeApi(_ApiKeyClient(client: http.Client(), key: youTubeApiKey));
              _loadPlaylists();
            }

            Future<void> _loadPlaylists() async {
              String? nextPageToken;
              _playlists.clear();

              do {
                final response = await _api.playlists.list(
                  ['snippet', 'contentDetails', 'id'],
                  channelId: _flutterDevAccountId,
                  maxResults: 50,
                  pageToken: nextPageToken,
                );
                _playlists.addAll(response.items!);
                _playlists.sort(
                  (a, b) => a.snippet!.title!.toLowerCase().compareTo(
                    b.snippet!.title!.toLowerCase(),
                  ),
                );
                notifyListeners();
                nextPageToken = response.nextPageToken;
              } while (nextPageToken != null);
            }

            final String _flutterDevAccountId;
            late final YouTubeApi _api;

            final List<Playlist> _playlists = [];
            List<Playlist> get playlists => UnmodifiableListView(_playlists);

            final Map<String, List<PlaylistItem>> _playlistItems = {};
            List<PlaylistItem> playlistItems({required String playlistId}) {
              if (!_playlistItems.containsKey(playlistId)) {
                _playlistItems[playlistId] = [];
                _retrievePlaylist(playlistId);
              }
              return UnmodifiableListView(_playlistItems[playlistId]!);
            }

            Future<void> _retrievePlaylist(String playlistId) async {
              String? nextPageToken;
              do {
                var response = await _api.playlistItems.list(
                  ['snippet', 'contentDetails'],
                  playlistId: playlistId,
                  maxResults: 25,
                  pageToken: nextPageToken,
                );
                var items = response.items;
                if (items != null) {
                  _playlistItems[playlistId]!.addAll(items);
                }
                notifyListeners();
                nextPageToken = response.nextPageToken;
              } while (nextPageToken != null);
            }
          }

          class _ApiKeyClient extends http.BaseClient {
            _ApiKeyClient({required this.key, required this.client});

            final String key;
            final http.Client client;

            @override
            Future<http.StreamedResponse> send(http.BaseRequest request) {
              final url = request.url.replace(
                queryParameters: <String, List<String>>{
                  ...request.url.queryParametersAll,
                  'key': [key],
                },
              );

              return client.send(http.Request(request.method, url));
            }
          }
      - name: Add playlist_details.dart
        path: adaptive_app/lib/src/playlist_details.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:googleapis/youtube/v3.dart';
          import 'package:provider/provider.dart';
          import 'package:url_launcher/link.dart';

          import 'app_state.dart';

          class PlaylistDetails extends StatelessWidget {
            const PlaylistDetails({
              required this.playlistId,
              required this.playlistName,
              super.key,
            });
            final String playlistId;
            final String playlistName;

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(title: Text(playlistName)),
                body: Consumer<FlutterDevPlaylists>(
                  builder: (context, playlists, _) {
                    final playlistItems = playlists.playlistItems(playlistId: playlistId);
                    if (playlistItems.isEmpty) {
                      return const Center(child: CircularProgressIndicator());
                    }

                    return _PlaylistDetailsListView(playlistItems: playlistItems);
                  },
                ),
              );
            }
          }

          class _PlaylistDetailsListView extends StatelessWidget {
            const _PlaylistDetailsListView({required this.playlistItems});
            final List<PlaylistItem> playlistItems;

            @override
            Widget build(BuildContext context) {
              return ListView.builder(
                itemCount: playlistItems.length,
                itemBuilder: (context, index) {
                  final playlistItem = playlistItems[index];
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(4),
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          if (playlistItem.snippet!.thumbnails!.high != null)
                            Image.network(playlistItem.snippet!.thumbnails!.high!.url!),
                          _buildGradient(context),
                          _buildTitleAndSubtitle(context, playlistItem),
                          _buildPlayButton(context, playlistItem),
                        ],
                      ),
                    ),
                  );
                },
              );
            }

            Widget _buildGradient(BuildContext context) {
              return Positioned.fill(
                child: DecoratedBox(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Colors.transparent, Theme.of(context).colorScheme.surface],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      stops: const [0.5, 0.95],
                    ),
                  ),
                ),
              );
            }

            Widget _buildTitleAndSubtitle(
              BuildContext context,
              PlaylistItem playlistItem,
            ) {
              return Positioned(
                left: 20,
                right: 0,
                bottom: 20,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      playlistItem.snippet!.title!,
                      style: Theme.of(context).textTheme.bodyLarge!.copyWith(
                        fontSize: 18,
                        // fontWeight: FontWeight.bold,
                      ),
                    ),
                    if (playlistItem.snippet!.videoOwnerChannelTitle != null)
                      Text(
                        playlistItem.snippet!.videoOwnerChannelTitle!,
                        style: Theme.of(
                          context,
                        ).textTheme.bodyMedium!.copyWith(fontSize: 12),
                      ),
                  ],
                ),
              );
            }

            Widget _buildPlayButton(BuildContext context, PlaylistItem playlistItem) {
              return Stack(
                alignment: AlignmentDirectional.center,
                children: [
                  Container(
                    width: 42,
                    height: 42,
                    decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.all(Radius.circular(21)),
                    ),
                  ),
                  Link(
                    uri: Uri.parse(
                      'https://www.youtube.com/watch?v=${playlistItem.snippet!.resourceId!.videoId}',
                    ),
                    builder:
                        (context, followLink) => IconButton(
                          onPressed: followLink,
                          color: Colors.red,
                          icon: const Icon(Icons.play_circle_fill),
                          iconSize: 45,
                        ),
                  ),
                ],
              );
            }
          }
      - name: Add playlists.dart
        path: adaptive_app/lib/src/playlists.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:googleapis/youtube/v3.dart';
          import 'package:provider/provider.dart';

          import 'app_state.dart';

          class Playlists extends StatelessWidget {
            const Playlists({super.key});

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(title: const Text('FlutterDev Playlists')),
                body: Consumer<FlutterDevPlaylists>(
                  builder: (context, flutterDev, child) {
                    final playlists = flutterDev.playlists;
                    if (playlists.isEmpty) {
                      return const Center(child: CircularProgressIndicator());
                    }

                    return _PlaylistsListView(items: playlists);
                  },
                ),
              );
            }
          }

          class _PlaylistsListView extends StatelessWidget {
            const _PlaylistsListView({required this.items});

            final List<Playlist> items;

            @override
            Widget build(BuildContext context) {
              return ListView.builder(
                itemCount: items.length,
                itemBuilder: (context, index) {
                  var playlist = items[index];
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ListTile(
                      leading: Image.network(
                        playlist.snippet!.thumbnails!.default_!.url!,
                      ),
                      title: Text(playlist.snippet!.title!),
                      subtitle: Text(playlist.snippet!.description!),
                      onTap: () {
                        context.go(
                          Uri(
                            path: '/playlist/${playlist.id}',
                            queryParameters: <String, String>{
                              'title': playlist.snippet!.title!,
                            },
                          ).toString(),
                        );
                      },
                    ),
                  );
                },
              );
            }
          }
      - name: Patch macOS DebugProfile.entitlements
        path: adaptive_app/macos/Runner/DebugProfile.entitlements
        patch-u: |
          --- b/adaptive_app/step_04/macos/Runner/DebugProfile.entitlements
          +++ a/adaptive_app/step_04/macos/Runner/DebugProfile.entitlements
          @@ -8,5 +8,7 @@
           	<true/>
           	<key>com.apple.security.network.server</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Patch macOS Release.entitlements
        path: adaptive_app/macos/Runner/Release.entitlements
        patch-u: |
          --- b/adaptive_app/step_04/macos/Runner/Release.entitlements
          +++ a/adaptive_app/step_04/macos/Runner/Release.entitlements
          @@ -4,5 +4,7 @@
           <dict>
           	<key>com.apple.security.app-sandbox</key>
           	<true/>
          +	<key>com.apple.security.network.client</key>
          +	<true/>
           </dict>
           </plist>
      - name: Replace test/widget_test.dart
        path: adaptive_app/test/widget_test.dart
        replace-contents: |
          import 'package:adaptive_app/main.dart';
          import 'package:adaptive_app/src/app_state.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter_test/flutter_test.dart';
          import 'package:googleapis/youtube/v3.dart';
          import 'package:provider/provider.dart';

          class FakeFlutterDevPlaylists extends ChangeNotifier
              implements FlutterDevPlaylists {
            @override
            List<PlaylistItem> playlistItems({required String playlistId}) => [];

            @override
            List<Playlist> get playlists => [];
          }

          void main() {
            testWidgets('smoke test', (tester) async {
              // Build our app and trigger a frame.
              await tester.pumpWidget(
                ChangeNotifierProvider<FlutterDevPlaylists>(
                  create: (context) => FakeFlutterDevPlaylists(),
                  child: const PlaylistsApp(),
                ),
              );
            });
          }
      - name: Rebuild ios/Podfile.lock
        platforms: [ macos ]
        path: adaptive_app/ios
        pod: install
      - name: Rebuild macos/Podfile.lock
        platforms: [ macos ]
        path: adaptive_app/macos
        pod: install
      - name: Copy step_04
        copydir:
          from: adaptive_app 
          to: step_04
  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Add dependencies
        path: adaptive_app
        flutter: pub add split_view
      - name: Patch lib/main.dart
        path: adaptive_app/lib/main.dart
        patch-u: |
          --- b/adaptive_app/step_05/lib/main.dart
          +++ a/adaptive_app/step_05/lib/main.dart
          @@ -9,9 +9,9 @@ import 'package:flutter/material.dart';
           import 'package:go_router/go_router.dart';
           import 'package:provider/provider.dart';
           
          +import 'src/adaptive_playlists.dart';
           import 'src/app_state.dart';
           import 'src/playlist_details.dart';
          -import 'src/playlists.dart';
           
           // From https://www.youtube.com/channel/UCwXdFgeE9KYzlDdR7TG9cMw
           const flutterDevAccountId = 'UCwXdFgeE9KYzlDdR7TG9cMw';
          @@ -24,7 +24,7 @@ final _router = GoRouter(
               GoRoute(
                 path: '/',
                 builder: (context, state) {
          -        return const Playlists();
          +        return const AdaptivePlaylists();
                 },
                 routes: <RouteBase>[
                   GoRoute(
          @@ -32,7 +32,10 @@ final _router = GoRouter(
                     builder: (context, state) {
                       final title = state.uri.queryParameters['title']!;
                       final id = state.pathParameters['id']!;
          -            return PlaylistDetails(playlistId: id, playlistName: title);
          +            return Scaffold(
          +              appBar: AppBar(title: Text(title)),
          +              body: PlaylistDetails(playlistId: id, playlistName: title),
          +            );
                     },
                   ),
                 ],
      - name: Patch lib/src/playlists.dart
        path: adaptive_app/lib/src/playlists.dart
        patch-u: |
          --- b/adaptive_app/step_05/lib/src/playlists.dart
          +++ a/adaptive_app/step_05/lib/src/playlists.dart
          @@ -3,44 +3,71 @@
           // found in the LICENSE file.
           
           import 'package:flutter/material.dart';
          -import 'package:go_router/go_router.dart';
           import 'package:googleapis/youtube/v3.dart';
           import 'package:provider/provider.dart';
           
           import 'app_state.dart';
           
           class Playlists extends StatelessWidget {
          -  const Playlists({super.key});
          +  const Playlists({super.key, required this.playlistSelected});
          +
          +  final PlaylistsListSelected playlistSelected;
           
             @override
             Widget build(BuildContext context) {
          -    return Scaffold(
          -      appBar: AppBar(title: const Text('FlutterDev Playlists')),
          -      body: Consumer<FlutterDevPlaylists>(
          -        builder: (context, flutterDev, child) {
          -          final playlists = flutterDev.playlists;
          -          if (playlists.isEmpty) {
          -            return const Center(child: CircularProgressIndicator());
          -          }
          +    return Consumer<FlutterDevPlaylists>(
          +      builder: (context, flutterDev, child) {
          +        final playlists = flutterDev.playlists;
          +        if (playlists.isEmpty) {
          +          return const Center(child: CircularProgressIndicator());
          +        }
           
          -          return _PlaylistsListView(items: playlists);
          -        },
          -      ),
          +        return _PlaylistsListView(
          +          items: playlists,
          +          playlistSelected: playlistSelected,
          +        );
          +      },
               );
             }
           }
           
          -class _PlaylistsListView extends StatelessWidget {
          -  const _PlaylistsListView({required this.items});
          +typedef PlaylistsListSelected = void Function(Playlist playlist);
          +
          +class _PlaylistsListView extends StatefulWidget {
          +  const _PlaylistsListView({
          +    required this.items,
          +    required this.playlistSelected,
          +  });
           
             final List<Playlist> items;
          +  final PlaylistsListSelected playlistSelected;
          +
          +  @override
          +  State<_PlaylistsListView> createState() => _PlaylistsListViewState();
          +}
          +
          +class _PlaylistsListViewState extends State<_PlaylistsListView> {
          +  late ScrollController _scrollController;
          +
          +  @override
          +  void initState() {
          +    super.initState();
          +    _scrollController = ScrollController();
          +  }
          +
          +  @override
          +  void dispose() {
          +    _scrollController.dispose();
          +    super.dispose();
          +  }
           
             @override
             Widget build(BuildContext context) {
               return ListView.builder(
          -      itemCount: items.length,
          +      controller: _scrollController,
          +      itemCount: widget.items.length,
                 itemBuilder: (context, index) {
          -        var playlist = items[index];
          +        var playlist = widget.items[index];
                   return Padding(
                     padding: const EdgeInsets.all(8.0),
                     child: ListTile(
          @@ -50,14 +77,7 @@ class _PlaylistsListView extends StatelessWidget {
                       title: Text(playlist.snippet!.title!),
                       subtitle: Text(playlist.snippet!.description!),
                       onTap: () {
          -              context.go(
          -                Uri(
          -                  path: '/playlist/${playlist.id}',
          -                  queryParameters: <String, String>{
          -                    'title': playlist.snippet!.title!,
          -                  },
          -                ).toString(),
          -              );
          +              widget.playlistSelected(playlist);
                       },
                     ),
                   );
      - name: Patch lib/src/playlist_details.dart
        path: adaptive_app/lib/src/playlist_details.dart
        patch-u: |
          --- b/adaptive_app/step_05/lib/src/playlist_details.dart
          +++ a/adaptive_app/step_05/lib/src/playlist_details.dart
          @@ -20,32 +20,50 @@ class PlaylistDetails extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return Scaffold(
          -      appBar: AppBar(title: Text(playlistName)),
          -      body: Consumer<FlutterDevPlaylists>(
          -        builder: (context, playlists, _) {
          -          final playlistItems = playlists.playlistItems(playlistId: playlistId);
          -          if (playlistItems.isEmpty) {
          -            return const Center(child: CircularProgressIndicator());
          -          }
          +    return Consumer<FlutterDevPlaylists>(
          +      builder: (context, playlists, _) {
          +        final playlistItems = playlists.playlistItems(playlistId: playlistId);
          +        if (playlistItems.isEmpty) {
          +          return const Center(child: CircularProgressIndicator());
          +        }
           
          -          return _PlaylistDetailsListView(playlistItems: playlistItems);
          -        },
          -      ),
          +        return _PlaylistDetailsListView(playlistItems: playlistItems);
          +      },
               );
             }
           }
           
          -class _PlaylistDetailsListView extends StatelessWidget {
          +class _PlaylistDetailsListView extends StatefulWidget {
             const _PlaylistDetailsListView({required this.playlistItems});
             final List<PlaylistItem> playlistItems;
           
          +  @override
          +  State<_PlaylistDetailsListView> createState() =>
          +      _PlaylistDetailsListViewState();
          +}
          +
          +class _PlaylistDetailsListViewState extends State<_PlaylistDetailsListView> {
          +  late ScrollController _scrollController;
          +
          +  @override
          +  void initState() {
          +    super.initState();
          +    _scrollController = ScrollController();
          +  }
          +
          +  @override
          +  void dispose() {
          +    _scrollController.dispose();
          +    super.dispose();
          +  }
          +
             @override
             Widget build(BuildContext context) {
               return ListView.builder(
          -      itemCount: playlistItems.length,
          +      controller: _scrollController,
          +      itemCount: widget.playlistItems.length,
                 itemBuilder: (context, index) {
          -        final playlistItem = playlistItems[index];
          +        final playlistItem = widget.playlistItems[index];
                   return Padding(
                     padding: const EdgeInsets.all(8.0),
                     child: ClipRRect(
      - name: Add lib/src/adaptive_playlists.dart
        path: adaptive_app/lib/src/adaptive_playlists.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:googleapis/youtube/v3.dart';
          import 'package:split_view/split_view.dart';

          import 'playlist_details.dart';
          import 'playlists.dart';

          class AdaptivePlaylists extends StatelessWidget {
            const AdaptivePlaylists({super.key});

            @override
            Widget build(BuildContext context) {
              final screenWidth = MediaQuery.of(context).size.width;
              final targetPlatform = Theme.of(context).platform;

              if (targetPlatform == TargetPlatform.android ||
                  targetPlatform == TargetPlatform.iOS ||
                  screenWidth <= 600) {
                return const NarrowDisplayPlaylists();
              } else {
                return const WideDisplayPlaylists();
              }
            }
          }

          class NarrowDisplayPlaylists extends StatelessWidget {
            const NarrowDisplayPlaylists({super.key});

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(title: const Text('FlutterDev Playlists')),
                body: Playlists(
                  playlistSelected: (playlist) {
                    context.go(
                      Uri(
                        path: '/playlist/${playlist.id}',
                        queryParameters: <String, String>{
                          'title': playlist.snippet!.title!,
                        },
                      ).toString(),
                    );
                  },
                ),
              );
            }
          }

          class WideDisplayPlaylists extends StatefulWidget {
            const WideDisplayPlaylists({super.key});

            @override
            State<WideDisplayPlaylists> createState() => _WideDisplayPlaylistsState();
          }

          class _WideDisplayPlaylistsState extends State<WideDisplayPlaylists> {
            Playlist? selectedPlaylist;
            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: switch (selectedPlaylist?.snippet?.title) {
                    String title => Text('FlutterDev Playlist: $title'),
                    _ => const Text('FlutterDev Playlists'),
                  },
                ),
                body: SplitView(
                  viewMode: SplitViewMode.Horizontal,
                  children: [
                    Playlists(
                      playlistSelected: (playlist) {
                        setState(() {
                          selectedPlaylist = playlist;
                        });
                      },
                    ),
                    switch ((selectedPlaylist?.id, selectedPlaylist?.snippet?.title)) {
                      (String id, String title) => PlaylistDetails(
                        playlistId: id,
                        playlistName: title,
                      ),
                      _ => const Center(child: Text('Select a playlist')),
                    },
                  ],
                ),
              );
            }
          }
      - name: Copy step_05
        copydir:
          from: adaptive_app
          to: step_05
  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Create yt_cors_proxy
        path: adaptive_app
        dart: create --template server-shelf yt_cors_proxy
      - name: Remove shelf_router test
        path: adaptive_app/yt_cors_proxy
        dart: pub remove shelf_router test
      - name: Add http shelf_cors_headers
        path: adaptive_app/yt_cors_proxy
        dart: pub add http shelf_cors_headers
      - name: Upgrade dart dependencies
        path: adaptive_app/yt_cors_proxy
        dart: pub upgrade --major-versions
      - name: Patch yt_cors_proxy/pubspec.yaml
        path: adaptive_app/yt_cors_proxy/pubspec.yaml
        patch-u: |
          --- b/adaptive_app/step_06/yt_cors_proxy/pubspec.yaml
          +++ a/adaptive_app/step_06/yt_cors_proxy/pubspec.yaml
          @@ -1,5 +1,4 @@
           name: yt_cors_proxy
          -description: A server app using the shelf package and Docker.
          +description: A YouTube CORS Proxy Server.
           version: 1.0.0
          -# repository: https://github.com/my_org/my_repo
      - name: Remove yt_cors_proxy/CHANGELOG.md
        path: adaptive_app/yt_cors_proxy
        rm: CHANGELOG.md
      - name: Remove yt_cors_proxy/README.md
        path: adaptive_app/yt_cors_proxy
        rm: README.md
      - name: Remove yt_cors_proxy/test
        path: adaptive_app/yt_cors_proxy
        rmdir: test
      - name: Replace yt_cors_proxy/bin/server.dart
        path: adaptive_app/yt_cors_proxy/bin/server.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.
          
          import 'dart:async';
          import 'dart:io';

          import 'package:http/http.dart' as http;
          import 'package:shelf/shelf.dart';
          import 'package:shelf/shelf_io.dart';
          import 'package:shelf_cors_headers/shelf_cors_headers.dart';

          Future<Response> _requestHandler(Request req) async {
            final target = req.url.replace(scheme: 'https', host: 'i.ytimg.com');
            final response = await http.get(target);
            return Response.ok(response.bodyBytes, headers: response.headers);
          }

          void main(List<String> args) async {
            // Use any available host or container IP (usually `0.0.0.0`).
            final ip = InternetAddress.anyIPv4;

            // Configure a pipeline that adds CORS headers and proxies requests.
            final handler = Pipeline()
                .addMiddleware(logRequests())
                .addMiddleware(corsHeaders(headers: {ACCESS_CONTROL_ALLOW_ORIGIN: '*'}))
                .addHandler(_requestHandler);

            // For running in containers, we respect the PORT environment variable.
            final port = int.parse(Platform.environment['PORT'] ?? '8080');
            final server = await serve(handler, ip, port);
            print('Server listening on port ${server.port}');
          }
      - name: Replace yt_cors_proxy/analysis_options.yaml
        path: adaptive_app/yt_cors_proxy/analysis_options.yaml
        replace-contents: |
          include: package:lints/recommended.yaml

          linter:
            rules:
              avoid_print: false
              directives_ordering: true
              prefer_single_quotes: true

          # For additional information about configuring this file, see
          # https://dart.dev/guides/language/analysis-options
      - name: Patch lib/src/playlist_details.dart
        path: adaptive_app/lib/src/playlist_details.dart
        patch-u: |
          --- b/adaptive_app/step_06/lib/src/playlist_details.dart
          +++ a/adaptive_app/step_06/lib/src/playlist_details.dart
          @@ -7,6 +7,8 @@ import 'package:googleapis/youtube/v3.dart';
           import 'package:provider/provider.dart';
           import 'package:url_launcher/link.dart';
           
          +import 'adaptive_image.dart';
          +import 'adaptive_text.dart';
           import 'app_state.dart';
           
           class PlaylistDetails extends StatelessWidget {
          @@ -72,7 +74,9 @@ class _PlaylistDetailsListViewState extends State<_PlaylistDetailsListView> {
                         alignment: Alignment.center,
                         children: [
                           if (playlistItem.snippet!.thumbnails!.high != null)
          -                  Image.network(playlistItem.snippet!.thumbnails!.high!.url!),
          +                  AdaptiveImage.network(
          +                    playlistItem.snippet!.thumbnails!.high!.url!,
          +                  ),
                           _buildGradient(context),
                           _buildTitleAndSubtitle(context, playlistItem),
                           _buildPlayButton(context, playlistItem),
          @@ -111,7 +115,7 @@ class _PlaylistDetailsListViewState extends State<_PlaylistDetailsListView> {
                   mainAxisSize: MainAxisSize.min,
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
          -          Text(
          +          AdaptiveText(
                       playlistItem.snippet!.title!,
                       style: Theme.of(context).textTheme.bodyLarge!.copyWith(
                         fontSize: 18,
          @@ -119,7 +123,7 @@ class _PlaylistDetailsListViewState extends State<_PlaylistDetailsListView> {
                       ),
                     ),
                     if (playlistItem.snippet!.videoOwnerChannelTitle != null)
          -            Text(
          +            AdaptiveText(
                         playlistItem.snippet!.videoOwnerChannelTitle!,
                         style: Theme.of(
                           context,
      - name: Patch playlists.dart
        path: adaptive_app/lib/src/playlists.dart
        patch-u: |
          --- b/adaptive_app/step_06/lib/src/playlists.dart
          +++ a/adaptive_app/step_06/lib/src/playlists.dart
          @@ -6,6 +6,7 @@ import 'package:flutter/material.dart';
           import 'package:googleapis/youtube/v3.dart';
           import 'package:provider/provider.dart';
           
          +import 'adaptive_image.dart';
           import 'app_state.dart';
           
           class Playlists extends StatelessWidget {
          @@ -71,7 +72,7 @@ class _PlaylistsListViewState extends State<_PlaylistsListView> {
                   return Padding(
                     padding: const EdgeInsets.all(8.0),
                     child: ListTile(
          -            leading: Image.network(
          +            leading: AdaptiveImage.network(
                         playlist.snippet!.thumbnails!.default_!.url!,
                       ),
                       title: Text(playlist.snippet!.title!),
      - name: Add adaptive_image.dart
        path: adaptive_app/lib/src/adaptive_image.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/foundation.dart';
          import 'package:flutter/material.dart';

          class AdaptiveImage extends StatelessWidget {
            AdaptiveImage.network(String url, {super.key}) {
              if (kIsWeb) {
                _url =
                    Uri.parse(
                      url,
                    ).replace(host: 'localhost', port: 8080, scheme: 'http').toString();
              } else {
                _url = url;
              }
            }

            late final String _url;

            @override
            Widget build(BuildContext context) {
              return Image.network(_url);
            }
          }
      - name: Add adaptive_text.dart
        path: adaptive_app/lib/src/adaptive_text.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';

          class AdaptiveText extends StatelessWidget {
            const AdaptiveText(this.data, {super.key, this.style});
            final String data;
            final TextStyle? style;

            @override
            Widget build(BuildContext context) {
              return switch (Theme.of(context).platform) {
                TargetPlatform.android || TargetPlatform.iOS => Text(data, style: style),
                _ => SelectableText(data, style: style),
              };
            }
          }
      - name: Copy step_06
        copydir:
          from: adaptive_app
          to: step_06
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Remove http package
        path: adaptive_app
        flutter: pub remove http
      - name: flutter clean
        path: adaptive_app
        flutter: clean
      - name: flutter pub get
        path: adaptive_app
        flutter: pub get
      - name: Add googleapis_auth google_sign_in extension_google_sign_in_as_googleapis_auth
        path: adaptive_app
        flutter: pub add googleapis_auth google_sign_in extension_google_sign_in_as_googleapis_auth http
      - name: Patch macos/Podfile
        path: adaptive_app/macos/Podfile
        patch-u: |
          --- b/adaptive_app/step_07/macos/Podfile
          +++ a/adaptive_app/step_07/macos/Podfile
          @@ -1,4 +1,4 @@
          -platform :osx, '10.14'
          +platform :osx, '10.15'
           
           # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
           ENV['COCOAPODS_DISABLE_STATS'] = 'true'
      - name: Patch .gitignore
        path: adaptive_app/.gitignore
        patch-u: |
          --- b/adaptive_app/step_07/.gitignore
          +++ a/adaptive_app/step_07/.gitignore
          @@ -43,3 +43,6 @@ app.*.map.json
           /android/app/debug
           /android/app/profile
           /android/app/release
          +
          +# Google Signin credentials
          +ios/Runner/GoogleService-Info.plist
      - name: Add adaptive_login.dart
        path: adaptive_app/lib/src/adaptive_login.dart
        replace-contents: |
          // Copyright 2022 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'dart:io' show Platform;

          import 'package:extension_google_sign_in_as_googleapis_auth/extension_google_sign_in_as_googleapis_auth.dart';
          import 'package:flutter/foundation.dart';
          import 'package:flutter/material.dart';
          import 'package:go_router/go_router.dart';
          import 'package:google_sign_in/google_sign_in.dart';
          import 'package:googleapis_auth/auth_io.dart';
          import 'package:provider/provider.dart';
          import 'package:url_launcher/link.dart';

          import 'app_state.dart';

          typedef _AdaptiveLoginButtonWidget =
              Widget Function({required VoidCallback? onPressed});

          class AdaptiveLogin extends StatelessWidget {
            const AdaptiveLogin({
              super.key,
              required this.clientId,
              required this.scopes,
              required this.loginButtonChild,
            });

            final ClientId clientId;
            final List<String> scopes;
            final Widget loginButtonChild;

            @override
            Widget build(BuildContext context) {
              if (kIsWeb || Platform.isAndroid || Platform.isIOS) {
                return _GoogleSignInLogin(button: _loginButton, scopes: scopes);
              } else {
                return _GoogleApisAuthLogin(
                  button: _loginButton,
                  scopes: scopes,
                  clientId: clientId,
                );
              }
            }

            Widget _loginButton({required VoidCallback? onPressed}) =>
                ElevatedButton(onPressed: onPressed, child: loginButtonChild);
          }

          class _GoogleSignInLogin extends StatefulWidget {
            const _GoogleSignInLogin({required this.button, required this.scopes});

            final _AdaptiveLoginButtonWidget button;
            final List<String> scopes;

            @override
            State<_GoogleSignInLogin> createState() => _GoogleSignInLoginState();
          }

          class _GoogleSignInLoginState extends State<_GoogleSignInLogin> {
            @override
            initState() {
              super.initState();
              _googleSignIn = GoogleSignIn(scopes: widget.scopes);
              _googleSignIn.onCurrentUserChanged.listen((account) {
                if (account != null) {
                  _googleSignIn.authenticatedClient().then((authClient) {
                    final context = this.context;
                    if (authClient != null && context.mounted) {
                      context.read<AuthedUserPlaylists>().authClient = authClient;
                      context.go('/');
                    }
                  });
                }
              });
            }

            late final GoogleSignIn _googleSignIn;

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                body: Center(
                  child: widget.button(
                    onPressed: () {
                      _googleSignIn.signIn();
                    },
                  ),
                ),
              );
            }
          }

          class _GoogleApisAuthLogin extends StatefulWidget {
            const _GoogleApisAuthLogin({
              required this.button,
              required this.scopes,
              required this.clientId,
            });

            final _AdaptiveLoginButtonWidget button;
            final List<String> scopes;
            final ClientId clientId;

            @override
            State<_GoogleApisAuthLogin> createState() => _GoogleApisAuthLoginState();
          }

          class _GoogleApisAuthLoginState extends State<_GoogleApisAuthLogin> {
            @override
            initState() {
              super.initState();
              clientViaUserConsent(widget.clientId, widget.scopes, (url) {
                setState(() {
                  _authUrl = Uri.parse(url);
                });
              }).then((authClient) {
                final context = this.context;
                if (context.mounted) {
                  context.read<AuthedUserPlaylists>().authClient = authClient;
                  context.go('/');
                }
              });
            }

            Uri? _authUrl;

            @override
            Widget build(BuildContext context) {
              final authUrl = _authUrl;
              if (authUrl != null) {
                return Scaffold(
                  body: Center(
                    child: Link(
                      uri: authUrl,
                      builder:
                          (context, followLink) => widget.button(onPressed: followLink),
                    ),
                  ),
                );
              }

              return const Scaffold(body: Center(child: CircularProgressIndicator()));
            }
          }
      - name: Patch Info.plist
        path: adaptive_app/ios/Runner/Info.plist
        patch-u: |
          --- b/adaptive_app/step_07/ios/Runner/Info.plist
          +++ a/adaptive_app/step_07/ios/Runner/Info.plist
          @@ -53,5 +53,18 @@
           		<string>tel</string>
           		<string>mailto</string>
           	</array>
          +	<key>CFBundleURLTypes</key>
          +	<array>
          +		<dict>
          +			<key>CFBundleTypeRole</key>
          +			<string>Editor</string>
          +			<key>CFBundleURLSchemes</key>
          +			<array>
          +				<!-- TODO Replace this value: -->
          +				<!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->
          +				<string>com.googleusercontent.apps.TODO-REPLACE-ME</string>
          +			</array>
          +		</dict>
          +	</array>
           </dict>
           </plist>
      - name: Patch main.dart
        path: adaptive_app/lib/main.dart
        patch-u: |
          --- b/adaptive_app/step_07/lib/main.dart
          +++ a/adaptive_app/step_07/lib/main.dart
          @@ -2,22 +2,25 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          -import 'dart:io';
          -
           import 'package:flex_color_scheme/flex_color_scheme.dart';
           import 'package:flutter/material.dart';
           import 'package:go_router/go_router.dart';
          +import 'package:googleapis_auth/googleapis_auth.dart';
           import 'package:provider/provider.dart';
           
          +import 'src/adaptive_login.dart';
           import 'src/adaptive_playlists.dart';
           import 'src/app_state.dart';
           import 'src/playlist_details.dart';
           
          -// From https://www.youtube.com/channel/UCwXdFgeE9KYzlDdR7TG9cMw
          -const flutterDevAccountId = 'UCwXdFgeE9KYzlDdR7TG9cMw';
          +// From https://developers.google.com/youtube/v3/guides/auth/installed-apps#identify-access-scopes
          +final scopes = ['https://www.googleapis.com/auth/youtube.readonly'];
           
          -// TODO: Replace with your YouTube API Key
          -const youTubeApiKey = 'AIzaNotAnApiKey';
          +// TODO: Replace with your Client ID and Client Secret for Desktop configuration
          +final clientId = ClientId(
          +  'TODO-Client-ID.apps.googleusercontent.com',
          +  'TODO-Client-secret',
          +);
           
           final _router = GoRouter(
             routes: <RouteBase>[
          @@ -26,7 +29,24 @@ final _router = GoRouter(
                 builder: (context, state) {
                   return const AdaptivePlaylists();
                 },
          +      redirect: (context, state) {
          +        if (!context.read<AuthedUserPlaylists>().isLoggedIn) {
          +          return '/login';
          +        } else {
          +          return null;
          +        }
          +      },
                 routes: <RouteBase>[
          +        GoRoute(
          +          path: 'login',
          +          builder: (context, state) {
          +            return AdaptiveLogin(
          +              clientId: clientId,
          +              scopes: scopes,
          +              loginButtonChild: const Text('Login to YouTube'),
          +            );
          +          },
          +        ),
                   GoRoute(
                     path: 'playlist/:id',
                     builder: (context, state) {
          @@ -44,18 +64,9 @@ final _router = GoRouter(
           );
           
           void main() {
          -  if (youTubeApiKey == 'AIzaNotAnApiKey') {
          -    print('youTubeApiKey has not been configured.');
          -    exit(1);
          -  }
          -
             runApp(
          -    ChangeNotifierProvider<FlutterDevPlaylists>(
          -      create:
          -          (context) => FlutterDevPlaylists(
          -            flutterDevAccountId: flutterDevAccountId,
          -            youTubeApiKey: youTubeApiKey,
          -          ),
          +    ChangeNotifierProvider<AuthedUserPlaylists>(
          +      create: (context) => AuthedUserPlaylists(),
                 child: const PlaylistsApp(),
               ),
             );
          @@ -67,7 +78,7 @@ class PlaylistsApp extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return MaterialApp.router(
          -      title: 'FlutterDev Playlists',
          +      title: 'Your Playlists',
                 theme: FlexColorScheme.light(scheme: FlexScheme.red).toTheme,
                 darkTheme: FlexColorScheme.dark(scheme: FlexScheme.red).toTheme,
                 themeMode: ThemeMode.dark, // Or ThemeMode.System if you'd prefer
      - name: Patch lib/src/adaptive_playlists.dart
        path: adaptive_app/lib/src/adaptive_playlists.dart
        patch-u: |
          --- b/adaptive_app/step_07/lib/src/adaptive_playlists.dart
          +++ a/adaptive_app/step_07/lib/src/adaptive_playlists.dart
          @@ -34,7 +34,7 @@ class NarrowDisplayPlaylists extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return Scaffold(
          -      appBar: AppBar(title: const Text('FlutterDev Playlists')),
          +      appBar: AppBar(title: const Text('Your Playlists')),
                 body: Playlists(
                   playlistSelected: (playlist) {
                     context.go(
          @@ -65,8 +65,8 @@ class _WideDisplayPlaylistsState extends State<WideDisplayPlaylists> {
               return Scaffold(
                 appBar: AppBar(
                   title: switch (selectedPlaylist?.snippet?.title) {
          -          String title => Text('FlutterDev Playlist: $title'),
          -          _ => const Text('FlutterDev Playlists'),
          +          String title => Text('Your Playlist: $title'),
          +          _ => const Text('Your Playlists'),
                   },
                 ),
                 body: SplitView(
      - name: Patch lib/src/app_state.dart
        path: adaptive_app/lib/src/app_state.dart
        patch-u: |
          --- b/adaptive_app/step_07/lib/src/app_state.dart
          +++ a/adaptive_app/step_07/lib/src/app_state.dart
          @@ -8,23 +8,22 @@ import 'package:flutter/foundation.dart';
           import 'package:googleapis/youtube/v3.dart';
           import 'package:http/http.dart' as http;
           
          -class FlutterDevPlaylists extends ChangeNotifier {
          -  FlutterDevPlaylists({
          -    required String flutterDevAccountId,
          -    required String youTubeApiKey,
          -  }) : _flutterDevAccountId = flutterDevAccountId {
          -    _api = YouTubeApi(_ApiKeyClient(client: http.Client(), key: youTubeApiKey));
          +class AuthedUserPlaylists extends ChangeNotifier {
          +  set authClient(http.Client client) {
          +    _api = YouTubeApi(client);
               _loadPlaylists();
             }
           
          +  bool get isLoggedIn => _api != null;
          +
             Future<void> _loadPlaylists() async {
               String? nextPageToken;
               _playlists.clear();
           
               do {
          -      final response = await _api.playlists.list(
          +      final response = await _api!.playlists.list(
                   ['snippet', 'contentDetails', 'id'],
          -        channelId: _flutterDevAccountId,
          +        mine: true,
                   maxResults: 50,
                   pageToken: nextPageToken,
                 );
          @@ -39,8 +38,7 @@ class FlutterDevPlaylists extends ChangeNotifier {
               } while (nextPageToken != null);
             }
           
          -  final String _flutterDevAccountId;
          -  late final YouTubeApi _api;
          +  YouTubeApi? _api;
           
             final List<Playlist> _playlists = [];
             List<Playlist> get playlists => UnmodifiableListView(_playlists);
          @@ -57,7 +55,7 @@ class FlutterDevPlaylists extends ChangeNotifier {
             Future<void> _retrievePlaylist(String playlistId) async {
               String? nextPageToken;
               do {
          -      var response = await _api.playlistItems.list(
          +      var response = await _api!.playlistItems.list(
                   ['snippet', 'contentDetails'],
                   playlistId: playlistId,
                   maxResults: 25,
          @@ -72,22 +70,3 @@ class FlutterDevPlaylists extends ChangeNotifier {
               } while (nextPageToken != null);
             }
           }
          -
          -class _ApiKeyClient extends http.BaseClient {
          -  _ApiKeyClient({required this.key, required this.client});
          -
          -  final String key;
          -  final http.Client client;
          -
          -  @override
          -  Future<http.StreamedResponse> send(http.BaseRequest request) {
          -    final url = request.url.replace(
          -      queryParameters: <String, List<String>>{
          -        ...request.url.queryParametersAll,
          -        'key': [key],
          -      },
          -    );
          -
          -    return client.send(http.Request(request.method, url));
          -  }
          -}
      - name: Patch lib/src/playlist_details.dart
        path: adaptive_app/lib/src/playlist_details.dart
        patch-u: |
          --- b/adaptive_app/step_07/lib/src/playlist_details.dart
          +++ a/adaptive_app/step_07/lib/src/playlist_details.dart
          @@ -22,7 +22,7 @@ class PlaylistDetails extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return Consumer<FlutterDevPlaylists>(
          +    return Consumer<AuthedUserPlaylists>(
                 builder: (context, playlists, _) {
                   final playlistItems = playlists.playlistItems(playlistId: playlistId);
                   if (playlistItems.isEmpty) {
      - name: Patch lib/src/playlists.dart
        path: adaptive_app/lib/src/playlists.dart
        patch-u: |
          --- b/adaptive_app/step_07/lib/src/playlists.dart
          +++ a/adaptive_app/step_07/lib/src/playlists.dart
          @@ -16,7 +16,7 @@ class Playlists extends StatelessWidget {
           
             @override
             Widget build(BuildContext context) {
          -    return Consumer<FlutterDevPlaylists>(
          +    return Consumer<AuthedUserPlaylists>(
                 builder: (context, flutterDev, child) {
                   final playlists = flutterDev.playlists;
                   if (playlists.isEmpty) {
      - name: Patch macos/Runner/Release.entitlements
        path: adaptive_app/macos/Runner/Release.entitlements
        patch-u: |
          --- b/adaptive_app/step_07/macos/Runner/Release.entitlements
          +++ a/adaptive_app/step_07/macos/Runner/Release.entitlements
          @@ -4,6 +4,8 @@
           <dict>
           	<key>com.apple.security.app-sandbox</key>
           	<true/>
          +	<key>com.apple.security.network.server</key>
          +	<true/>
           	<key>com.apple.security.network.client</key>
           	<true/>
           </dict>
      - name: Patch test/widget_test.dart
        path: adaptive_app/test/widget_test.dart
        patch-u: |
          --- b/adaptive_app/step_07/test/widget_test.dart
          +++ a/adaptive_app/step_07/test/widget_test.dart
          @@ -3,23 +3,30 @@ import 'package:adaptive_app/src/app_state.dart';
           import 'package:flutter/material.dart';
           import 'package:flutter_test/flutter_test.dart';
           import 'package:googleapis/youtube/v3.dart';
          +import 'package:http/src/client.dart';
           import 'package:provider/provider.dart';
           
          -class FakeFlutterDevPlaylists extends ChangeNotifier
          -    implements FlutterDevPlaylists {
          +class FakeAuthedUserPlaylists extends ChangeNotifier
          +    implements AuthedUserPlaylists {
             @override
             List<PlaylistItem> playlistItems({required String playlistId}) => [];
           
             @override
             List<Playlist> get playlists => [];
          +
          +  @override
          +  set authClient(Client authClient) => throw UnimplementedError();
          +
          +  @override
          +  bool get isLoggedIn => true;
           }
           
           void main() {
             testWidgets('smoke test', (tester) async {
               // Build our app and trigger a frame.
               await tester.pumpWidget(
          -      ChangeNotifierProvider<FlutterDevPlaylists>(
          -        create: (context) => FakeFlutterDevPlaylists(),
          +      ChangeNotifierProvider<AuthedUserPlaylists>(
          +        create: (context) => FakeAuthedUserPlaylists(),
                   child: const PlaylistsApp(),
                 ),
               );
      - name: Patch web/index.html
        path: adaptive_app/web/index.html
        patch-u: |
          --- b/adaptive_app/step_07/web/index.html
          +++ a/adaptive_app/step_07/web/index.html
          @@ -29,6 +29,9 @@
             <!-- Favicon -->
             <link rel="icon" type="image/png" href="favicon.png"/>
           
          +  <!-- google_sign_in_web -->
          +  <meta name="google-signin-client_id" content="YOUR_GOOGLE_SIGN_IN_OAUTH_CLIENT_ID.apps.googleusercontent.com">
          +
             <title>adaptive_app</title>
             <link rel="manifest" href="manifest.json">
           </head>
      - name: Rebuild ios/Podfile.lock
        platforms: [ macos ]
        path: adaptive_app/ios
        pod: install
      - name: Rebuild macos/Podfile.lock
        platforms: [ macos ]
        path: adaptive_app/macos
        pod: install
      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: adaptive_app
        flutter: build ios --simulator
      - name: Build macOS app
        platforms: [ macos ]
        path: adaptive_app
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: adaptive_app
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: adaptive_app
        flutter: build windows
      - name: Build Web app
        path: adaptive_app
        flutter: build web
      - name: Copy step_07
        copydir:
          from: adaptive_app
          to: step_07
      - name: Flutter clean
        path: step_07
        flutter: clean
  - name: Cleanup
    rmdir: adaptive_app